
SAMPLE_CODE_LOG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b18  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08009cb8  08009cb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a46c  0800a46c  0000c05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a46c  0800a46c  0000b46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a474  0800a474  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a474  0800a474  0000b474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a478  0800a478  0000b478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800a47c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  2000005c  0800a4d8  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800a4d8  0000c83c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168da  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003148  00000000  00000000  00022966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00025ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcd  00000000  00000000  00026ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a60f  00000000  00000000  00027e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a336  00000000  00000000  000424ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3c70  00000000  00000000  0005c7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab8  00000000  00000000  00100498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00105f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ca0 	.word	0x08009ca0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08009ca0 	.word	0x08009ca0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_TIM_PeriodElapsedCallback>:
static void MX_SPI2_Init(void);
static void MX_ADC1_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM2_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005ec:	d102      	bne.n	80005f4 <HAL_TIM_PeriodElapsedCallback+0x18>
        log_flag = 1; // Timer triggers ADC log
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
    }
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	200001c8 	.word	0x200001c8

08000604 <main>:

int main(void) {
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 800060a:	af06      	add	r7, sp, #24
    HAL_Init();
 800060c:	f001 fd42 	bl	8002094 <HAL_Init>
    SystemClock_Config();
 8000610:	f000 f8ee 	bl	80007f0 <SystemClock_Config>
    MX_GPIO_Init();
 8000614:	f000 fab4 	bl	8000b80 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000618:	f000 fa88 	bl	8000b2c <MX_USART2_UART_Init>
    MX_SPI2_Init();
 800061c:	f000 fa02 	bl	8000a24 <MX_SPI2_Init>
    MX_ADC1_Init();
 8000620:	f000 f952 	bl	80008c8 <MX_ADC1_Init>
    MX_RTC_Init();
 8000624:	f000 f9a2 	bl	800096c <MX_RTC_Init>
    MX_TIM2_Init();
 8000628:	f000 fa32 	bl	8000a90 <MX_TIM2_Init>

    // RTC default date/time on first boot
    RTC_TimeTypeDef sTime = {0};
 800062c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000642:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000646:	2200      	movs	r2, #0
 8000648:	4619      	mov	r1, r3
 800064a:	4860      	ldr	r0, [pc, #384]	@ (80007cc <main+0x1c8>)
 800064c:	f003 fbab 	bl	8003da6 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000650:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	485c      	ldr	r0, [pc, #368]	@ (80007cc <main+0x1c8>)
 800065a:	f003 fc86 	bl	8003f6a <HAL_RTC_GetDate>
    if (sDate.Year == 0) {
 800065e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8000662:	2b00      	cmp	r3, #0
 8000664:	d122      	bne.n	80006ac <main+0xa8>
        sTime.Hours = 19; sTime.Minutes = 30; sTime.Seconds = 0;
 8000666:	2313      	movs	r3, #19
 8000668:	f887 3298 	strb.w	r3, [r7, #664]	@ 0x298
 800066c:	231e      	movs	r3, #30
 800066e:	f887 3299 	strb.w	r3, [r7, #665]	@ 0x299
 8000672:	2300      	movs	r3, #0
 8000674:	f887 329a 	strb.w	r3, [r7, #666]	@ 0x29a
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000678:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	4852      	ldr	r0, [pc, #328]	@ (80007cc <main+0x1c8>)
 8000682:	f003 faf6 	bl	8003c72 <HAL_RTC_SetTime>
        sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000686:	2303      	movs	r3, #3
 8000688:	f887 3294 	strb.w	r3, [r7, #660]	@ 0x294
        sDate.Month = 8; sDate.Date = 13; sDate.Year = 25;
 800068c:	2308      	movs	r3, #8
 800068e:	f887 3295 	strb.w	r3, [r7, #661]	@ 0x295
 8000692:	230d      	movs	r3, #13
 8000694:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
 8000698:	2319      	movs	r3, #25
 800069a:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800069e:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4849      	ldr	r0, [pc, #292]	@ (80007cc <main+0x1c8>)
 80006a8:	f003 fbdb 	bl	8003e62 <HAL_RTC_SetDate>
    }

    // Initialize SD card and mount
    SD_Init();
 80006ac:	f000 fb58 	bl	8000d60 <SD_Init>
    if(f_mount(&USERFatFS, USERPath, 1) == FR_OK) {
 80006b0:	2201      	movs	r2, #1
 80006b2:	4947      	ldr	r1, [pc, #284]	@ (80007d0 <main+0x1cc>)
 80006b4:	4847      	ldr	r0, [pc, #284]	@ (80007d4 <main+0x1d0>)
 80006b6:	f007 fcc5 	bl	8008044 <f_mount>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10b      	bne.n	80006d8 <main+0xd4>
        FIL file;
        f_open(&file, "ldr_log.txt", FA_OPEN_APPEND | FA_WRITE);
 80006c0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006c4:	2232      	movs	r2, #50	@ 0x32
 80006c6:	4944      	ldr	r1, [pc, #272]	@ (80007d8 <main+0x1d4>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 fd01 	bl	80080d0 <f_open>
        f_close(&file);
 80006ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 f9e8 	bl	8008aa8 <f_close>
    }

    // Start UART CLI
    UART_CLI_Init(&huart2);
 80006d8:	4840      	ldr	r0, [pc, #256]	@ (80007dc <main+0x1d8>)
 80006da:	f000 ffe5 	bl	80016a8 <UART_CLI_Init>

    // Start Timer interrupt for 10s logging
    HAL_TIM_Base_Start_IT(&htim2);
 80006de:	4840      	ldr	r0, [pc, #256]	@ (80007e0 <main+0x1dc>)
 80006e0:	f004 f9f2 	bl	8004ac8 <HAL_TIM_Base_Start_IT>

    // Enable UART receive interrupt (CLI)
    uint8_t rx_byte;
    HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80006e4:	f207 2393 	addw	r3, r7, #659	@ 0x293
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	483b      	ldr	r0, [pc, #236]	@ (80007dc <main+0x1d8>)
 80006ee:	f004 feaa 	bl	8005446 <HAL_UART_Receive_IT>

    while(1) {
        // Process CLI
        UART_CLI_Process();
 80006f2:	f001 f819 	bl	8001728 <UART_CLI_Process>

        // Check if Timer triggered ADC logging
        if(log_flag) {
 80006f6:	4b3b      	ldr	r3, [pc, #236]	@ (80007e4 <main+0x1e0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d05b      	beq.n	80007b8 <main+0x1b4>
            log_flag = 0;
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <main+0x1e0>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]

            // Read ADC
            HAL_ADC_Start(&hadc1);
 8000706:	4838      	ldr	r0, [pc, #224]	@ (80007e8 <main+0x1e4>)
 8000708:	f001 fd9a 	bl	8002240 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	4835      	ldr	r0, [pc, #212]	@ (80007e8 <main+0x1e4>)
 8000712:	f001 fe7c 	bl	800240e <HAL_ADC_PollForConversion>
            uint32_t ldr_value = HAL_ADC_GetValue(&hadc1);
 8000716:	4834      	ldr	r0, [pc, #208]	@ (80007e8 <main+0x1e4>)
 8000718:	f001 ff04 	bl	8002524 <HAL_ADC_GetValue>
 800071c:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
            HAL_ADC_Stop(&hadc1);
 8000720:	4831      	ldr	r0, [pc, #196]	@ (80007e8 <main+0x1e4>)
 8000722:	f001 fe41 	bl	80023a8 <HAL_ADC_Stop>

            // Get RTC date/time
            RTC_DateTypeDef logDate; RTC_TimeTypeDef logTime;
            HAL_RTC_GetTime(&hrtc, &logTime, RTC_FORMAT_BIN);
 8000726:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4827      	ldr	r0, [pc, #156]	@ (80007cc <main+0x1c8>)
 8000730:	f003 fb39 	bl	8003da6 <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &logDate, RTC_FORMAT_BIN);
 8000734:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	4823      	ldr	r0, [pc, #140]	@ (80007cc <main+0x1c8>)
 800073e:	f003 fc14 	bl	8003f6a <HAL_RTC_GetDate>

            // Prepare log string
            char buffer[64];
            sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d LDR=%lu\r\n",
                    logDate.Date, logDate.Month, 2000 + logDate.Year,
 8000742:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
            sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d LDR=%lu\r\n",
 8000746:	461e      	mov	r6, r3
                    logDate.Date, logDate.Month, 2000 + logDate.Year,
 8000748:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
            sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d LDR=%lu\r\n",
 800074c:	469c      	mov	ip, r3
                    logDate.Date, logDate.Month, 2000 + logDate.Year,
 800074e:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
            sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d LDR=%lu\r\n",
 8000752:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                    logTime.Hours, logTime.Minutes, logTime.Seconds,
 8000756:	f897 2278 	ldrb.w	r2, [r7, #632]	@ 0x278
            sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d LDR=%lu\r\n",
 800075a:	4611      	mov	r1, r2
                    logTime.Hours, logTime.Minutes, logTime.Seconds,
 800075c:	f897 2279 	ldrb.w	r2, [r7, #633]	@ 0x279
            sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d LDR=%lu\r\n",
 8000760:	4614      	mov	r4, r2
                    logTime.Hours, logTime.Minutes, logTime.Seconds,
 8000762:	f897 227a 	ldrb.w	r2, [r7, #634]	@ 0x27a
            sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d LDR=%lu\r\n",
 8000766:	4615      	mov	r5, r2
 8000768:	1d38      	adds	r0, r7, #4
 800076a:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 800076e:	9204      	str	r2, [sp, #16]
 8000770:	9503      	str	r5, [sp, #12]
 8000772:	9402      	str	r4, [sp, #8]
 8000774:	9101      	str	r1, [sp, #4]
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4663      	mov	r3, ip
 800077a:	4632      	mov	r2, r6
 800077c:	491b      	ldr	r1, [pc, #108]	@ (80007ec <main+0x1e8>)
 800077e:	f008 fda5 	bl	80092cc <siprintf>
                    ldr_value);

            // Append to file
            FIL file;
            if(f_open(&file, "ldr_log.txt", FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 8000782:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000786:	2232      	movs	r2, #50	@ 0x32
 8000788:	4913      	ldr	r1, [pc, #76]	@ (80007d8 <main+0x1d4>)
 800078a:	4618      	mov	r0, r3
 800078c:	f007 fca0 	bl	80080d0 <f_open>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d110      	bne.n	80007b8 <main+0x1b4>
                UINT bw;
                f_write(&file, buffer, strlen(buffer), &bw);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd2b 	bl	80001f4 <strlen>
 800079e:	4602      	mov	r2, r0
 80007a0:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 80007a4:	1d39      	adds	r1, r7, #4
 80007a6:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80007aa:	f007 ff8a 	bl	80086c2 <f_write>
                f_close(&file);
 80007ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007b2:	4618      	mov	r0, r3
 80007b4:	f008 f978 	bl	8008aa8 <f_close>
            }
        }

        // Enter Sleep Mode, wakes on Timer or UART interrupt
        HAL_SuspendTick();
 80007b8:	f001 fcde 	bl	8002178 <HAL_SuspendTick>
        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80007bc:	2101      	movs	r1, #1
 80007be:	2000      	movs	r0, #0
 80007c0:	f002 fc2e 	bl	8003020 <HAL_PWR_EnterSLEEPMode>
        HAL_ResumeTick();
 80007c4:	f001 fce8 	bl	8002198 <HAL_ResumeTick>
        UART_CLI_Process();
 80007c8:	e793      	b.n	80006f2 <main+0xee>
 80007ca:	bf00      	nop
 80007cc:	20000160 	.word	0x20000160
 80007d0:	20000494 	.word	0x20000494
 80007d4:	20000498 	.word	0x20000498
 80007d8:	08009cb8 	.word	0x08009cb8
 80007dc:	20000078 	.word	0x20000078
 80007e0:	20000180 	.word	0x20000180
 80007e4:	200001c8 	.word	0x200001c8
 80007e8:	20000118 	.word	0x20000118
 80007ec:	08009cc4 	.word	0x08009cc4

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	@ 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	@ 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 fdc2 	bl	8009388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <SystemClock_Config+0xd0>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081c:	4a28      	ldr	r2, [pc, #160]	@ (80008c0 <SystemClock_Config+0xd0>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	@ 0x40
 8000824:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <SystemClock_Config+0xd0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <SystemClock_Config+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a22      	ldr	r2, [pc, #136]	@ (80008c4 <SystemClock_Config+0xd4>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800084c:	2306      	movs	r3, #6
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000864:	2310      	movs	r3, #16
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000868:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086e:	2304      	movs	r3, #4
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000872:	2304      	movs	r3, #4
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fbf0 	bl	8003060 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000886:	f000 f9cd 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2102      	movs	r1, #2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fe52 	bl	8003550 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008b2:	f000 f9b7 	bl	8000c24 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	@ 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_ADC1_Init+0x98>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	@ (8000964 <MX_ADC1_Init+0x9c>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_ADC1_Init+0x98>)
 80008e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_ADC1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_ADC1_Init+0x98>)
 800090a:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <MX_ADC1_Init+0xa0>)
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_ADC1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_ADC1_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_ADC1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_ADC1_Init+0x98>)
 8000924:	2201      	movs	r2, #1
 8000926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_ADC1_Init+0x98>)
 800092a:	f001 fc45 	bl	80021b8 <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000934:	f000 f976 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000938:	2300      	movs	r3, #0
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_ADC1_Init+0x98>)
 800094a:	f001 fdf9 	bl	8002540 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000954:	f000 f966 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000118 	.word	0x20000118
 8000964:	40012000 	.word	0x40012000
 8000968:	0f000001 	.word	0x0f000001

0800096c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000980:	2300      	movs	r3, #0
 8000982:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <MX_RTC_Init+0xb0>)
 8000986:	4a26      	ldr	r2, [pc, #152]	@ (8000a20 <MX_RTC_Init+0xb4>)
 8000988:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800098a:	4b24      	ldr	r3, [pc, #144]	@ (8000a1c <MX_RTC_Init+0xb0>)
 800098c:	2240      	movs	r2, #64	@ 0x40
 800098e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_RTC_Init+0xb0>)
 8000992:	227f      	movs	r2, #127	@ 0x7f
 8000994:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <MX_RTC_Init+0xb0>)
 8000998:	22ff      	movs	r2, #255	@ 0xff
 800099a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_RTC_Init+0xb0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_RTC_Init+0xb0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_RTC_Init+0xb0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ae:	481b      	ldr	r0, [pc, #108]	@ (8000a1c <MX_RTC_Init+0xb0>)
 80009b0:	f003 f8de 	bl	8003b70 <HAL_RTC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f933 	bl	8000c24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80009be:	2301      	movs	r3, #1
 80009c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80009ca:	2300      	movs	r3, #0
 80009cc:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	4619      	mov	r1, r3
 80009dc:	480f      	ldr	r0, [pc, #60]	@ (8000a1c <MX_RTC_Init+0xb0>)
 80009de:	f003 f948 	bl	8003c72 <HAL_RTC_SetTime>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80009e8:	f000 f91c 	bl	8000c24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009ec:	2301      	movs	r3, #1
 80009ee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009f0:	2301      	movs	r3, #1
 80009f2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 80009f8:	2319      	movs	r3, #25
 80009fa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	@ (8000a1c <MX_RTC_Init+0xb0>)
 8000a04:	f003 fa2d 	bl	8003e62 <HAL_RTC_SetDate>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000a0e:	f000 f909 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000160 	.word	0x20000160
 8000a20:	40002800 	.word	0x40002800

08000a24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <MX_SPI2_Init+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_SPI2_Init+0x64>)
 8000a76:	f003 fb85 	bl	8004184 <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 f8d0 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	40003800 	.word	0x40003800

08000a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ab6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad4:	4813      	ldr	r0, [pc, #76]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000ad6:	f003 ffa7 	bl	8004a28 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ae0:	f000 f8a0 	bl	8000c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000af2:	f004 f93b 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000afc:	f000 f892 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_TIM2_Init+0x94>)
 8000b0e:	f004 fb3d 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f884 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000180 	.word	0x20000180
 8000b28:	0001869f 	.word	0x0001869f

08000b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_USART2_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f004 fb94 	bl	8005290 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 f859 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000078 	.word	0x20000078
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a11      	ldr	r2, [pc, #68]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_GPIO_Init+0x9c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <MX_GPIO_Init+0xa0>)
 8000bf2:	f002 f9fb 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8000bf6:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_GPIO_Init+0xa0>)
 8000c10:	f002 f868 	bl	8002ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <Error_Handler+0x8>

08000c30 <SPI_TxRx>:
extern UART_HandleTypeDef huart2;
extern SPI_HandleTypeDef hspi2;

static uint8_t cardType = 0; // 0 = SDSC, 1 = SDHC

static uint8_t SPI_TxRx(uint8_t data) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
    uint8_t rx;
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx, 1, HAL_MAX_DELAY);
 8000c3a:	f107 020f 	add.w	r2, r7, #15
 8000c3e:	1df9      	adds	r1, r7, #7
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <SPI_TxRx+0x28>)
 8000c4a:	f003 fc68 	bl	800451e <HAL_SPI_TransmitReceive>
    return rx;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000c0 	.word	0x200000c0

08000c5c <SD_SendDummyClocks>:

static void SD_SendDummyClocks(uint8_t count) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    CS_HIGH();
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c6c:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <SD_SendDummyClocks+0x3c>)
 8000c6e:	f002 f9bd 	bl	8002fec <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < count; i++) SPI_TxRx(0xFF);
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e005      	b.n	8000c84 <SD_SendDummyClocks+0x28>
 8000c78:	20ff      	movs	r0, #255	@ 0xff
 8000c7a:	f7ff ffd9 	bl	8000c30 <SPI_TxRx>
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	3301      	adds	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	7bfa      	ldrb	r2, [r7, #15]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d3f5      	bcc.n	8000c78 <SD_SendDummyClocks+0x1c>
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000

08000c9c <SD_SendCommandEx>:
 * @param response Buffer for response bytes (NULL if only R1 is needed)
 * @param extraBytes How many extra bytes to read after R1 (R3/R7 = 4)
 * @return R1 byte
 */
static uint8_t SD_SendCommandEx(uint8_t cmd, uint32_t arg, uint8_t crc,
                                uint8_t *response, uint8_t extraBytes) {
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	4613      	mov	r3, r2
 8000cac:	73bb      	strb	r3, [r7, #14]
    uint8_t buf[6];
    buf[0] = cmd;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	753b      	strb	r3, [r7, #20]
    buf[1] = (arg >> 24) & 0xFF;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	0e1b      	lsrs	r3, r3, #24
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	757b      	strb	r3, [r7, #21]
    buf[2] = (arg >> 16) & 0xFF;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	75bb      	strb	r3, [r7, #22]
    buf[3] = (arg >> 8) & 0xFF;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	75fb      	strb	r3, [r7, #23]
    buf[4] = arg & 0xFF;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	763b      	strb	r3, [r7, #24]
    buf[5] = crc;
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	767b      	strb	r3, [r7, #25]

    CS_LOW();
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cda:	481f      	ldr	r0, [pc, #124]	@ (8000d58 <SD_SendCommandEx+0xbc>)
 8000cdc:	f002 f986 	bl	8002fec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, buf, 6, HAL_MAX_DELAY);
 8000ce0:	f107 0114 	add.w	r1, r7, #20
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	2206      	movs	r2, #6
 8000cea:	481c      	ldr	r0, [pc, #112]	@ (8000d5c <SD_SendCommandEx+0xc0>)
 8000cec:	f003 fad3 	bl	8004296 <HAL_SPI_Transmit>

    uint8_t r1;
    for (uint16_t i = 0; i < 500; i++) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	83bb      	strh	r3, [r7, #28]
 8000cf4:	e00b      	b.n	8000d0e <SD_SendCommandEx+0x72>
        r1 = SPI_TxRx(0xFF);
 8000cf6:	20ff      	movs	r0, #255	@ 0xff
 8000cf8:	f7ff ff9a 	bl	8000c30 <SPI_TxRx>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	77fb      	strb	r3, [r7, #31]
        if (!(r1 & 0x80)) break;
 8000d00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	da07      	bge.n	8000d18 <SD_SendCommandEx+0x7c>
    for (uint16_t i = 0; i < 500; i++) {
 8000d08:	8bbb      	ldrh	r3, [r7, #28]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	83bb      	strh	r3, [r7, #28]
 8000d0e:	8bbb      	ldrh	r3, [r7, #28]
 8000d10:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d14:	d3ef      	bcc.n	8000cf6 <SD_SendCommandEx+0x5a>
 8000d16:	e000      	b.n	8000d1a <SD_SendCommandEx+0x7e>
        if (!(r1 & 0x80)) break;
 8000d18:	bf00      	nop
    }

    if (response && extraBytes > 0) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d016      	beq.n	8000d4e <SD_SendCommandEx+0xb2>
 8000d20:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d012      	beq.n	8000d4e <SD_SendCommandEx+0xb2>
        for (uint8_t i = 0; i < extraBytes; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	76fb      	strb	r3, [r7, #27]
 8000d2c:	e00a      	b.n	8000d44 <SD_SendCommandEx+0xa8>
            response[i] = SPI_TxRx(0xFF);
 8000d2e:	7efb      	ldrb	r3, [r7, #27]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	18d4      	adds	r4, r2, r3
 8000d34:	20ff      	movs	r0, #255	@ 0xff
 8000d36:	f7ff ff7b 	bl	8000c30 <SPI_TxRx>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < extraBytes; i++) {
 8000d3e:	7efb      	ldrb	r3, [r7, #27]
 8000d40:	3301      	adds	r3, #1
 8000d42:	76fb      	strb	r3, [r7, #27]
 8000d44:	7efa      	ldrb	r2, [r7, #27]
 8000d46:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d3ef      	bcc.n	8000d2e <SD_SendCommandEx+0x92>
        }
    }

    return r1;
 8000d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3724      	adds	r7, #36	@ 0x24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	200000c0 	.word	0x200000c0

08000d60 <SD_Init>:

int SD_Init(void) {
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b097      	sub	sp, #92	@ 0x5c
 8000d64:	af02      	add	r7, sp, #8
    char buf[64];
    cardType = 0;
 8000d66:	4bc1      	ldr	r3, [pc, #772]	@ (800106c <SD_Init+0x30c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]

    // Slow SPI for init
    __HAL_SPI_DISABLE(&hspi2);
 8000d6c:	4bc0      	ldr	r3, [pc, #768]	@ (8001070 <SD_Init+0x310>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4bbf      	ldr	r3, [pc, #764]	@ (8001070 <SD_Init+0x310>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d7a:	601a      	str	r2, [r3, #0]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d7c:	4bbc      	ldr	r3, [pc, #752]	@ (8001070 <SD_Init+0x310>)
 8000d7e:	2238      	movs	r2, #56	@ 0x38
 8000d80:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 8000d82:	48bb      	ldr	r0, [pc, #748]	@ (8001070 <SD_Init+0x310>)
 8000d84:	f003 f9fe 	bl	8004184 <HAL_SPI_Init>

    // Dummy clocks
    SD_SendDummyClocks(10);
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f7ff ff67 	bl	8000c5c <SD_SendDummyClocks>

    // CMD0
    uint8_t r = SD_SendCommandEx(0x40 | 0, 0, 0x95, NULL, 0);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	2295      	movs	r2, #149	@ 0x95
 8000d96:	2100      	movs	r1, #0
 8000d98:	2040      	movs	r0, #64	@ 0x40
 8000d9a:	f7ff ff7f 	bl	8000c9c <SD_SendCommandEx>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    sprintf(buf, "CMD0 resp: 0x%02X\r\n", r);
 8000da4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	49b1      	ldr	r1, [pc, #708]	@ (8001074 <SD_Init+0x314>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	f008 fa8c 	bl	80092cc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fa1b 	bl	80001f4 <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f107 010c 	add.w	r1, r7, #12
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	48ab      	ldr	r0, [pc, #684]	@ (8001078 <SD_Init+0x318>)
 8000dcc:	f004 fab0 	bl	8005330 <HAL_UART_Transmit>
    if (r != 0x01) return -1;
 8000dd0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d002      	beq.n	8000dde <SD_Init+0x7e>
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	e142      	b.n	8001064 <SD_Init+0x304>

    // CMD8 (R7)
    uint8_t cmd8_resp[4];
    r = SD_SendCommandEx(0x40 | 8, 0x1AA, 0x87, cmd8_resp, 4);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2204      	movs	r2, #4
 8000de4:	9200      	str	r2, [sp, #0]
 8000de6:	2287      	movs	r2, #135	@ 0x87
 8000de8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000dec:	2048      	movs	r0, #72	@ 0x48
 8000dee:	f7ff ff55 	bl	8000c9c <SD_SendCommandEx>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    sprintf(buf, "CMD8 resp: 0x%02X\r\n", r);
 8000df8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	499e      	ldr	r1, [pc, #632]	@ (800107c <SD_Init+0x31c>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f008 fa62 	bl	80092cc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9f1 	bl	80001f4 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f107 010c 	add.w	r1, r7, #12
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	4896      	ldr	r0, [pc, #600]	@ (8001078 <SD_Init+0x318>)
 8000e20:	f004 fa86 	bl	8005330 <HAL_UART_Transmit>
    sprintf(buf, "CMD8 R7: %02X %02X %02X %02X\r\n",
            cmd8_resp[0], cmd8_resp[1], cmd8_resp[2], cmd8_resp[3]);
 8000e24:	7a3b      	ldrb	r3, [r7, #8]
    sprintf(buf, "CMD8 R7: %02X %02X %02X %02X\r\n",
 8000e26:	4619      	mov	r1, r3
            cmd8_resp[0], cmd8_resp[1], cmd8_resp[2], cmd8_resp[3]);
 8000e28:	7a7b      	ldrb	r3, [r7, #9]
    sprintf(buf, "CMD8 R7: %02X %02X %02X %02X\r\n",
 8000e2a:	461c      	mov	r4, r3
            cmd8_resp[0], cmd8_resp[1], cmd8_resp[2], cmd8_resp[3]);
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	7afa      	ldrb	r2, [r7, #11]
    sprintf(buf, "CMD8 R7: %02X %02X %02X %02X\r\n",
 8000e30:	f107 000c 	add.w	r0, r7, #12
 8000e34:	9201      	str	r2, [sp, #4]
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	4623      	mov	r3, r4
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	4990      	ldr	r1, [pc, #576]	@ (8001080 <SD_Init+0x320>)
 8000e3e:	f008 fa45 	bl	80092cc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff f9d4 	bl	80001f4 <strlen>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f107 010c 	add.w	r1, r7, #12
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	4887      	ldr	r0, [pc, #540]	@ (8001078 <SD_Init+0x318>)
 8000e5a:	f004 fa69 	bl	8005330 <HAL_UART_Transmit>

    uint16_t retry = 0xFFFF;
 8000e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e62:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    if (r == 0x01 && cmd8_resp[2] == 0x01 && cmd8_resp[3] == 0xAA) {
 8000e66:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d17f      	bne.n	8000f6e <SD_Init+0x20e>
 8000e6e:	7abb      	ldrb	r3, [r7, #10]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d17c      	bne.n	8000f6e <SD_Init+0x20e>
 8000e74:	7afb      	ldrb	r3, [r7, #11]
 8000e76:	2baa      	cmp	r3, #170	@ 0xaa
 8000e78:	d179      	bne.n	8000f6e <SD_Init+0x20e>
        // ACMD41 loop
        do {
            CS_HIGH(); SPI_TxRx(0xFF);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e80:	4880      	ldr	r0, [pc, #512]	@ (8001084 <SD_Init+0x324>)
 8000e82:	f002 f8b3 	bl	8002fec <HAL_GPIO_WritePin>
 8000e86:	20ff      	movs	r0, #255	@ 0xff
 8000e88:	f7ff fed2 	bl	8000c30 <SPI_TxRx>
            SD_SendCommandEx(0x40 | 55, 0, 0x01, NULL, 0);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	2201      	movs	r2, #1
 8000e94:	2100      	movs	r1, #0
 8000e96:	2077      	movs	r0, #119	@ 0x77
 8000e98:	f7ff ff00 	bl	8000c9c <SD_SendCommandEx>
            CS_HIGH(); SPI_TxRx(0xFF);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ea2:	4878      	ldr	r0, [pc, #480]	@ (8001084 <SD_Init+0x324>)
 8000ea4:	f002 f8a2 	bl	8002fec <HAL_GPIO_WritePin>
 8000ea8:	20ff      	movs	r0, #255	@ 0xff
 8000eaa:	f7ff fec1 	bl	8000c30 <SPI_TxRx>

            r = SD_SendCommandEx(0x40 | 41, 0x40000000, 0x01, NULL, 0);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000eba:	2069      	movs	r0, #105	@ 0x69
 8000ebc:	f7ff feee 	bl	8000c9c <SD_SendCommandEx>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            retry--;
 8000ec6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        } while (r != 0x00 && retry);
 8000ed0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <SD_Init+0x180>
 8000ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1cc      	bne.n	8000e7a <SD_Init+0x11a>

        sprintf(buf, "ACMD41 resp: 0x%02X\r\n", r);
 8000ee0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4967      	ldr	r1, [pc, #412]	@ (8001088 <SD_Init+0x328>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f008 f9ee 	bl	80092cc <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f97d 	bl	80001f4 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f107 010c 	add.w	r1, r7, #12
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	485c      	ldr	r0, [pc, #368]	@ (8001078 <SD_Init+0x318>)
 8000f08:	f004 fa12 	bl	8005330 <HAL_UART_Transmit>

        // CMD58 (R3)
        uint8_t ocr[4];
        if (SD_SendCommandEx(0x40 | 58, 0, 0x01, ocr, 4) == 0x00) {
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2204      	movs	r2, #4
 8000f10:	9200      	str	r2, [sp, #0]
 8000f12:	2201      	movs	r2, #1
 8000f14:	2100      	movs	r1, #0
 8000f16:	207a      	movs	r0, #122	@ 0x7a
 8000f18:	f7ff fec0 	bl	8000c9c <SD_SendCommandEx>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d16c      	bne.n	8000ffc <SD_Init+0x29c>
            sprintf(buf, "CMD58 OCR: %02X %02X %02X %02X\r\n",
                    ocr[0], ocr[1], ocr[2], ocr[3]);
 8000f22:	793b      	ldrb	r3, [r7, #4]
            sprintf(buf, "CMD58 OCR: %02X %02X %02X %02X\r\n",
 8000f24:	4619      	mov	r1, r3
                    ocr[0], ocr[1], ocr[2], ocr[3]);
 8000f26:	797b      	ldrb	r3, [r7, #5]
            sprintf(buf, "CMD58 OCR: %02X %02X %02X %02X\r\n",
 8000f28:	461c      	mov	r4, r3
                    ocr[0], ocr[1], ocr[2], ocr[3]);
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	79fa      	ldrb	r2, [r7, #7]
            sprintf(buf, "CMD58 OCR: %02X %02X %02X %02X\r\n",
 8000f2e:	f107 000c 	add.w	r0, r7, #12
 8000f32:	9201      	str	r2, [sp, #4]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4623      	mov	r3, r4
 8000f38:	460a      	mov	r2, r1
 8000f3a:	4954      	ldr	r1, [pc, #336]	@ (800108c <SD_Init+0x32c>)
 8000f3c:	f008 f9c6 	bl	80092cc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f955 	bl	80001f4 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f107 010c 	add.w	r1, r7, #12
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	4848      	ldr	r0, [pc, #288]	@ (8001078 <SD_Init+0x318>)
 8000f58:	f004 f9ea 	bl	8005330 <HAL_UART_Transmit>
            cardType = (ocr[0] & 0x40) ? 1 : 0;
 8000f5c:	793b      	ldrb	r3, [r7, #4]
 8000f5e:	119b      	asrs	r3, r3, #6
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b40      	ldr	r3, [pc, #256]	@ (800106c <SD_Init+0x30c>)
 8000f6a:	701a      	strb	r2, [r3, #0]
    if (r == 0x01 && cmd8_resp[2] == 0x01 && cmd8_resp[3] == 0xAA) {
 8000f6c:	e046      	b.n	8000ffc <SD_Init+0x29c>
        }
    } else {
        // SDSC fallback
        sprintf(buf, "CMD8 fail, using SDSC init\r\n");
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4947      	ldr	r1, [pc, #284]	@ (8001090 <SD_Init+0x330>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f008 f9a9 	bl	80092cc <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f938 	bl	80001f4 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f107 010c 	add.w	r1, r7, #12
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	4839      	ldr	r0, [pc, #228]	@ (8001078 <SD_Init+0x318>)
 8000f92:	f004 f9cd 	bl	8005330 <HAL_UART_Transmit>

        do {
            CS_HIGH(); SPI_TxRx(0xFF);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f9c:	4839      	ldr	r0, [pc, #228]	@ (8001084 <SD_Init+0x324>)
 8000f9e:	f002 f825 	bl	8002fec <HAL_GPIO_WritePin>
 8000fa2:	20ff      	movs	r0, #255	@ 0xff
 8000fa4:	f7ff fe44 	bl	8000c30 <SPI_TxRx>
            SD_SendCommandEx(0x40 | 55, 0, 0x01, NULL, 0);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2300      	movs	r3, #0
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2077      	movs	r0, #119	@ 0x77
 8000fb4:	f7ff fe72 	bl	8000c9c <SD_SendCommandEx>
            CS_HIGH(); SPI_TxRx(0xFF);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fbe:	4831      	ldr	r0, [pc, #196]	@ (8001084 <SD_Init+0x324>)
 8000fc0:	f002 f814 	bl	8002fec <HAL_GPIO_WritePin>
 8000fc4:	20ff      	movs	r0, #255	@ 0xff
 8000fc6:	f7ff fe33 	bl	8000c30 <SPI_TxRx>

            r = SD_SendCommandEx(0x40 | 41, 0, 0x01, NULL, 0);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2069      	movs	r0, #105	@ 0x69
 8000fd6:	f7ff fe61 	bl	8000c9c <SD_SendCommandEx>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            retry--;
 8000fe0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        } while (r != 0x00 && retry);
 8000fea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <SD_Init+0x29e>
 8000ff2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1cd      	bne.n	8000f96 <SD_Init+0x236>
 8000ffa:	e000      	b.n	8000ffe <SD_Init+0x29e>
    if (r == 0x01 && cmd8_resp[2] == 0x01 && cmd8_resp[3] == 0xAA) {
 8000ffc:	bf00      	nop
    }

    CS_HIGH();
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001004:	481f      	ldr	r0, [pc, #124]	@ (8001084 <SD_Init+0x324>)
 8001006:	f001 fff1 	bl	8002fec <HAL_GPIO_WritePin>
    SPI_TxRx(0xFF);
 800100a:	20ff      	movs	r0, #255	@ 0xff
 800100c:	f7ff fe10 	bl	8000c30 <SPI_TxRx>

    // Speed up SPI
    __HAL_SPI_DISABLE(&hspi2);
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <SD_Init+0x310>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <SD_Init+0x310>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800101e:	601a      	str	r2, [r3, #0]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <SD_Init+0x310>)
 8001022:	2210      	movs	r2, #16
 8001024:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 8001026:	4812      	ldr	r0, [pc, #72]	@ (8001070 <SD_Init+0x310>)
 8001028:	f003 f8ac 	bl	8004184 <HAL_SPI_Init>

    sprintf(buf, "Init OK, Card Type: %s\r\n", cardType ? "SDHC" : "SDSC");
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <SD_Init+0x30c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SD_Init+0x2d8>
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <SD_Init+0x334>)
 8001036:	e000      	b.n	800103a <SD_Init+0x2da>
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <SD_Init+0x338>)
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4917      	ldr	r1, [pc, #92]	@ (800109c <SD_Init+0x33c>)
 8001040:	4618      	mov	r0, r3
 8001042:	f008 f943 	bl	80092cc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8d2 	bl	80001f4 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 010c 	add.w	r1, r7, #12
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	4806      	ldr	r0, [pc, #24]	@ (8001078 <SD_Init+0x318>)
 800105e:	f004 f967 	bl	8005330 <HAL_UART_Transmit>

    return 0;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3754      	adds	r7, #84	@ 0x54
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	200001c9 	.word	0x200001c9
 8001070:	200000c0 	.word	0x200000c0
 8001074:	08009cec 	.word	0x08009cec
 8001078:	20000078 	.word	0x20000078
 800107c:	08009d00 	.word	0x08009d00
 8001080:	08009d14 	.word	0x08009d14
 8001084:	40020000 	.word	0x40020000
 8001088:	08009d34 	.word	0x08009d34
 800108c:	08009d4c 	.word	0x08009d4c
 8001090:	08009d70 	.word	0x08009d70
 8001094:	08009d90 	.word	0x08009d90
 8001098:	08009d98 	.word	0x08009d98
 800109c:	08009da0 	.word	0x08009da0

080010a0 <SD_ReadBlocks>:

int SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
    while (count--) {
 80010ac:	e065      	b.n	800117a <SD_ReadBlocks+0xda>
        uint32_t addr = (cardType ? sector : sector * 512);
 80010ae:	4b38      	ldr	r3, [pc, #224]	@ (8001190 <SD_ReadBlocks+0xf0>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <SD_ReadBlocks+0x1c>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	025b      	lsls	r3, r3, #9
 80010ba:	e000      	b.n	80010be <SD_ReadBlocks+0x1e>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	613b      	str	r3, [r7, #16]

        if (SD_SendCommandEx(0x40 | 17, addr, 0x01, NULL, 0) != 0x00) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	2201      	movs	r2, #1
 80010c8:	6939      	ldr	r1, [r7, #16]
 80010ca:	2051      	movs	r0, #81	@ 0x51
 80010cc:	f7ff fde6 	bl	8000c9c <SD_SendCommandEx>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <SD_ReadBlocks+0x4e>
            CS_HIGH(); SPI_TxRx(0xFF);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010dc:	482d      	ldr	r0, [pc, #180]	@ (8001194 <SD_ReadBlocks+0xf4>)
 80010de:	f001 ff85 	bl	8002fec <HAL_GPIO_WritePin>
 80010e2:	20ff      	movs	r0, #255	@ 0xff
 80010e4:	f7ff fda4 	bl	8000c30 <SPI_TxRx>
            return -1;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	e04b      	b.n	8001186 <SD_ReadBlocks+0xe6>
        }

        // Wait for data token
        uint16_t timeout = 0xFFFF;
 80010ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f2:	82fb      	strh	r3, [r7, #22]
        while (SPI_TxRx(0xFF) != 0xFE && timeout--) ;
 80010f4:	bf00      	nop
 80010f6:	20ff      	movs	r0, #255	@ 0xff
 80010f8:	f7ff fd9a 	bl	8000c30 <SPI_TxRx>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001100:	d004      	beq.n	800110c <SD_ReadBlocks+0x6c>
 8001102:	8afb      	ldrh	r3, [r7, #22]
 8001104:	1e5a      	subs	r2, r3, #1
 8001106:	82fa      	strh	r2, [r7, #22]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f4      	bne.n	80010f6 <SD_ReadBlocks+0x56>
        if (timeout == 0) {
 800110c:	8afb      	ldrh	r3, [r7, #22]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10b      	bne.n	800112a <SD_ReadBlocks+0x8a>
            CS_HIGH(); SPI_TxRx(0xFF);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001118:	481e      	ldr	r0, [pc, #120]	@ (8001194 <SD_ReadBlocks+0xf4>)
 800111a:	f001 ff67 	bl	8002fec <HAL_GPIO_WritePin>
 800111e:	20ff      	movs	r0, #255	@ 0xff
 8001120:	f7ff fd86 	bl	8000c30 <SPI_TxRx>
            return -2;
 8001124:	f06f 0301 	mvn.w	r3, #1
 8001128:	e02d      	b.n	8001186 <SD_ReadBlocks+0xe6>
        }

        for (uint16_t i = 0; i < 512; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	82bb      	strh	r3, [r7, #20]
 800112e:	e00a      	b.n	8001146 <SD_ReadBlocks+0xa6>
            buff[i] = SPI_TxRx(0xFF);
 8001130:	8abb      	ldrh	r3, [r7, #20]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	18d4      	adds	r4, r2, r3
 8001136:	20ff      	movs	r0, #255	@ 0xff
 8001138:	f7ff fd7a 	bl	8000c30 <SPI_TxRx>
 800113c:	4603      	mov	r3, r0
 800113e:	7023      	strb	r3, [r4, #0]
        for (uint16_t i = 0; i < 512; i++) {
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	82bb      	strh	r3, [r7, #20]
 8001146:	8abb      	ldrh	r3, [r7, #20]
 8001148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800114c:	d3f0      	bcc.n	8001130 <SD_ReadBlocks+0x90>
        }

        SPI_TxRx(0xFF); // CRC
 800114e:	20ff      	movs	r0, #255	@ 0xff
 8001150:	f7ff fd6e 	bl	8000c30 <SPI_TxRx>
        SPI_TxRx(0xFF);
 8001154:	20ff      	movs	r0, #255	@ 0xff
 8001156:	f7ff fd6b 	bl	8000c30 <SPI_TxRx>

        CS_HIGH();
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <SD_ReadBlocks+0xf4>)
 8001162:	f001 ff43 	bl	8002fec <HAL_GPIO_WritePin>
        SPI_TxRx(0xFF);
 8001166:	20ff      	movs	r0, #255	@ 0xff
 8001168:	f7ff fd62 	bl	8000c30 <SPI_TxRx>

        buff += 512;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001172:	60fb      	str	r3, [r7, #12]
        sector++;
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	3301      	adds	r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
    while (count--) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d194      	bne.n	80010ae <SD_ReadBlocks+0xe>
    }
    return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	200001c9 	.word	0x200001c9
 8001194:	40020000 	.word	0x40020000

08001198 <SD_WriteBlocks>:

int SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af02      	add	r7, sp, #8
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	while (count--) {
 80011a4:	e06f      	b.n	8001286 <SD_WriteBlocks+0xee>
	        uint32_t addr = (cardType ? sector : sector * 512);
 80011a6:	4b3d      	ldr	r3, [pc, #244]	@ (800129c <SD_WriteBlocks+0x104>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <SD_WriteBlocks+0x1c>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	025b      	lsls	r3, r3, #9
 80011b2:	e000      	b.n	80011b6 <SD_WriteBlocks+0x1e>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	61bb      	str	r3, [r7, #24]

	        // Send CMD24 (write single block)
	        if (SD_SendCommandEx(0x40 | 24, addr, 0x01, NULL, 0) != 0x00) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	2201      	movs	r2, #1
 80011c0:	69b9      	ldr	r1, [r7, #24]
 80011c2:	2058      	movs	r0, #88	@ 0x58
 80011c4:	f7ff fd6a 	bl	8000c9c <SD_SendCommandEx>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00b      	beq.n	80011e6 <SD_WriteBlocks+0x4e>
	            CS_HIGH(); SPI_TxRx(0xFF);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011d4:	4832      	ldr	r0, [pc, #200]	@ (80012a0 <SD_WriteBlocks+0x108>)
 80011d6:	f001 ff09 	bl	8002fec <HAL_GPIO_WritePin>
 80011da:	20ff      	movs	r0, #255	@ 0xff
 80011dc:	f7ff fd28 	bl	8000c30 <SPI_TxRx>
	            return -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	e055      	b.n	8001292 <SD_WriteBlocks+0xfa>
	        }

	        SPI_TxRx(0xFF);
 80011e6:	20ff      	movs	r0, #255	@ 0xff
 80011e8:	f7ff fd22 	bl	8000c30 <SPI_TxRx>
	        CS_LOW();
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f2:	482b      	ldr	r0, [pc, #172]	@ (80012a0 <SD_WriteBlocks+0x108>)
 80011f4:	f001 fefa 	bl	8002fec <HAL_GPIO_WritePin>

	        SPI_TxRx(0xFE); // Start block token
 80011f8:	20fe      	movs	r0, #254	@ 0xfe
 80011fa:	f7ff fd19 	bl	8000c30 <SPI_TxRx>

	        // Send data block
	        for (uint16_t i = 0; i < 512; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	83fb      	strh	r3, [r7, #30]
 8001202:	e009      	b.n	8001218 <SD_WriteBlocks+0x80>
	            SPI_TxRx(buff[i]);
 8001204:	8bfb      	ldrh	r3, [r7, #30]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd0f 	bl	8000c30 <SPI_TxRx>
	        for (uint16_t i = 0; i < 512; i++) {
 8001212:	8bfb      	ldrh	r3, [r7, #30]
 8001214:	3301      	adds	r3, #1
 8001216:	83fb      	strh	r3, [r7, #30]
 8001218:	8bfb      	ldrh	r3, [r7, #30]
 800121a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800121e:	d3f1      	bcc.n	8001204 <SD_WriteBlocks+0x6c>
	        }

	        // Dummy CRC
	        SPI_TxRx(0xFF);
 8001220:	20ff      	movs	r0, #255	@ 0xff
 8001222:	f7ff fd05 	bl	8000c30 <SPI_TxRx>
	        SPI_TxRx(0xFF);
 8001226:	20ff      	movs	r0, #255	@ 0xff
 8001228:	f7ff fd02 	bl	8000c30 <SPI_TxRx>

	        // Receive data response
	        uint8_t resp = SPI_TxRx(0xFF);
 800122c:	20ff      	movs	r0, #255	@ 0xff
 800122e:	f7ff fcff 	bl	8000c30 <SPI_TxRx>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]
	        if ((resp & 0x1F) != 0x05) {
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	2b05      	cmp	r3, #5
 800123e:	d00b      	beq.n	8001258 <SD_WriteBlocks+0xc0>
	            CS_HIGH(); SPI_TxRx(0xFF);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001246:	4816      	ldr	r0, [pc, #88]	@ (80012a0 <SD_WriteBlocks+0x108>)
 8001248:	f001 fed0 	bl	8002fec <HAL_GPIO_WritePin>
 800124c:	20ff      	movs	r0, #255	@ 0xff
 800124e:	f7ff fcef 	bl	8000c30 <SPI_TxRx>
	            return -2;
 8001252:	f06f 0301 	mvn.w	r3, #1
 8001256:	e01c      	b.n	8001292 <SD_WriteBlocks+0xfa>
	        }

	        // Wait until not busy
	        while (SPI_TxRx(0xFF) == 0x00);
 8001258:	bf00      	nop
 800125a:	20ff      	movs	r0, #255	@ 0xff
 800125c:	f7ff fce8 	bl	8000c30 <SPI_TxRx>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <SD_WriteBlocks+0xc2>

	        CS_HIGH();
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <SD_WriteBlocks+0x108>)
 800126e:	f001 febd 	bl	8002fec <HAL_GPIO_WritePin>
	        SPI_TxRx(0xFF);
 8001272:	20ff      	movs	r0, #255	@ 0xff
 8001274:	f7ff fcdc 	bl	8000c30 <SPI_TxRx>

	        buff += 512;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800127e:	60fb      	str	r3, [r7, #12]
	        sector++;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3301      	adds	r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
	while (count--) {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d18a      	bne.n	80011a6 <SD_WriteBlocks+0xe>
	    }

	    return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001c9 	.word	0x200001c9
 80012a0:	40020000 	.word	0x40020000

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e2:	2007      	movs	r0, #7
 80012e4:	f001 fc2a 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <HAL_ADC_MspInit+0x7c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d127      	bne.n	8001366 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_ADC_MspInit+0x80>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <HAL_ADC_MspInit+0x80>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_ADC_MspInit+0x80>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <HAL_ADC_MspInit+0x80>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <HAL_ADC_MspInit+0x80>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <HAL_ADC_MspInit+0x80>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134e:	2301      	movs	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <HAL_ADC_MspInit+0x84>)
 8001362:	f001 fcbf 	bl	8002ce4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	@ 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012000 	.word	0x40012000
 8001374:	40023800 	.word	0x40023800
 8001378:	40020000 	.word	0x40020000

0800137c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <HAL_RTC_MspInit+0x50>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d111      	bne.n	80013c4 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013a0:	2302      	movs	r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80013a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 faee 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80013ba:	f7ff fc33 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <HAL_RTC_MspInit+0x54>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40002800 	.word	0x40002800
 80013d0:	42470e3c 	.word	0x42470e3c

080013d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <HAL_SPI_MspInit+0xc0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d14a      	bne.n	800148c <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	4a26      	ldr	r2, [pc, #152]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6413      	str	r3, [r2, #64]	@ 0x40
 8001406:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_SPI_MspInit+0xc4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145a:	2305      	movs	r3, #5
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	480d      	ldr	r0, [pc, #52]	@ (800149c <HAL_SPI_MspInit+0xc8>)
 8001466:	f001 fc3d 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800146a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147c:	2305      	movs	r3, #5
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <HAL_SPI_MspInit+0xcc>)
 8001488:	f001 fc2c 	bl	8002ce4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40003800 	.word	0x40003800
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b4:	d115      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	201c      	movs	r0, #28
 80014d8:	f001 fb3b 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014dc:	201c      	movs	r0, #28
 80014de:	f001 fb54 	bl	8002b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <HAL_UART_MspInit+0x94>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d133      	bne.n	800157a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <HAL_UART_MspInit+0x98>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <HAL_UART_MspInit+0x98>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_UART_MspInit+0x98>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_UART_MspInit+0x98>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <HAL_UART_MspInit+0x98>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_UART_MspInit+0x98>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155a:	2307      	movs	r3, #7
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <HAL_UART_MspInit+0x9c>)
 8001566:	f001 fbbd 	bl	8002ce4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2026      	movs	r0, #38	@ 0x26
 8001570:	f001 faef 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001574:	2026      	movs	r0, #38	@ 0x26
 8001576:	f001 fb08 	bl	8002b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <NMI_Handler+0x4>

08001598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <MemManage_Handler+0x4>

080015a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e6:	f000 fda7 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <TIM2_IRQHandler+0x10>)
 80015f6:	f003 fac9 	bl	8004b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000180 	.word	0x20000180

08001604 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <USART2_IRQHandler+0x10>)
 800160a:	f003 ff41 	bl	8005490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000078 	.word	0x20000078

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f007 feb4 	bl	80093b4 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20020000 	.word	0x20020000
 8001678:	00000400 	.word	0x00000400
 800167c:	200001cc 	.word	0x200001cc
 8001680:	20000840 	.word	0x20000840

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <UART_CLI_Init>:
static FATFS fs;
static volatile bool command_ready = false;

static void UART_CLI_ShowHelp(void);

void UART_CLI_Init(UART_HandleTypeDef *huart) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    cli_uart = huart;
 80016b0:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <UART_CLI_Init+0x60>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
    cli_rx_index = 0;
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <UART_CLI_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    memset(cli_rx_buffer, 0, CLI_BUFFER_SIZE);
 80016bc:	2280      	movs	r2, #128	@ 0x80
 80016be:	2100      	movs	r1, #0
 80016c0:	4813      	ldr	r0, [pc, #76]	@ (8001710 <UART_CLI_Init+0x68>)
 80016c2:	f007 fe61 	bl	8009388 <memset>

    if (f_mount(&fs, "", 1) == FR_OK) {
 80016c6:	2201      	movs	r2, #1
 80016c8:	4912      	ldr	r1, [pc, #72]	@ (8001714 <UART_CLI_Init+0x6c>)
 80016ca:	4813      	ldr	r0, [pc, #76]	@ (8001718 <UART_CLI_Init+0x70>)
 80016cc:	f006 fcba 	bl	8008044 <f_mount>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <UART_CLI_Init+0x36>
        UART_CLI_Printf("Mount OK\r\n");
 80016d6:	4811      	ldr	r0, [pc, #68]	@ (800171c <UART_CLI_Init+0x74>)
 80016d8:	f000 fc00 	bl	8001edc <UART_CLI_Printf>
 80016dc:	e002      	b.n	80016e4 <UART_CLI_Init+0x3c>
    } else {
        UART_CLI_Printf("Mount FAIL\r\n");
 80016de:	4810      	ldr	r0, [pc, #64]	@ (8001720 <UART_CLI_Init+0x78>)
 80016e0:	f000 fbfc 	bl	8001edc <UART_CLI_Printf>
    }

    UART_CLI_Printf("\r\nCLI Ready\r\nType 'help' for list of commands\r\n> ");
 80016e4:	480f      	ldr	r0, [pc, #60]	@ (8001724 <UART_CLI_Init+0x7c>)
 80016e6:	f000 fbf9 	bl	8001edc <UART_CLI_Printf>
    HAL_UART_Receive_IT(cli_uart, (uint8_t *)&cli_rx_buffer[cli_rx_index], 1);
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <UART_CLI_Init+0x60>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a07      	ldr	r2, [pc, #28]	@ (800170c <UART_CLI_Init+0x64>)
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4a06      	ldr	r2, [pc, #24]	@ (8001710 <UART_CLI_Init+0x68>)
 80016f6:	4411      	add	r1, r2
 80016f8:	2201      	movs	r2, #1
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fea3 	bl	8005446 <HAL_UART_Receive_IT>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000254 	.word	0x20000254
 800170c:	20000250 	.word	0x20000250
 8001710:	200001d0 	.word	0x200001d0
 8001714:	08009dbc 	.word	0x08009dbc
 8001718:	20000258 	.word	0x20000258
 800171c:	08009dc0 	.word	0x08009dc0
 8001720:	08009dcc 	.word	0x08009dcc
 8001724:	08009ddc 	.word	0x08009ddc

08001728 <UART_CLI_Process>:

void UART_CLI_Process(void) {
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	f5ad 7d5a 	sub.w	sp, sp, #872	@ 0x368
 8001730:	af00      	add	r7, sp, #0
    if (command_ready) {
 8001732:	4bc3      	ldr	r3, [pc, #780]	@ (8001a40 <UART_CLI_Process+0x318>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 837d 	beq.w	8001e38 <UART_CLI_Process+0x710>
        if (cli_rx_index > 0) {
 800173e:	4bc1      	ldr	r3, [pc, #772]	@ (8001a44 <UART_CLI_Process+0x31c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 835f 	beq.w	8001e06 <UART_CLI_Process+0x6de>
            cli_rx_buffer[cli_rx_index] = '\0';
 8001748:	4bbe      	ldr	r3, [pc, #760]	@ (8001a44 <UART_CLI_Process+0x31c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	4abe      	ldr	r2, [pc, #760]	@ (8001a48 <UART_CLI_Process+0x320>)
 8001750:	2300      	movs	r3, #0
 8001752:	5453      	strb	r3, [r2, r1]

            char *cmd = cli_rx_buffer;
 8001754:	4bbc      	ldr	r3, [pc, #752]	@ (8001a48 <UART_CLI_Process+0x320>)
 8001756:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
            char *args = NULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
            char *space = strchr(cmd, ' ');
 8001760:	2120      	movs	r1, #32
 8001762:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8001766:	f007 fe17 	bl	8009398 <strchr>
 800176a:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354
            if (space != NULL) {
 800176e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001772:	2b00      	cmp	r3, #0
 8001774:	d013      	beq.n	800179e <UART_CLI_Process+0x76>
                *space = '\0';
 8001776:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800177a:	2300      	movs	r3, #0
 800177c:	7013      	strb	r3, [r2, #0]
                args = space + 1;
 800177e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001782:	3301      	adds	r3, #1
 8001784:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
                while (*args == ' ') args++;
 8001788:	e004      	b.n	8001794 <UART_CLI_Process+0x6c>
 800178a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800178e:	3301      	adds	r3, #1
 8001790:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001794:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b20      	cmp	r3, #32
 800179c:	d0f5      	beq.n	800178a <UART_CLI_Process+0x62>
            }

            /*** HELP COMMAND ***/
            if (strcmp(cmd, "help") == 0) {
 800179e:	49ab      	ldr	r1, [pc, #684]	@ (8001a4c <UART_CLI_Process+0x324>)
 80017a0:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80017a4:	f7fe fd1c 	bl	80001e0 <strcmp>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <UART_CLI_Process+0x8c>
                UART_CLI_ShowHelp();
 80017ae:	f000 fb55 	bl	8001e5c <UART_CLI_ShowHelp>
 80017b2:	e328      	b.n	8001e06 <UART_CLI_Process+0x6de>
            }

            /*** WRITE COMMAND ***/
            else if (strcmp(cmd, "write") == 0) {
 80017b4:	49a6      	ldr	r1, [pc, #664]	@ (8001a50 <UART_CLI_Process+0x328>)
 80017b6:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80017ba:	f7fe fd11 	bl	80001e0 <strcmp>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d14f      	bne.n	8001864 <UART_CLI_Process+0x13c>
                char *filename = args;
 80017c4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80017c8:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
                char *content = NULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
                if (filename) {
 80017d2:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d013      	beq.n	8001802 <UART_CLI_Process+0xda>
                    space = strchr(filename, ' ');
 80017da:	2120      	movs	r1, #32
 80017dc:	f8d7 0320 	ldr.w	r0, [r7, #800]	@ 0x320
 80017e0:	f007 fdda 	bl	8009398 <strchr>
 80017e4:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354
                    if (space != NULL) {
 80017e8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <UART_CLI_Process+0xda>
                        *space = '\0';
 80017f0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
                        content = space + 1;
 80017f8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80017fc:	3301      	adds	r3, #1
 80017fe:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
                    }
                }

                if (filename && content) {
 8001802:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001806:	2b00      	cmp	r3, #0
 8001808:	d028      	beq.n	800185c <UART_CLI_Process+0x134>
 800180a:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 800180e:	2b00      	cmp	r3, #0
 8001810:	d024      	beq.n	800185c <UART_CLI_Process+0x134>
                    FIL file;
                    if (f_open(&file, filename, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {
 8001812:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001816:	220a      	movs	r2, #10
 8001818:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 800181c:	4618      	mov	r0, r3
 800181e:	f006 fc57 	bl	80080d0 <f_open>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d115      	bne.n	8001854 <UART_CLI_Process+0x12c>
                        UINT bw;
                        f_write(&file, content, strlen(content), &bw);
 8001828:	f8d7 0360 	ldr.w	r0, [r7, #864]	@ 0x360
 800182c:	f7fe fce2 	bl	80001f4 <strlen>
 8001830:	4602      	mov	r2, r0
 8001832:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 8001836:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 800183a:	f8d7 1360 	ldr.w	r1, [r7, #864]	@ 0x360
 800183e:	f006 ff40 	bl	80086c2 <f_write>
                        f_close(&file);
 8001842:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001846:	4618      	mov	r0, r3
 8001848:	f007 f92e 	bl	8008aa8 <f_close>
                        UART_CLI_Printf("OK\r\n");
 800184c:	4881      	ldr	r0, [pc, #516]	@ (8001a54 <UART_CLI_Process+0x32c>)
 800184e:	f000 fb45 	bl	8001edc <UART_CLI_Printf>
                if (filename && content) {
 8001852:	e2d8      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Write failed\r\n");
 8001854:	4880      	ldr	r0, [pc, #512]	@ (8001a58 <UART_CLI_Process+0x330>)
 8001856:	f000 fb41 	bl	8001edc <UART_CLI_Printf>
                if (filename && content) {
 800185a:	e2d4      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: write <filename> <content>\r\n");
 800185c:	487f      	ldr	r0, [pc, #508]	@ (8001a5c <UART_CLI_Process+0x334>)
 800185e:	f000 fb3d 	bl	8001edc <UART_CLI_Printf>
 8001862:	e2d0      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** APPEND COMMAND ***/
            else if (strcmp(cmd, "append") == 0) {
 8001864:	497e      	ldr	r1, [pc, #504]	@ (8001a60 <UART_CLI_Process+0x338>)
 8001866:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 800186a:	f7fe fcb9 	bl	80001e0 <strcmp>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d14f      	bne.n	8001914 <UART_CLI_Process+0x1ec>
                char *filename = args;
 8001874:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001878:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
                char *content = NULL;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
                if (filename) {
 8001882:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001886:	2b00      	cmp	r3, #0
 8001888:	d013      	beq.n	80018b2 <UART_CLI_Process+0x18a>
                    space = strchr(filename, ' ');
 800188a:	2120      	movs	r1, #32
 800188c:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8001890:	f007 fd82 	bl	8009398 <strchr>
 8001894:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354
                    if (space != NULL) {
 8001898:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <UART_CLI_Process+0x18a>
                        *space = '\0';
 80018a0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
                        content = space + 1;
 80018a8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80018ac:	3301      	adds	r3, #1
 80018ae:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
                    }
                }

                if (filename && content) {
 80018b2:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d028      	beq.n	800190c <UART_CLI_Process+0x1e4>
 80018ba:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d024      	beq.n	800190c <UART_CLI_Process+0x1e4>
                    FIL file;
                    if (f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 80018c2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80018c6:	2232      	movs	r2, #50	@ 0x32
 80018c8:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 80018cc:	4618      	mov	r0, r3
 80018ce:	f006 fbff 	bl	80080d0 <f_open>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d115      	bne.n	8001904 <UART_CLI_Process+0x1dc>
                        UINT bw;
                        f_write(&file, content, strlen(content), &bw);
 80018d8:	f8d7 035c 	ldr.w	r0, [r7, #860]	@ 0x35c
 80018dc:	f7fe fc8a 	bl	80001f4 <strlen>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80018e6:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80018ea:	f8d7 135c 	ldr.w	r1, [r7, #860]	@ 0x35c
 80018ee:	f006 fee8 	bl	80086c2 <f_write>
                        f_close(&file);
 80018f2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f007 f8d6 	bl	8008aa8 <f_close>
                        UART_CLI_Printf("Appended OK\r\n");
 80018fc:	4859      	ldr	r0, [pc, #356]	@ (8001a64 <UART_CLI_Process+0x33c>)
 80018fe:	f000 faed 	bl	8001edc <UART_CLI_Printf>
                if (filename && content) {
 8001902:	e280      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Append failed\r\n");
 8001904:	4858      	ldr	r0, [pc, #352]	@ (8001a68 <UART_CLI_Process+0x340>)
 8001906:	f000 fae9 	bl	8001edc <UART_CLI_Printf>
                if (filename && content) {
 800190a:	e27c      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: append <filename> <content>\r\n");
 800190c:	4857      	ldr	r0, [pc, #348]	@ (8001a6c <UART_CLI_Process+0x344>)
 800190e:	f000 fae5 	bl	8001edc <UART_CLI_Printf>
 8001912:	e278      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** READ COMMAND ***/
            else if (strcmp(cmd, "read") == 0) {
 8001914:	4956      	ldr	r1, [pc, #344]	@ (8001a70 <UART_CLI_Process+0x348>)
 8001916:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 800191a:	f7fe fc61 	bl	80001e0 <strcmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d131      	bne.n	8001988 <UART_CLI_Process+0x260>
                if (args) {
 8001924:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001928:	2b00      	cmp	r3, #0
 800192a:	d029      	beq.n	8001980 <UART_CLI_Process+0x258>
                    FIL file;
                    char buffer[128];
                    if (f_open(&file, args, FA_READ) == FR_OK) {
 800192c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001930:	2201      	movs	r2, #1
 8001932:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8001936:	4618      	mov	r0, r3
 8001938:	f006 fbca 	bl	80080d0 <f_open>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d11a      	bne.n	8001978 <UART_CLI_Process+0x250>
                        while (f_gets((TCHAR*)buffer, sizeof(buffer), &file)) {
 8001942:	e005      	b.n	8001950 <UART_CLI_Process+0x228>
                            UART_CLI_Printf("%s", buffer);
 8001944:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001948:	4619      	mov	r1, r3
 800194a:	484a      	ldr	r0, [pc, #296]	@ (8001a74 <UART_CLI_Process+0x34c>)
 800194c:	f000 fac6 	bl	8001edc <UART_CLI_Printf>
                        while (f_gets((TCHAR*)buffer, sizeof(buffer), &file)) {
 8001950:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001954:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	4618      	mov	r0, r3
 800195c:	f007 fc78 	bl	8009250 <f_gets>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ee      	bne.n	8001944 <UART_CLI_Process+0x21c>
                        }
                        f_close(&file);
 8001966:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800196a:	4618      	mov	r0, r3
 800196c:	f007 f89c 	bl	8008aa8 <f_close>
                        UART_CLI_Printf("\r\n");
 8001970:	4841      	ldr	r0, [pc, #260]	@ (8001a78 <UART_CLI_Process+0x350>)
 8001972:	f000 fab3 	bl	8001edc <UART_CLI_Printf>
 8001976:	e246      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Read failed\r\n");
 8001978:	4840      	ldr	r0, [pc, #256]	@ (8001a7c <UART_CLI_Process+0x354>)
 800197a:	f000 faaf 	bl	8001edc <UART_CLI_Printf>
 800197e:	e242      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: read <filename>\r\n");
 8001980:	483f      	ldr	r0, [pc, #252]	@ (8001a80 <UART_CLI_Process+0x358>)
 8001982:	f000 faab 	bl	8001edc <UART_CLI_Printf>
 8001986:	e23e      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** LS COMMAND ***/
            else if (strcmp(cmd, "ls") == 0) {
 8001988:	493e      	ldr	r1, [pc, #248]	@ (8001a84 <UART_CLI_Process+0x35c>)
 800198a:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 800198e:	f7fe fc27 	bl	80001e0 <strcmp>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d129      	bne.n	80019ec <UART_CLI_Process+0x2c4>
                DIR dir;
                FILINFO fno;
                if (f_opendir(&dir, "") == FR_OK) {
 8001998:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800199c:	493a      	ldr	r1, [pc, #232]	@ (8001a88 <UART_CLI_Process+0x360>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 f8f6 	bl	8008b90 <f_opendir>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11c      	bne.n	80019e4 <UART_CLI_Process+0x2bc>
                    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80019aa:	e006      	b.n	80019ba <UART_CLI_Process+0x292>
                        UART_CLI_Printf("%s\r\n", fno.fname);
 80019ac:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80019b0:	3309      	adds	r3, #9
 80019b2:	4619      	mov	r1, r3
 80019b4:	4835      	ldr	r0, [pc, #212]	@ (8001a8c <UART_CLI_Process+0x364>)
 80019b6:	f000 fa91 	bl	8001edc <UART_CLI_Printf>
                    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80019ba:	f507 7240 	add.w	r2, r7, #768	@ 0x300
 80019be:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f007 f97c 	bl	8008cc2 <f_readdir>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <UART_CLI_Process+0x2b0>
 80019d0:	f897 3309 	ldrb.w	r3, [r7, #777]	@ 0x309
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e9      	bne.n	80019ac <UART_CLI_Process+0x284>
                    }
                    f_closedir(&dir);
 80019d8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80019dc:	4618      	mov	r0, r3
 80019de:	f007 f94a 	bl	8008c76 <f_closedir>
 80019e2:	e210      	b.n	8001e06 <UART_CLI_Process+0x6de>
                } else {
                    UART_CLI_Printf("Failed to open directory\r\n");
 80019e4:	482a      	ldr	r0, [pc, #168]	@ (8001a90 <UART_CLI_Process+0x368>)
 80019e6:	f000 fa79 	bl	8001edc <UART_CLI_Printf>
 80019ea:	e20c      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** MAKEFILE COMMAND ***/
            else if (strcmp(cmd, "makefile") == 0) {
 80019ec:	4929      	ldr	r1, [pc, #164]	@ (8001a94 <UART_CLI_Process+0x36c>)
 80019ee:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80019f2:	f7fe fbf5 	bl	80001e0 <strcmp>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d153      	bne.n	8001aa4 <UART_CLI_Process+0x37c>
                if (args) {
 80019fc:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d019      	beq.n	8001a38 <UART_CLI_Process+0x310>
                    FIL file;
                    if (f_open(&file, args, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8001a04:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001a08:	220a      	movs	r2, #10
 8001a0a:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f006 fb5e 	bl	80080d0 <f_open>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10a      	bne.n	8001a30 <UART_CLI_Process+0x308>
                        f_close(&file);
 8001a1a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f007 f842 	bl	8008aa8 <f_close>
                        UART_CLI_Printf("File created: %s\r\n", args);
 8001a24:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8001a28:	481b      	ldr	r0, [pc, #108]	@ (8001a98 <UART_CLI_Process+0x370>)
 8001a2a:	f000 fa57 	bl	8001edc <UART_CLI_Printf>
 8001a2e:	e1ea      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Failed to create file\r\n");
 8001a30:	481a      	ldr	r0, [pc, #104]	@ (8001a9c <UART_CLI_Process+0x374>)
 8001a32:	f000 fa53 	bl	8001edc <UART_CLI_Printf>
 8001a36:	e1e6      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: makefile <filename>\r\n");
 8001a38:	4819      	ldr	r0, [pc, #100]	@ (8001aa0 <UART_CLI_Process+0x378>)
 8001a3a:	f000 fa4f 	bl	8001edc <UART_CLI_Printf>
 8001a3e:	e1e2      	b.n	8001e06 <UART_CLI_Process+0x6de>
 8001a40:	2000048c 	.word	0x2000048c
 8001a44:	20000250 	.word	0x20000250
 8001a48:	200001d0 	.word	0x200001d0
 8001a4c:	08009e10 	.word	0x08009e10
 8001a50:	08009e18 	.word	0x08009e18
 8001a54:	08009e20 	.word	0x08009e20
 8001a58:	08009e28 	.word	0x08009e28
 8001a5c:	08009e38 	.word	0x08009e38
 8001a60:	08009e5c 	.word	0x08009e5c
 8001a64:	08009e64 	.word	0x08009e64
 8001a68:	08009e74 	.word	0x08009e74
 8001a6c:	08009e84 	.word	0x08009e84
 8001a70:	08009eac 	.word	0x08009eac
 8001a74:	08009eb4 	.word	0x08009eb4
 8001a78:	08009eb8 	.word	0x08009eb8
 8001a7c:	08009ebc 	.word	0x08009ebc
 8001a80:	08009ecc 	.word	0x08009ecc
 8001a84:	08009ee8 	.word	0x08009ee8
 8001a88:	08009dbc 	.word	0x08009dbc
 8001a8c:	08009eec 	.word	0x08009eec
 8001a90:	08009ef4 	.word	0x08009ef4
 8001a94:	08009f10 	.word	0x08009f10
 8001a98:	08009f1c 	.word	0x08009f1c
 8001a9c:	08009f30 	.word	0x08009f30
 8001aa0:	08009f48 	.word	0x08009f48
                }
            }

            /*** DELETEFILE COMMAND ***/
            else if (strcmp(cmd, "deletefile") == 0) {
 8001aa4:	49c0      	ldr	r1, [pc, #768]	@ (8001da8 <UART_CLI_Process+0x680>)
 8001aa6:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8001aaa:	f7fe fb99 	bl	80001e0 <strcmp>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <UART_CLI_Process+0x3be>
                if (args) {
 8001ab4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <UART_CLI_Process+0x3b6>
                    if (f_unlink(args) == FR_OK) {
 8001abc:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8001ac0:	f007 f9f1 	bl	8008ea6 <f_unlink>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <UART_CLI_Process+0x3ae>
                        UART_CLI_Printf("File deleted: %s\r\n", args);
 8001aca:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8001ace:	48b7      	ldr	r0, [pc, #732]	@ (8001dac <UART_CLI_Process+0x684>)
 8001ad0:	f000 fa04 	bl	8001edc <UART_CLI_Printf>
 8001ad4:	e197      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Failed to delete file\r\n");
 8001ad6:	48b6      	ldr	r0, [pc, #728]	@ (8001db0 <UART_CLI_Process+0x688>)
 8001ad8:	f000 fa00 	bl	8001edc <UART_CLI_Printf>
 8001adc:	e193      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: deletefile <filename>\r\n");
 8001ade:	48b5      	ldr	r0, [pc, #724]	@ (8001db4 <UART_CLI_Process+0x68c>)
 8001ae0:	f000 f9fc 	bl	8001edc <UART_CLI_Printf>
 8001ae4:	e18f      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** MKDIR COMMAND ***/
            else if (strcmp(cmd, "mkdir") == 0) {
 8001ae6:	49b4      	ldr	r1, [pc, #720]	@ (8001db8 <UART_CLI_Process+0x690>)
 8001ae8:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8001aec:	f7fe fb78 	bl	80001e0 <strcmp>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <UART_CLI_Process+0x400>
                if (args) {
 8001af6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <UART_CLI_Process+0x3f8>
                    if (f_mkdir(args) == FR_OK) {
 8001afe:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8001b02:	f007 fa91 	bl	8009028 <f_mkdir>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <UART_CLI_Process+0x3f0>
                        UART_CLI_Printf("Directory created: %s\r\n", args);
 8001b0c:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8001b10:	48aa      	ldr	r0, [pc, #680]	@ (8001dbc <UART_CLI_Process+0x694>)
 8001b12:	f000 f9e3 	bl	8001edc <UART_CLI_Printf>
 8001b16:	e176      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Failed to create directory\r\n");
 8001b18:	48a9      	ldr	r0, [pc, #676]	@ (8001dc0 <UART_CLI_Process+0x698>)
 8001b1a:	f000 f9df 	bl	8001edc <UART_CLI_Printf>
 8001b1e:	e172      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: mkdir <dirname>\r\n");
 8001b20:	48a8      	ldr	r0, [pc, #672]	@ (8001dc4 <UART_CLI_Process+0x69c>)
 8001b22:	f000 f9db 	bl	8001edc <UART_CLI_Printf>
 8001b26:	e16e      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** RMDIR COMMAND ***/
            else if (strcmp(cmd, "rmdir") == 0) {
 8001b28:	49a7      	ldr	r1, [pc, #668]	@ (8001dc8 <UART_CLI_Process+0x6a0>)
 8001b2a:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8001b2e:	f7fe fb57 	bl	80001e0 <strcmp>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d118      	bne.n	8001b6a <UART_CLI_Process+0x442>
                if (args) {
 8001b38:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d010      	beq.n	8001b62 <UART_CLI_Process+0x43a>
                    if (f_unlink(args) == FR_OK) {
 8001b40:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8001b44:	f007 f9af 	bl	8008ea6 <f_unlink>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <UART_CLI_Process+0x432>
                        UART_CLI_Printf("Directory removed: %s\r\n", args);
 8001b4e:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8001b52:	489e      	ldr	r0, [pc, #632]	@ (8001dcc <UART_CLI_Process+0x6a4>)
 8001b54:	f000 f9c2 	bl	8001edc <UART_CLI_Printf>
 8001b58:	e155      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Failed to remove directory\r\n");
 8001b5a:	489d      	ldr	r0, [pc, #628]	@ (8001dd0 <UART_CLI_Process+0x6a8>)
 8001b5c:	f000 f9be 	bl	8001edc <UART_CLI_Printf>
 8001b60:	e151      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: rmdir <dirname>\r\n");
 8001b62:	489c      	ldr	r0, [pc, #624]	@ (8001dd4 <UART_CLI_Process+0x6ac>)
 8001b64:	f000 f9ba 	bl	8001edc <UART_CLI_Printf>
 8001b68:	e14d      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** CD COMMAND ***/
            else if (strcmp(cmd, "cd") == 0) {
 8001b6a:	499b      	ldr	r1, [pc, #620]	@ (8001dd8 <UART_CLI_Process+0x6b0>)
 8001b6c:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8001b70:	f7fe fb36 	bl	80001e0 <strcmp>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <UART_CLI_Process+0x484>
                if (args) {
 8001b7a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <UART_CLI_Process+0x47c>
                    if (f_chdir(args) == FR_OK) {
 8001b82:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8001b86:	f006 ffb9 	bl	8008afc <f_chdir>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <UART_CLI_Process+0x474>
                        UART_CLI_Printf("Changed directory to: %s\r\n", args);
 8001b90:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8001b94:	4891      	ldr	r0, [pc, #580]	@ (8001ddc <UART_CLI_Process+0x6b4>)
 8001b96:	f000 f9a1 	bl	8001edc <UART_CLI_Printf>
 8001b9a:	e134      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    } else {
                        UART_CLI_Printf("Failed to change directory\r\n");
 8001b9c:	4890      	ldr	r0, [pc, #576]	@ (8001de0 <UART_CLI_Process+0x6b8>)
 8001b9e:	f000 f99d 	bl	8001edc <UART_CLI_Printf>
 8001ba2:	e130      	b.n	8001e06 <UART_CLI_Process+0x6de>
                    }
                } else {
                    UART_CLI_Printf("Usage: cd <path>\r\n");
 8001ba4:	488f      	ldr	r0, [pc, #572]	@ (8001de4 <UART_CLI_Process+0x6bc>)
 8001ba6:	f000 f999 	bl	8001edc <UART_CLI_Printf>
 8001baa:	e12c      	b.n	8001e06 <UART_CLI_Process+0x6de>
                }
            }

            /*** DF COMMAND ***/
            else if (strcmp(cmd, "df") == 0) {
 8001bac:	498e      	ldr	r1, [pc, #568]	@ (8001de8 <UART_CLI_Process+0x6c0>)
 8001bae:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8001bb2:	f7fe fb15 	bl	80001e0 <strcmp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 811f 	bne.w	8001dfc <UART_CLI_Process+0x6d4>
                       FATFS* fs_ptr;
                       DWORD free_clusters, free_sectors, total_sectors;
                       FRESULT res = f_getfree("", &free_clusters, &fs_ptr);
 8001bbe:	f507 723f 	add.w	r2, r7, #764	@ 0x2fc
 8001bc2:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4888      	ldr	r0, [pc, #544]	@ (8001dec <UART_CLI_Process+0x6c4>)
 8001bca:	f007 f8b7 	bl	8008d3c <f_getfree>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f887 3353 	strb.w	r3, [r7, #851]	@ 0x353

                       if (res == FR_OK) {
 8001bd4:	f897 3353 	ldrb.w	r3, [r7, #851]	@ 0x353
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f040 80dd 	bne.w	8001d98 <UART_CLI_Process+0x670>
                           total_sectors = (fs_ptr->n_fatent - 2) * fs_ptr->csize;
 8001bde:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	1e9a      	subs	r2, r3, #2
 8001be6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8001bea:	895b      	ldrh	r3, [r3, #10]
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
                           free_sectors  = free_clusters * fs_ptr->csize;
 8001bf4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8001bf8:	895b      	ldrh	r3, [r3, #10]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348

                           uint64_t total_bytes = (uint64_t)total_sectors * 512;
 8001c08:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c1c:	024b      	lsls	r3, r1, #9
 8001c1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c26:	024a      	lsls	r2, r1, #9
 8001c28:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
                           uint64_t free_bytes  = (uint64_t)free_sectors  * 512;
 8001c2c:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8001c30:	2200      	movs	r2, #0
 8001c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c34:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c40:	024b      	lsls	r3, r1, #9
 8001c42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c4a:	024a      	lsls	r2, r1, #9
 8001c4c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

                           uint32_t total_gb_int = total_bytes / (1024ULL * 1024ULL * 1024ULL);
 8001c50:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8001c54:	f04f 0000 	mov.w	r0, #0
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	0f90      	lsrs	r0, r2, #30
 8001c5e:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8001c62:	0f99      	lsrs	r1, r3, #30
 8001c64:	4603      	mov	r3, r0
 8001c66:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
                           uint32_t total_gb_frac = (total_bytes % (1024ULL * 1024ULL * 1024ULL)) * 100 / (1024ULL * 1024ULL * 1024ULL);
 8001c6a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8001c6e:	f022 4340 	bic.w	r3, r2, #3221225472	@ 0xc0000000
 8001c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c74:	2300      	movs	r3, #0
 8001c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c7c:	1891      	adds	r1, r2, r2
 8001c7e:	61b9      	str	r1, [r7, #24]
 8001c80:	415b      	adcs	r3, r3
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c8a:	eb12 0801 	adds.w	r8, r2, r1
 8001c8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c90:	eb43 0901 	adc.w	r9, r3, r1
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001ca0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001ca4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001ca8:	eb18 0102 	adds.w	r1, r8, r2
 8001cac:	6139      	str	r1, [r7, #16]
 8001cae:	eb49 0303 	adc.w	r3, r9, r3
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cb8:	4643      	mov	r3, r8
 8001cba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	189b      	adds	r3, r3, r2
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	464a      	mov	r2, r9
 8001cc8:	eb42 0303 	adc.w	r3, r2, r3
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001cda:	4641      	mov	r1, r8
 8001cdc:	0f8a      	lsrs	r2, r1, #30
 8001cde:	4649      	mov	r1, r9
 8001ce0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	0f8b      	lsrs	r3, r1, #30
 8001ce8:	4613      	mov	r3, r2
 8001cea:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

                           uint32_t free_gb_int = free_bytes / (1024ULL * 1024ULL * 1024ULL);
 8001cee:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	0f82      	lsrs	r2, r0, #30
 8001cfc:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8001d00:	0f8b      	lsrs	r3, r1, #30
 8001d02:	4613      	mov	r3, r2
 8001d04:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
                           uint32_t free_gb_frac = (free_bytes % (1024ULL * 1024ULL * 1024ULL)) * 100 / (1024ULL * 1024ULL * 1024ULL);
 8001d08:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8001d0c:	f022 4a40 	bic.w	sl, r2, #3221225472	@ 0xc0000000
 8001d10:	f04f 0b00 	mov.w	fp, #0
 8001d14:	4652      	mov	r2, sl
 8001d16:	465b      	mov	r3, fp
 8001d18:	1891      	adds	r1, r2, r2
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	415b      	adcs	r3, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d24:	eb12 040a 	adds.w	r4, r2, sl
 8001d28:	eb43 050b 	adc.w	r5, r3, fp
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	016b      	lsls	r3, r5, #5
 8001d36:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001d3a:	0162      	lsls	r2, r4, #5
 8001d3c:	18a1      	adds	r1, r4, r2
 8001d3e:	6039      	str	r1, [r7, #0]
 8001d40:	eb45 0303 	adc.w	r3, r5, r3
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	eb13 030a 	adds.w	r3, r3, sl
 8001d50:	623b      	str	r3, [r7, #32]
 8001d52:	4613      	mov	r3, r2
 8001d54:	eb43 030b 	adc.w	r3, r3, fp
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d66:	4621      	mov	r1, r4
 8001d68:	0f8a      	lsrs	r2, r1, #30
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8001d70:	4629      	mov	r1, r5
 8001d72:	0f8b      	lsrs	r3, r1, #30
 8001d74:	4613      	mov	r3, r2
 8001d76:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328

                           UART_CLI_Printf("Total size: %lu.%02lu GB\r\n", total_gb_int, total_gb_frac);
 8001d7a:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001d7e:	f8d7 1334 	ldr.w	r1, [r7, #820]	@ 0x334
 8001d82:	481b      	ldr	r0, [pc, #108]	@ (8001df0 <UART_CLI_Process+0x6c8>)
 8001d84:	f000 f8aa 	bl	8001edc <UART_CLI_Printf>
                           UART_CLI_Printf("Free size : %lu.%02lu GB\r\n", free_gb_int, free_gb_frac);
 8001d88:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001d8c:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 8001d90:	4818      	ldr	r0, [pc, #96]	@ (8001df4 <UART_CLI_Process+0x6cc>)
 8001d92:	f000 f8a3 	bl	8001edc <UART_CLI_Printf>
 8001d96:	e036      	b.n	8001e06 <UART_CLI_Process+0x6de>
                       } else {
                           UART_CLI_Printf("f_getfree() failed: %d\r\n", res);
 8001d98:	f897 3353 	ldrb.w	r3, [r7, #851]	@ 0x353
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4816      	ldr	r0, [pc, #88]	@ (8001df8 <UART_CLI_Process+0x6d0>)
 8001da0:	f000 f89c 	bl	8001edc <UART_CLI_Printf>
 8001da4:	e02f      	b.n	8001e06 <UART_CLI_Process+0x6de>
 8001da6:	bf00      	nop
 8001da8:	08009f68 	.word	0x08009f68
 8001dac:	08009f74 	.word	0x08009f74
 8001db0:	08009f88 	.word	0x08009f88
 8001db4:	08009fa0 	.word	0x08009fa0
 8001db8:	08009fc0 	.word	0x08009fc0
 8001dbc:	08009fc8 	.word	0x08009fc8
 8001dc0:	08009fe0 	.word	0x08009fe0
 8001dc4:	0800a000 	.word	0x0800a000
 8001dc8:	0800a01c 	.word	0x0800a01c
 8001dcc:	0800a024 	.word	0x0800a024
 8001dd0:	0800a03c 	.word	0x0800a03c
 8001dd4:	0800a05c 	.word	0x0800a05c
 8001dd8:	0800a078 	.word	0x0800a078
 8001ddc:	0800a07c 	.word	0x0800a07c
 8001de0:	0800a098 	.word	0x0800a098
 8001de4:	0800a0b8 	.word	0x0800a0b8
 8001de8:	0800a0cc 	.word	0x0800a0cc
 8001dec:	08009dbc 	.word	0x08009dbc
 8001df0:	0800a0d0 	.word	0x0800a0d0
 8001df4:	0800a0ec 	.word	0x0800a0ec
 8001df8:	0800a108 	.word	0x0800a108
                       }
                   }

            /*** UNKNOWN COMMAND ***/
            else {
                UART_CLI_Printf("Unknown command: '%s'\r\n", cmd);
 8001dfc:	f8d7 1358 	ldr.w	r1, [r7, #856]	@ 0x358
 8001e00:	4810      	ldr	r0, [pc, #64]	@ (8001e44 <UART_CLI_Process+0x71c>)
 8001e02:	f000 f86b 	bl	8001edc <UART_CLI_Printf>
            }
        }

        // Reset for next command
        cli_rx_index = 0;
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <UART_CLI_Process+0x720>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
        memset(cli_rx_buffer, 0, CLI_BUFFER_SIZE);
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	2100      	movs	r1, #0
 8001e10:	480e      	ldr	r0, [pc, #56]	@ (8001e4c <UART_CLI_Process+0x724>)
 8001e12:	f007 fab9 	bl	8009388 <memset>
        command_ready = false;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <UART_CLI_Process+0x728>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
        UART_CLI_Printf("> ");
 8001e1c:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <UART_CLI_Process+0x72c>)
 8001e1e:	f000 f85d 	bl	8001edc <UART_CLI_Printf>
        HAL_UART_Receive_IT(cli_uart, (uint8_t *)&cli_rx_buffer[cli_rx_index], 1);
 8001e22:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <UART_CLI_Process+0x730>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a08      	ldr	r2, [pc, #32]	@ (8001e48 <UART_CLI_Process+0x720>)
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <UART_CLI_Process+0x724>)
 8001e2e:	4411      	add	r1, r2
 8001e30:	2201      	movs	r2, #1
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fb07 	bl	8005446 <HAL_UART_Receive_IT>
    }
}
 8001e38:	bf00      	nop
 8001e3a:	f507 775a 	add.w	r7, r7, #872	@ 0x368
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e44:	0800a124 	.word	0x0800a124
 8001e48:	20000250 	.word	0x20000250
 8001e4c:	200001d0 	.word	0x200001d0
 8001e50:	2000048c 	.word	0x2000048c
 8001e54:	0800a13c 	.word	0x0800a13c
 8001e58:	20000254 	.word	0x20000254

08001e5c <UART_CLI_ShowHelp>:

static void UART_CLI_ShowHelp(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
    UART_CLI_Printf("Available commands:\r\n");
 8001e60:	4812      	ldr	r0, [pc, #72]	@ (8001eac <UART_CLI_ShowHelp+0x50>)
 8001e62:	f000 f83b 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" help                - Show this help message\r\n");
 8001e66:	4812      	ldr	r0, [pc, #72]	@ (8001eb0 <UART_CLI_ShowHelp+0x54>)
 8001e68:	f000 f838 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" write <f> <text>    - Create/overwrite file with text\r\n");
 8001e6c:	4811      	ldr	r0, [pc, #68]	@ (8001eb4 <UART_CLI_ShowHelp+0x58>)
 8001e6e:	f000 f835 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" append <f> <text>   - Append text to file\r\n");
 8001e72:	4811      	ldr	r0, [pc, #68]	@ (8001eb8 <UART_CLI_ShowHelp+0x5c>)
 8001e74:	f000 f832 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" read <f>            - Read file contents\r\n");
 8001e78:	4810      	ldr	r0, [pc, #64]	@ (8001ebc <UART_CLI_ShowHelp+0x60>)
 8001e7a:	f000 f82f 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" ls                  - List files in directory\r\n");
 8001e7e:	4810      	ldr	r0, [pc, #64]	@ (8001ec0 <UART_CLI_ShowHelp+0x64>)
 8001e80:	f000 f82c 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" makefile <f>        - Create empty file\r\n");
 8001e84:	480f      	ldr	r0, [pc, #60]	@ (8001ec4 <UART_CLI_ShowHelp+0x68>)
 8001e86:	f000 f829 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" deletefile <f>      - Delete a file\r\n");
 8001e8a:	480f      	ldr	r0, [pc, #60]	@ (8001ec8 <UART_CLI_ShowHelp+0x6c>)
 8001e8c:	f000 f826 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" mkdir <d>           - Create a directory\r\n");
 8001e90:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <UART_CLI_ShowHelp+0x70>)
 8001e92:	f000 f823 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" rmdir <d>           - Remove a directory\r\n");
 8001e96:	480e      	ldr	r0, [pc, #56]	@ (8001ed0 <UART_CLI_ShowHelp+0x74>)
 8001e98:	f000 f820 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" cd <path>           - Change directory\r\n");
 8001e9c:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <UART_CLI_ShowHelp+0x78>)
 8001e9e:	f000 f81d 	bl	8001edc <UART_CLI_Printf>
    UART_CLI_Printf(" df                  - Show disk usage\r\n");
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <UART_CLI_ShowHelp+0x7c>)
 8001ea4:	f000 f81a 	bl	8001edc <UART_CLI_Printf>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	0800a140 	.word	0x0800a140
 8001eb0:	0800a158 	.word	0x0800a158
 8001eb4:	0800a188 	.word	0x0800a188
 8001eb8:	0800a1c4 	.word	0x0800a1c4
 8001ebc:	0800a1f4 	.word	0x0800a1f4
 8001ec0:	0800a220 	.word	0x0800a220
 8001ec4:	0800a254 	.word	0x0800a254
 8001ec8:	0800a280 	.word	0x0800a280
 8001ecc:	0800a2a8 	.word	0x0800a2a8
 8001ed0:	0800a2d4 	.word	0x0800a2d4
 8001ed4:	0800a300 	.word	0x0800a300
 8001ed8:	0800a32c 	.word	0x0800a32c

08001edc <UART_CLI_Printf>:

void UART_CLI_Printf(const char *format, ...) {
 8001edc:	b40f      	push	{r0, r1, r2, r3}
 8001ede:	b590      	push	{r4, r7, lr}
 8001ee0:	b0a3      	sub	sp, #140	@ 0x8c
 8001ee2:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, format);
 8001ee4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ee8:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001eea:	f107 0008 	add.w	r0, r7, #8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001ef4:	2180      	movs	r1, #128	@ 0x80
 8001ef6:	f007 fa39 	bl	800936c <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(cli_uart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <UART_CLI_Printf+0x4c>)
 8001efc:	681c      	ldr	r4, [r3, #0]
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe f976 	bl	80001f4 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f107 0108 	add.w	r1, r7, #8
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	4620      	mov	r0, r4
 8001f16:	f003 fa0b 	bl	8005330 <HAL_UART_Transmit>
}
 8001f1a:	bf00      	nop
 8001f1c:	378c      	adds	r7, #140	@ 0x8c
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f24:	b004      	add	sp, #16
 8001f26:	4770      	bx	lr
 8001f28:	20000254 	.word	0x20000254

08001f2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    if (huart->Instance == cli_uart->Instance && !command_ready) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b3a      	ldr	r3, [pc, #232]	@ (8002024 <HAL_UART_RxCpltCallback+0xf8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d16c      	bne.n	800201c <HAL_UART_RxCpltCallback+0xf0>
 8001f42:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <HAL_UART_RxCpltCallback+0xfc>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f083 0301 	eor.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d064      	beq.n	800201c <HAL_UART_RxCpltCallback+0xf0>
        char received_char = cli_rx_buffer[cli_rx_index];
 8001f52:	4b36      	ldr	r3, [pc, #216]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b35      	ldr	r3, [pc, #212]	@ (8002030 <HAL_UART_RxCpltCallback+0x104>)
 8001f5a:	5c9b      	ldrb	r3, [r3, r2]
 8001f5c:	73fb      	strb	r3, [r7, #15]

        if (received_char == '\r' || received_char == '\n') {
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b0d      	cmp	r3, #13
 8001f62:	d002      	beq.n	8001f6a <HAL_UART_RxCpltCallback+0x3e>
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b0a      	cmp	r3, #10
 8001f68:	d11f      	bne.n	8001faa <HAL_UART_RxCpltCallback+0x7e>
            HAL_UART_Transmit(huart, (uint8_t*)"\r\n", 2, 100);
 8001f6a:	2364      	movs	r3, #100	@ 0x64
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4931      	ldr	r1, [pc, #196]	@ (8002034 <HAL_UART_RxCpltCallback+0x108>)
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f003 f9dd 	bl	8005330 <HAL_UART_Transmit>
            if (cli_rx_index > 0) {
 8001f76:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_UART_RxCpltCallback+0x66>
                cli_rx_buffer[cli_rx_index] = '\0';
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <HAL_UART_RxCpltCallback+0x104>)
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]
                command_ready = true;
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <HAL_UART_RxCpltCallback+0xfc>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e044      	b.n	800201c <HAL_UART_RxCpltCallback+0xf0>
                return;
            } else {
                UART_CLI_Printf("> ");
 8001f92:	4829      	ldr	r0, [pc, #164]	@ (8002038 <HAL_UART_RxCpltCallback+0x10c>)
 8001f94:	f7ff ffa2 	bl	8001edc <UART_CLI_Printf>
            }
            cli_rx_index = 0;
 8001f98:	4b24      	ldr	r3, [pc, #144]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
            memset(cli_rx_buffer, 0, CLI_BUFFER_SIZE);
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4823      	ldr	r0, [pc, #140]	@ (8002030 <HAL_UART_RxCpltCallback+0x104>)
 8001fa4:	f007 f9f0 	bl	8009388 <memset>
 8001fa8:	e02d      	b.n	8002006 <HAL_UART_RxCpltCallback+0xda>
        }
        else if (received_char == '\b' || received_char == 127) {
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d002      	beq.n	8001fb6 <HAL_UART_RxCpltCallback+0x8a>
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fb4:	d110      	bne.n	8001fd8 <HAL_UART_RxCpltCallback+0xac>
            if (cli_rx_index > 0) {
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d023      	beq.n	8002006 <HAL_UART_RxCpltCallback+0xda>
                cli_rx_index--;
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001fc8:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(huart, (uint8_t*)"\b \b", 3, 100);
 8001fca:	2364      	movs	r3, #100	@ 0x64
 8001fcc:	2203      	movs	r2, #3
 8001fce:	491b      	ldr	r1, [pc, #108]	@ (800203c <HAL_UART_RxCpltCallback+0x110>)
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f003 f9ad 	bl	8005330 <HAL_UART_Transmit>
            if (cli_rx_index > 0) {
 8001fd6:	e016      	b.n	8002006 <HAL_UART_RxCpltCallback+0xda>
            }
        }
        else if (cli_rx_index < CLI_BUFFER_SIZE - 1 && received_char >= 32 && received_char <= 126) {
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b7e      	cmp	r3, #126	@ 0x7e
 8001fde:	d812      	bhi.n	8002006 <HAL_UART_RxCpltCallback+0xda>
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b1f      	cmp	r3, #31
 8001fe4:	d90f      	bls.n	8002006 <HAL_UART_RxCpltCallback+0xda>
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b7e      	cmp	r3, #126	@ 0x7e
 8001fea:	d80c      	bhi.n	8002006 <HAL_UART_RxCpltCallback+0xda>
            cli_rx_index++;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 8001ff6:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(huart, (uint8_t*)&received_char, 1, 100); // Echo
 8001ff8:	f107 010f 	add.w	r1, r7, #15
 8001ffc:	2364      	movs	r3, #100	@ 0x64
 8001ffe:	2201      	movs	r2, #1
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f003 f995 	bl	8005330 <HAL_UART_Transmit>
        }

        HAL_UART_Receive_IT(cli_uart, (uint8_t *)&cli_rx_buffer[cli_rx_index], 1);
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <HAL_UART_RxCpltCallback+0xf8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a08      	ldr	r2, [pc, #32]	@ (800202c <HAL_UART_RxCpltCallback+0x100>)
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	4611      	mov	r1, r2
 8002010:	4a07      	ldr	r2, [pc, #28]	@ (8002030 <HAL_UART_RxCpltCallback+0x104>)
 8002012:	4411      	add	r1, r2
 8002014:	2201      	movs	r2, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fa15 	bl	8005446 <HAL_UART_Receive_IT>
    }
}
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000254 	.word	0x20000254
 8002028:	2000048c 	.word	0x2000048c
 800202c:	20000250 	.word	0x20000250
 8002030:	200001d0 	.word	0x200001d0
 8002034:	08009eb8 	.word	0x08009eb8
 8002038:	0800a13c 	.word	0x0800a13c
 800203c:	0800a358 	.word	0x0800a358

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002078 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002044:	f7ff fb1e 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	@ (8002080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	@ (800208c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f007 f9a7 	bl	80093c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7fe fac7 	bl	8000604 <main>
  bx  lr    
 8002076:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002084:	0800a47c 	.word	0x0800a47c
  ldr r2, =_sbss
 8002088:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800208c:	2000083c 	.word	0x2000083c

08002090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>
	...

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <HAL_Init+0x40>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <HAL_Init+0x40>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_Init+0x40>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 fd3d 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff f8ec 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fd55 	bl	8002ba6 <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 fd1d 	bl	8002b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002118:	4a06      	ldr	r2, [pc, #24]	@ (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000000 	.word	0x20000000
 8002130:	20000008 	.word	0x20000008
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000008 	.word	0x20000008
 800215c:	20000490 	.word	0x20000490

08002160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000490 	.word	0x20000490

08002178 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_SuspendTick+0x1c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_SuspendTick+0x1c>)
 8002182:	f023 0302 	bic.w	r3, r3, #2
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_ResumeTick+0x1c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_ResumeTick+0x1c>)
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e033      	b.n	8002236 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff f88c 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021fe:	f023 0302 	bic.w	r3, r3, #2
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 faca 	bl	80027a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	@ 0x40
 8002226:	e001      	b.n	800222c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADC_Start+0x1a>
 8002256:	2302      	movs	r3, #2
 8002258:	e097      	b.n	800238a <HAL_ADC_Start+0x14a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d018      	beq.n	80022a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002280:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <HAL_ADC_Start+0x158>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a45      	ldr	r2, [pc, #276]	@ (800239c <HAL_ADC_Start+0x15c>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0c9a      	lsrs	r2, r3, #18
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002294:	e002      	b.n	800229c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f9      	bne.n	8002296 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d15f      	bne.n	8002370 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ee:	d106      	bne.n	80022fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f023 0206 	bic.w	r2, r3, #6
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80022fc:	e002      	b.n	8002304 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800230c:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_ADC_Start+0x160>)
 800230e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002318:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d129      	bne.n	8002388 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	e020      	b.n	8002388 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	@ (80023a4 <HAL_ADC_Start+0x164>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d11b      	bne.n	8002388 <HAL_ADC_Start+0x148>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d114      	bne.n	8002388 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	e00b      	b.n	8002388 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000
 800239c:	431bde83 	.word	0x431bde83
 80023a0:	40012300 	.word	0x40012300
 80023a4:	40012000 	.word	0x40012000

080023a8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Stop+0x16>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e021      	b.n	8002402 <HAL_ADC_Stop+0x5a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242a:	d113      	bne.n	8002454 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800243a:	d10b      	bne.n	8002454 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e063      	b.n	800251c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7ff fe84 	bl	8002160 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800245a:	e021      	b.n	80024a0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d01d      	beq.n	80024a0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_ADC_PollForConversion+0x6c>
 800246a:	f7ff fe79 	bl	8002160 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d212      	bcs.n	80024a0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d00b      	beq.n	80024a0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e03d      	b.n	800251c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d1d6      	bne.n	800245c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f06f 0212 	mvn.w	r2, #18
 80024b6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d123      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11f      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d111      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1c>
 8002558:	2302      	movs	r3, #2
 800255a:	e113      	b.n	8002784 <HAL_ADC_ConfigChannel+0x244>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b09      	cmp	r3, #9
 800256a:	d925      	bls.n	80025b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68d9      	ldr	r1, [r3, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	3b1e      	subs	r3, #30
 8002582:	2207      	movs	r2, #7
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43da      	mvns	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68d9      	ldr	r1, [r3, #12]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	4603      	mov	r3, r0
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4403      	add	r3, r0
 80025aa:	3b1e      	subs	r3, #30
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	e022      	b.n	80025fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	2207      	movs	r2, #7
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6919      	ldr	r1, [r3, #16]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4403      	add	r3, r0
 80025f4:	409a      	lsls	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b06      	cmp	r3, #6
 8002604:	d824      	bhi.n	8002650 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	3b05      	subs	r3, #5
 8002618:	221f      	movs	r2, #31
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	400a      	ands	r2, r1
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	3b05      	subs	r3, #5
 8002642:	fa00 f203 	lsl.w	r2, r0, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34
 800264e:	e04c      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d824      	bhi.n	80026a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b23      	subs	r3, #35	@ 0x23
 800266a:	221f      	movs	r2, #31
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43da      	mvns	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	400a      	ands	r2, r1
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4618      	mov	r0, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	3b23      	subs	r3, #35	@ 0x23
 8002694:	fa00 f203 	lsl.w	r2, r0, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a0:	e023      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b41      	subs	r3, #65	@ 0x41
 80026b4:	221f      	movs	r2, #31
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b41      	subs	r3, #65	@ 0x41
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ea:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_ADC_ConfigChannel+0x250>)
 80026ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <HAL_ADC_ConfigChannel+0x254>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10f      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1d8>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b12      	cmp	r3, #18
 80026fe:	d10b      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_ADC_ConfigChannel+0x254>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d12b      	bne.n	800277a <HAL_ADC_ConfigChannel+0x23a>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <HAL_ADC_ConfigChannel+0x258>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x1f4>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b11      	cmp	r3, #17
 8002732:	d122      	bne.n	800277a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <HAL_ADC_ConfigChannel+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d111      	bne.n	800277a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_ADC_ConfigChannel+0x25c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_ADC_ConfigChannel+0x260>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	0c9a      	lsrs	r2, r3, #18
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800276c:	e002      	b.n	8002774 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3b01      	subs	r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f9      	bne.n	800276e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40012300 	.word	0x40012300
 8002794:	40012000 	.word	0x40012000
 8002798:	10000012 	.word	0x10000012
 800279c:	20000000 	.word	0x20000000
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ac:	4b79      	ldr	r3, [pc, #484]	@ (8002994 <ADC_Init+0x1f0>)
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800281e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <ADC_Init+0x1f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800284a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800286c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e00f      	b.n	80028a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0202 	bic.w	r2, r2, #2
 80028b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7e1b      	ldrb	r3, [r3, #24]
 80028bc:	005a      	lsls	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	3b01      	subs	r3, #1
 80028fc:	035a      	lsls	r2, r3, #13
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e007      	b.n	8002918 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002916:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	3b01      	subs	r3, #1
 8002934:	051a      	lsls	r2, r3, #20
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800294c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800295a:	025a      	lsls	r2, r3, #9
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	029a      	lsls	r2, r3, #10
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40012300 	.word	0x40012300
 8002998:	0f000001 	.word	0x0f000001

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	@ (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	@ (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	@ (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	@ 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f7ff ff8e 	bl	8002a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff29 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff3e 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff8e 	bl	8002a90 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff5d 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff31 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffa2 	bl	8002af8 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff fac8 	bl	8002160 <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d008      	beq.n	8002bf0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	@ 0x80
 8002be2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e052      	b.n	8002c96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0216 	bic.w	r2, r2, #22
 8002bfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <HAL_DMA_Abort+0x62>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0208 	bic.w	r2, r2, #8
 8002c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c40:	e013      	b.n	8002c6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c42:	f7ff fa8d 	bl	8002160 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d90c      	bls.n	8002c6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e015      	b.n	8002c96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e4      	bne.n	8002c42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	223f      	movs	r2, #63	@ 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d004      	beq.n	8002cbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e00c      	b.n	8002cd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e159      	b.n	8002fb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d00:	2201      	movs	r2, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	f040 8148 	bne.w	8002fae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d005      	beq.n	8002d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d130      	bne.n	8002d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2203      	movs	r2, #3
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 0201 	and.w	r2, r3, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d017      	beq.n	8002dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d123      	bne.n	8002e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	08da      	lsrs	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3208      	adds	r2, #8
 8002e22:	69b9      	ldr	r1, [r7, #24]
 8002e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a2 	beq.w	8002fae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b57      	ldr	r3, [pc, #348]	@ (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	4a56      	ldr	r2, [pc, #344]	@ (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7a:	4b54      	ldr	r3, [pc, #336]	@ (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e86:	4a52      	ldr	r2, [pc, #328]	@ (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a49      	ldr	r2, [pc, #292]	@ (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x202>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	@ (8002fd8 <HAL_GPIO_Init+0x2f4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x1fe>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a47      	ldr	r2, [pc, #284]	@ (8002fdc <HAL_GPIO_Init+0x2f8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a46      	ldr	r2, [pc, #280]	@ (8002fe0 <HAL_GPIO_Init+0x2fc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x1f6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	@ (8002fe4 <HAL_GPIO_Init+0x300>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x1f2>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e008      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e004      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e002      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	f002 0203 	and.w	r2, r2, #3
 8002eee:	0092      	lsls	r2, r2, #2
 8002ef0:	4093      	lsls	r3, r2
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef8:	4935      	ldr	r1, [pc, #212]	@ (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f06:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f30:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f54:	4a24      	ldr	r2, [pc, #144]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f5a:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f84:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	f67f aea2 	bls.w	8002d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40013800 	.word	0x40013800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020c00 	.word	0x40020c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40013c00 	.word	0x40013c00

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_PWR_EnterSLEEPMode+0x3c>)
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <HAL_PWR_EnterSLEEPMode+0x3c>)
 8003032:	f023 0304 	bic.w	r3, r3, #4
 8003036:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800303e:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8003040:	e005      	b.n	800304e <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d001      	beq.n	800304c <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8003048:	bf40      	sev
      __WFE();
 800304a:	bf20      	wfe
    __WFE();
 800304c:	bf20      	wfe
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e267      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d075      	beq.n	800316a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800307e:	4b88      	ldr	r3, [pc, #544]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d00c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308a:	4b85      	ldr	r3, [pc, #532]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003092:	2b08      	cmp	r3, #8
 8003094:	d112      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b82      	ldr	r3, [pc, #520]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030a2:	d10b      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	4b7e      	ldr	r3, [pc, #504]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05b      	beq.n	8003168 <HAL_RCC_OscConfig+0x108>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d157      	bne.n	8003168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e242      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x74>
 80030c6:	4b76      	ldr	r3, [pc, #472]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a75      	ldr	r2, [pc, #468]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e01d      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x98>
 80030de:	4b70      	ldr	r3, [pc, #448]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6f      	ldr	r2, [pc, #444]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b6d      	ldr	r3, [pc, #436]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6c      	ldr	r2, [pc, #432]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030f8:	4b69      	ldr	r3, [pc, #420]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a68      	ldr	r2, [pc, #416]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b66      	ldr	r3, [pc, #408]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a65      	ldr	r2, [pc, #404]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800310a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800310e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff f822 	bl	8002160 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7ff f81e 	bl	8002160 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e207      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b5b      	ldr	r3, [pc, #364]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0xc0>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7ff f80e 	bl	8002160 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7ff f80a 	bl	8002160 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	@ 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1f3      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	4b51      	ldr	r3, [pc, #324]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0xe8>
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003176:	4b4a      	ldr	r3, [pc, #296]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b47      	ldr	r3, [pc, #284]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b44      	ldr	r3, [pc, #272]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d116      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	4b41      	ldr	r3, [pc, #260]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1c7      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b3b      	ldr	r3, [pc, #236]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4937      	ldr	r1, [pc, #220]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	e03a      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d0:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_RCC_OscConfig+0x244>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe ffc3 	bl	8002160 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7fe ffbf 	bl	8002160 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1a8      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b28      	ldr	r3, [pc, #160]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4925      	ldr	r1, [pc, #148]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_RCC_OscConfig+0x244>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe ffa2 	bl	8002160 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe ff9e 	bl	8002160 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e187      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d036      	beq.n	80032b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <HAL_RCC_OscConfig+0x248>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe ff82 	bl	8002160 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe ff7e 	bl	8002160 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e167      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003272:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x200>
 800327e:	e01b      	b.n	80032b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_OscConfig+0x248>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fe ff6b 	bl	8002160 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	e00e      	b.n	80032ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328e:	f7fe ff67 	bl	8002160 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d907      	bls.n	80032ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e150      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470000 	.word	0x42470000
 80032a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	4b88      	ldr	r3, [pc, #544]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ea      	bne.n	800328e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8097 	beq.w	80033f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b81      	ldr	r3, [pc, #516]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b7d      	ldr	r3, [pc, #500]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	4a7c      	ldr	r2, [pc, #496]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e6:	4b7a      	ldr	r3, [pc, #488]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b77      	ldr	r3, [pc, #476]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d118      	bne.n	8003334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003302:	4b74      	ldr	r3, [pc, #464]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a73      	ldr	r2, [pc, #460]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330e:	f7fe ff27 	bl	8002160 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003316:	f7fe ff23 	bl	8002160 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e10c      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	4b6a      	ldr	r3, [pc, #424]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x2ea>
 800333c:	4b64      	ldr	r3, [pc, #400]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	4a63      	ldr	r2, [pc, #396]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	@ 0x70
 8003348:	e01c      	b.n	8003384 <HAL_RCC_OscConfig+0x324>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b05      	cmp	r3, #5
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x30c>
 8003352:	4b5f      	ldr	r3, [pc, #380]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a5e      	ldr	r2, [pc, #376]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
 800335e:	4b5c      	ldr	r3, [pc, #368]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003362:	4a5b      	ldr	r2, [pc, #364]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	@ 0x70
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0x324>
 800336c:	4b58      	ldr	r3, [pc, #352]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003370:	4a57      	ldr	r2, [pc, #348]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	@ 0x70
 8003378:	4b55      	ldr	r3, [pc, #340]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a54      	ldr	r2, [pc, #336]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d015      	beq.n	80033b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe fee8 	bl	8002160 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fe fee4 	bl	8002160 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0cb      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	4b49      	ldr	r3, [pc, #292]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ee      	beq.n	8003394 <HAL_RCC_OscConfig+0x334>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe fed2 	bl	8002160 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fece 	bl	8002160 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b5      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d6:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ee      	bne.n	80033c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b39      	ldr	r3, [pc, #228]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	4a38      	ldr	r2, [pc, #224]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a1 	beq.w	8003540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fe:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b08      	cmp	r3, #8
 8003408:	d05c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d141      	bne.n	8003496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <HAL_RCC_OscConfig+0x478>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe fea2 	bl	8002160 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe fe9e 	bl	8002160 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e087      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69da      	ldr	r2, [r3, #28]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	019b      	lsls	r3, r3, #6
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	3b01      	subs	r3, #1
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	491b      	ldr	r1, [pc, #108]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b1b      	ldr	r3, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x478>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe fe77 	bl	8002160 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe fe73 	bl	8002160 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e05c      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x416>
 8003494:	e054      	b.n	8003540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <HAL_RCC_OscConfig+0x478>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe fe60 	bl	8002160 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe fe5c 	bl	8002160 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e045      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x444>
 80034c2:	e03d      	b.n	8003540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e038      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x4ec>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d028      	beq.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d121      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d11a      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800350c:	4013      	ands	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003514:	4293      	cmp	r3, r2
 8003516:	d111      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d107      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0cc      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b68      	ldr	r3, [pc, #416]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d90c      	bls.n	800358c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b65      	ldr	r3, [pc, #404]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a52      	ldr	r2, [pc, #328]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d044      	beq.n	8003670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d119      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d003      	beq.n	800360e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	2b03      	cmp	r3, #3
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b3f      	ldr	r3, [pc, #252]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361e:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e067      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b37      	ldr	r3, [pc, #220]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4934      	ldr	r1, [pc, #208]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003640:	f7fe fd8e 	bl	8002160 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fe fd8a 	bl	8002160 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e04f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003670:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d20c      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b22      	ldr	r3, [pc, #136]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c2:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f821 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fcee 	bl	80020d8 <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00
 800370c:	40023800 	.word	0x40023800
 8003710:	0800a3a0 	.word	0x0800a3a0
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b094      	sub	sp, #80	@ 0x50
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003734:	4b79      	ldr	r3, [pc, #484]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d00d      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x40>
 8003740:	2b08      	cmp	r3, #8
 8003742:	f200 80e1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x34>
 800374a:	2b04      	cmp	r3, #4
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x3a>
 800374e:	e0db      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003754:	e0db      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003756:	4b73      	ldr	r3, [pc, #460]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x208>)
 8003758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375a:	e0d8      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b6f      	ldr	r3, [pc, #444]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003764:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003766:	4b6d      	ldr	r3, [pc, #436]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003772:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	2200      	movs	r2, #0
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800377c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
 8003786:	2300      	movs	r3, #0
 8003788:	637b      	str	r3, [r7, #52]	@ 0x34
 800378a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	6139      	str	r1, [r7, #16]
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4651      	mov	r1, sl
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4651      	mov	r1, sl
 80037d0:	ebb2 0801 	subs.w	r8, r2, r1
 80037d4:	4659      	mov	r1, fp
 80037d6:	eb63 0901 	sbc.w	r9, r3, r1
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	eb18 0303 	adds.w	r3, r8, r3
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	462b      	mov	r3, r5
 80037fc:	eb49 0303 	adc.w	r3, r9, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380e:	4629      	mov	r1, r5
 8003810:	024b      	lsls	r3, r1, #9
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003818:	4621      	mov	r1, r4
 800381a:	024a      	lsls	r2, r1, #9
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800382c:	f7fc fd40 	bl	80002b0 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	e058      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b38      	ldr	r3, [pc, #224]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	4611      	mov	r1, r2
 8003846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0159      	lsls	r1, r3, #5
 8003862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003866:	0150      	lsls	r0, r2, #5
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4641      	mov	r1, r8
 800386e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003872:	4649      	mov	r1, r9
 8003874:	eb63 0b01 	sbc.w	fp, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800388c:	ebb2 040a 	subs.w	r4, r2, sl
 8003890:	eb63 050b 	sbc.w	r5, r3, fp
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	00eb      	lsls	r3, r5, #3
 800389e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a2:	00e2      	lsls	r2, r4, #3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	18e3      	adds	r3, r4, r3
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	464b      	mov	r3, r9
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e0:	f7fc fce6 	bl	80002b0 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003910:	4618      	mov	r0, r3
 8003912:	3750      	adds	r7, #80	@ 0x50
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	@ (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	0800a3b0 	.word	0x0800a3b0

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	@ (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0800a3b0 	.word	0x0800a3b0

08003990 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d038      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039b8:	4b68      	ldr	r3, [pc, #416]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039be:	f7fe fbcf 	bl	8002160 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039c6:	f7fe fbcb 	bl	8002160 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0bd      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d8:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	071b      	lsls	r3, r3, #28
 80039f6:	495a      	ldr	r1, [pc, #360]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039fe:	4b57      	ldr	r3, [pc, #348]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe fbac 	bl	8002160 <HAL_GetTick>
 8003a08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a0c:	f7fe fba8 	bl	8002160 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e09a      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a1e:	4b50      	ldr	r3, [pc, #320]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8083 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	4b48      	ldr	r3, [pc, #288]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	4a47      	ldr	r2, [pc, #284]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a48:	4b45      	ldr	r3, [pc, #276]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a54:	4b43      	ldr	r3, [pc, #268]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a42      	ldr	r2, [pc, #264]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fb7e 	bl	8002160 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fe fb7a 	bl	8002160 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e06c      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a86:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d02f      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d028      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aae:	4b2e      	ldr	r3, [pc, #184]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003aba:	4a29      	ldr	r2, [pc, #164]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ac0:	4b27      	ldr	r3, [pc, #156]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d114      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe fb48 	bl	8002160 <HAL_GetTick>
 8003ad0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fe fb44 	bl	8002160 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e034      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aea:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0ee      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b02:	d10d      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003b04:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b18:	4911      	ldr	r1, [pc, #68]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
 8003b1e:	e005      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003b20:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a0e      	ldr	r2, [pc, #56]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	4909      	ldr	r1, [pc, #36]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7d1a      	ldrb	r2, [r3, #20]
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003b50:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	42470068 	.word	0x42470068
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40007000 	.word	0x40007000
 8003b68:	42470e40 	.word	0x42470e40
 8003b6c:	424711e0 	.word	0x424711e0

08003b70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e073      	b.n	8003c6a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7f5b      	ldrb	r3, [r3, #29]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fbf2 	bl	800137c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d055      	beq.n	8003c58 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	22ca      	movs	r2, #202	@ 0xca
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2253      	movs	r2, #83	@ 0x53
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fa49 	bl	8004054 <RTC_EnterInitMode>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d12c      	bne.n	8003c26 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bde:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6899      	ldr	r1, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68d2      	ldr	r2, [r2, #12]
 8003c06:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6919      	ldr	r1, [r3, #16]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	041a      	lsls	r2, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fa50 	bl	80040c2 <RTC_ExitInitMode>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d110      	bne.n	8003c4e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	22ff      	movs	r2, #255	@ 0xff
 8003c54:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c56:	e001      	b.n	8003c5c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c72:	b590      	push	{r4, r7, lr}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	7f1b      	ldrb	r3, [r3, #28]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_RTC_SetTime+0x1c>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e087      	b.n	8003d9e <HAL_RTC_SetTime+0x12c>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2202      	movs	r2, #2
 8003c98:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d126      	bne.n	8003cee <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fa27 	bl	800410c <RTC_ByteToBcd2>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fa20 	bl	800410c <RTC_ByteToBcd2>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003cd0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fa18 	bl	800410c <RTC_ByteToBcd2>
 8003cdc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cde:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	78db      	ldrb	r3, [r3, #3]
 8003ce6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e018      	b.n	8003d20 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d0e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d14:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	78db      	ldrb	r3, [r3, #3]
 8003d1a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	22ca      	movs	r2, #202	@ 0xca
 8003d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2253      	movs	r2, #83	@ 0x53
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f98f 	bl	8004054 <RTC_EnterInitMode>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d120      	bne.n	8003d82 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003d4a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d4e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f9a2 	bl	80040c2 <RTC_ExitInitMode>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	22ff      	movs	r2, #255	@ 0xff
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]

  return status;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}

08003da6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003dd8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	0d9b      	lsrs	r3, r3, #22
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d11a      	bne.n	8003e58 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f98e 	bl	8004148 <RTC_Bcd2ToByte>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f985 	bl	8004148 <RTC_Bcd2ToByte>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	789b      	ldrb	r3, [r3, #2]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f97c 	bl	8004148 <RTC_Bcd2ToByte>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e62:	b590      	push	{r4, r7, lr}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	7f1b      	ldrb	r3, [r3, #28]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_RTC_SetDate+0x1c>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e071      	b.n	8003f62 <HAL_RTC_SetDate+0x100>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2202      	movs	r2, #2
 8003e88:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10e      	bne.n	8003eae <HAL_RTC_SetDate+0x4c>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	785b      	ldrb	r3, [r3, #1]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	f023 0310 	bic.w	r3, r3, #16
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	330a      	adds	r3, #10
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d11c      	bne.n	8003eee <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 f927 	bl	800410c <RTC_ByteToBcd2>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f920 	bl	800410c <RTC_ByteToBcd2>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ed0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	789b      	ldrb	r3, [r3, #2]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f918 	bl	800410c <RTC_ByteToBcd2>
 8003edc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ede:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e00e      	b.n	8003f0c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	78db      	ldrb	r3, [r3, #3]
 8003ef2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003efa:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003f00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	22ca      	movs	r2, #202	@ 0xca
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2253      	movs	r2, #83	@ 0x53
 8003f1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f899 	bl	8004054 <RTC_EnterInitMode>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f3a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f8c0 	bl	80040c2 <RTC_ExitInitMode>
 8003f42:	4603      	mov	r3, r0
 8003f44:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f46:	7cfb      	ldrb	r3, [r7, #19]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	22ff      	movs	r2, #255	@ 0xff
 8003f58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]

  return status;
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}

08003f6a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f88:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	0b5b      	lsrs	r3, r3, #13
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11a      	bne.n	8003ffe <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	78db      	ldrb	r3, [r3, #3]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f8bb 	bl	8004148 <RTC_Bcd2ToByte>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f8b2 	bl	8004148 <RTC_Bcd2ToByte>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	789b      	ldrb	r3, [r3, #2]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f8a9 	bl	8004148 <RTC_Bcd2ToByte>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0d      	ldr	r2, [pc, #52]	@ (8004050 <HAL_RTC_WaitForSynchro+0x48>)
 800401a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800401c:	f7fe f8a0 	bl	8002160 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004022:	e009      	b.n	8004038 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004024:	f7fe f89c 	bl	8002160 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004032:	d901      	bls.n	8004038 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e007      	b.n	8004048 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00013f5f 	.word	0x00013f5f

08004054 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d122      	bne.n	80040b8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004080:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004082:	f7fe f86d 	bl	8002160 <HAL_GetTick>
 8004086:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004088:	e00c      	b.n	80040a4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800408a:	f7fe f869 	bl	8002160 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004098:	d904      	bls.n	80040a4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2204      	movs	r2, #4
 800409e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <RTC_EnterInitMode+0x64>
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d1e8      	bne.n	800408a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040dc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff8b 	bl	8004008 <HAL_RTC_WaitForSynchro>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2204      	movs	r2, #4
 80040fc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800411a:	e005      	b.n	8004128 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	3b0a      	subs	r3, #10
 8004126:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	2b09      	cmp	r3, #9
 800412c:	d8f6      	bhi.n	800411c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	b2da      	uxtb	r2, r3
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	4313      	orrs	r3, r2
 800413a:	b2db      	uxtb	r3, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	b2db      	uxtb	r3, r3
 8004174:	4413      	add	r3, r2
 8004176:	b2db      	uxtb	r3, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07b      	b.n	800428e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d108      	bne.n	80041b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a6:	d009      	beq.n	80041bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	61da      	str	r2, [r3, #28]
 80041ae:	e005      	b.n	80041bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd f8fc 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004240:	ea42 0103 	orr.w	r1, r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f003 0104 	and.w	r1, r3, #4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0210 	and.w	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800427c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b088      	sub	sp, #32
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a6:	f7fd ff5b 	bl	8002160 <HAL_GetTick>
 80042aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d001      	beq.n	80042c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
 80042be:	e12a      	b.n	8004516 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_Transmit+0x36>
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e122      	b.n	8004516 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_SPI_Transmit+0x48>
 80042da:	2302      	movs	r3, #2
 80042dc:	e11b      	b.n	8004516 <HAL_SPI_Transmit+0x280>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2203      	movs	r2, #3
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800432c:	d10f      	bne.n	800434e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800433c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800434c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d007      	beq.n	800436c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004374:	d152      	bne.n	800441c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SPI_Transmit+0xee>
 800437e:	8b7b      	ldrh	r3, [r7, #26]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d145      	bne.n	8004410 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043a8:	e032      	b.n	8004410 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d112      	bne.n	80043de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043dc:	e018      	b.n	8004410 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043de:	f7fd febf 	bl	8002160 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d803      	bhi.n	80043f6 <HAL_SPI_Transmit+0x160>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d102      	bne.n	80043fc <HAL_SPI_Transmit+0x166>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e082      	b.n	8004516 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1c7      	bne.n	80043aa <HAL_SPI_Transmit+0x114>
 800441a:	e053      	b.n	80044c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_SPI_Transmit+0x194>
 8004424:	8b7b      	ldrh	r3, [r7, #26]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d147      	bne.n	80044ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004450:	e033      	b.n	80044ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d113      	bne.n	8004488 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	7812      	ldrb	r2, [r2, #0]
 800446c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004486:	e018      	b.n	80044ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004488:	f7fd fe6a 	bl	8002160 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d803      	bhi.n	80044a0 <HAL_SPI_Transmit+0x20a>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Transmit+0x210>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e02d      	b.n	8004516 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1c6      	bne.n	8004452 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	6839      	ldr	r1, [r7, #0]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fa59 	bl	8004980 <SPI_EndRxTxTransaction>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004514:	2300      	movs	r3, #0
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08a      	sub	sp, #40	@ 0x28
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004530:	f7fd fe16 	bl	8002160 <HAL_GetTick>
 8004534:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800453c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004548:	7ffb      	ldrb	r3, [r7, #31]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d00c      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x4a>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004554:	d106      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x46>
 800455e:	7ffb      	ldrb	r3, [r7, #31]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d001      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
 8004566:	e17f      	b.n	8004868 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_SPI_TransmitReceive+0x5c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_SPI_TransmitReceive+0x5c>
 8004574:	887b      	ldrh	r3, [r7, #2]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e174      	b.n	8004868 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_SPI_TransmitReceive+0x6e>
 8004588:	2302      	movs	r3, #2
 800458a:	e16d      	b.n	8004868 <HAL_SPI_TransmitReceive+0x34a>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b04      	cmp	r3, #4
 800459e:	d003      	beq.n	80045a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2205      	movs	r2, #5
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	887a      	ldrh	r2, [r7, #2]
 80045be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	887a      	ldrh	r2, [r7, #2]
 80045ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e8:	2b40      	cmp	r3, #64	@ 0x40
 80045ea:	d007      	beq.n	80045fc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004604:	d17e      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_SPI_TransmitReceive+0xf6>
 800460e:	8afb      	ldrh	r3, [r7, #22]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d16c      	bne.n	80046ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004638:	e059      	b.n	80046ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11b      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x162>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x162>
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	2b01      	cmp	r3, #1
 8004656:	d113      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d119      	bne.n	80046c2 <HAL_SPI_TransmitReceive+0x1a4>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d014      	beq.n	80046c2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a2:	b292      	uxth	r2, r2
 80046a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	1c9a      	adds	r2, r3, #2
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046be:	2301      	movs	r3, #1
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046c2:	f7fd fd4d 	bl	8002160 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d80d      	bhi.n	80046ee <HAL_SPI_TransmitReceive+0x1d0>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d009      	beq.n	80046ee <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0bc      	b.n	8004868 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1a0      	bne.n	800463a <HAL_SPI_TransmitReceive+0x11c>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d19b      	bne.n	800463a <HAL_SPI_TransmitReceive+0x11c>
 8004702:	e082      	b.n	800480a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x1f4>
 800470c:	8afb      	ldrh	r3, [r7, #22]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d171      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004738:	e05d      	b.n	80047f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b02      	cmp	r3, #2
 8004746:	d11c      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x264>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d017      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x264>
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	2b01      	cmp	r3, #1
 8004756:	d114      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d119      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x2a6>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d014      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c0:	2301      	movs	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047c4:	f7fd fccc 	bl	8002160 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d803      	bhi.n	80047dc <HAL_SPI_TransmitReceive+0x2be>
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d102      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x2c4>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e038      	b.n	8004868 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d19c      	bne.n	800473a <HAL_SPI_TransmitReceive+0x21c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d197      	bne.n	800473a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f8b6 	bl	8004980 <SPI_EndRxTxTransaction>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e01d      	b.n	8004868 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004866:	2300      	movs	r3, #0
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	@ 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004880:	f7fd fc6e 	bl	8002160 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	4413      	add	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004890:	f7fd fc66 	bl	8002160 <HAL_GetTick>
 8004894:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004896:	4b39      	ldr	r3, [pc, #228]	@ (800497c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	015b      	lsls	r3, r3, #5
 800489c:	0d1b      	lsrs	r3, r3, #20
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048a6:	e055      	b.n	8004954 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d051      	beq.n	8004954 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048b0:	f7fd fc56 	bl	8002160 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d902      	bls.n	80048c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d13d      	bne.n	8004942 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048de:	d111      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e8:	d004      	beq.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f2:	d107      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004902:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490c:	d10f      	bne.n	800492e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800492c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e018      	b.n	8004974 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	e002      	b.n	8004954 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	3b01      	subs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	429a      	cmp	r2, r3
 8004970:	d19a      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000000 	.word	0x20000000

08004980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2201      	movs	r2, #1
 8004994:	2102      	movs	r1, #2
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff ff6a 	bl	8004870 <SPI_WaitFlagStateUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e032      	b.n	8004a18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <SPI_EndRxTxTransaction+0xa0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a24 <SPI_EndRxTxTransaction+0xa4>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	0d5b      	lsrs	r3, r3, #21
 80049be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049d0:	d112      	bne.n	80049f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	2180      	movs	r1, #128	@ 0x80
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff ff47 	bl	8004870 <SPI_WaitFlagStateUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d016      	beq.n	8004a16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e00f      	b.n	8004a18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0e:	2b80      	cmp	r3, #128	@ 0x80
 8004a10:	d0f2      	beq.n	80049f8 <SPI_EndRxTxTransaction+0x78>
 8004a12:	e000      	b.n	8004a16 <SPI_EndRxTxTransaction+0x96>
        break;
 8004a14:	bf00      	nop
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000000 	.word	0x20000000
 8004a24:	165e9f81 	.word	0x165e9f81

08004a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e041      	b.n	8004abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fd28 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f000 fa70 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e044      	b.n	8004b6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b78 <HAL_TIM_Base_Start_IT+0xb0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d018      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x6c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0a:	d013      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x6c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <HAL_TIM_Base_Start_IT+0xb4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00e      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x6c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a19      	ldr	r2, [pc, #100]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xb8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d009      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x6c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a17      	ldr	r2, [pc, #92]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x6c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a16      	ldr	r2, [pc, #88]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d111      	bne.n	8004b58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b06      	cmp	r3, #6
 8004b44:	d010      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b56:	e007      	b.n	8004b68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40014000 	.word	0x40014000

08004b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0202 	mvn.w	r2, #2
 8004bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f999 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f98b 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f99c 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d020      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0204 	mvn.w	r2, #4
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f973 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f965 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f976 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0208 	mvn.w	r2, #8
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f94d 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f93f 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f950 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d020      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0210 	mvn.w	r2, #16
 8004ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2208      	movs	r2, #8
 8004caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f927 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f919 	bl	8004efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f92a 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fb fc72 	bl	80005dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fab0 	bl	800527c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8fb 	bl	8004f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0220 	mvn.w	r2, #32
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa82 	bl	8005268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIM_ConfigClockSource+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e0b4      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x186>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc0:	d03e      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0xd4>
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc6:	f200 8087 	bhi.w	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	f000 8086 	beq.w	8004ede <HAL_TIM_ConfigClockSource+0x172>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd6:	d87f      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b70      	cmp	r3, #112	@ 0x70
 8004dda:	d01a      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0xa6>
 8004ddc:	2b70      	cmp	r3, #112	@ 0x70
 8004dde:	d87b      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b60      	cmp	r3, #96	@ 0x60
 8004de2:	d050      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x11a>
 8004de4:	2b60      	cmp	r3, #96	@ 0x60
 8004de6:	d877      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b50      	cmp	r3, #80	@ 0x50
 8004dea:	d03c      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0xfa>
 8004dec:	2b50      	cmp	r3, #80	@ 0x50
 8004dee:	d873      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d058      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x13a>
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d86f      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b30      	cmp	r3, #48	@ 0x30
 8004dfa:	d064      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dfc:	2b30      	cmp	r3, #48	@ 0x30
 8004dfe:	d86b      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d060      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d867      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d05c      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d05a      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	e062      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e22:	f000 f993 	bl	800514c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	609a      	str	r2, [r3, #8]
      break;
 8004e3e:	e04f      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	f000 f97c 	bl	800514c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e62:	609a      	str	r2, [r3, #8]
      break;
 8004e64:	e03c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	461a      	mov	r2, r3
 8004e74:	f000 f8f0 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2150      	movs	r1, #80	@ 0x50
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f949 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e84:	e02c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 f90f 	bl	80050b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2160      	movs	r1, #96	@ 0x60
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f939 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e01c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 f8d0 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2140      	movs	r1, #64	@ 0x40
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 f929 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e00c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f000 f920 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ed6:	e003      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e000      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a37      	ldr	r2, [pc, #220]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a34      	ldr	r2, [pc, #208]	@ (8005040 <TIM_Base_SetConfig+0xf4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <TIM_Base_SetConfig+0xf8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a32      	ldr	r2, [pc, #200]	@ (8005048 <TIM_Base_SetConfig+0xfc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a28      	ldr	r2, [pc, #160]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d017      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a25      	ldr	r2, [pc, #148]	@ (8005040 <TIM_Base_SetConfig+0xf4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a24      	ldr	r2, [pc, #144]	@ (8005044 <TIM_Base_SetConfig+0xf8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <TIM_Base_SetConfig+0xfc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a22      	ldr	r2, [pc, #136]	@ (800504c <TIM_Base_SetConfig+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <TIM_Base_SetConfig+0x104>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <TIM_Base_SetConfig+0x108>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a0c      	ldr	r2, [pc, #48]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d103      	bne.n	8005016 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f023 0210 	bic.w	r2, r3, #16
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	f043 0307 	orr.w	r3, r3, #7
 8005138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	431a      	orrs	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e050      	b.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d018      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f0:	d013      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a16      	ldr	r2, [pc, #88]	@ (800525c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a15      	ldr	r2, [pc, #84]	@ (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a13      	ldr	r2, [pc, #76]	@ (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d10c      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4313      	orrs	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40014000 	.word	0x40014000

08005268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e042      	b.n	8005328 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc f91a 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	@ 0x24
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fdd3 	bl	8005e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	@ 0x28
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b20      	cmp	r3, #32
 800534e:	d175      	bne.n	800543c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_Transmit+0x2c>
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e06e      	b.n	800543e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2221      	movs	r2, #33	@ 0x21
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800536e:	f7fc fef7 	bl	8002160 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005388:	d108      	bne.n	800539c <HAL_UART_Transmit+0x6c>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	e003      	b.n	80053a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053a4:	e02e      	b.n	8005404 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fb37 	bl	8005a24 <UART_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e03a      	b.n	800543e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	3302      	adds	r3, #2
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e007      	b.n	80053f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1cb      	bne.n	80053a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2200      	movs	r2, #0
 8005416:	2140      	movs	r1, #64	@ 0x40
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fb03 	bl	8005a24 <UART_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e006      	b.n	800543e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	4613      	mov	r3, r2
 8005452:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b20      	cmp	r3, #32
 800545e:	d112      	bne.n	8005486 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_UART_Receive_IT+0x26>
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e00b      	b.n	8005488 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	461a      	mov	r2, r3
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fb2a 	bl	8005ad6 <UART_Start_Receive_IT>
 8005482:	4603      	mov	r3, r0
 8005484:	e000      	b.n	8005488 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b0ba      	sub	sp, #232	@ 0xe8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_UART_IRQHandler+0x66>
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fc07 	bl	8005d02 <UART_Receive_IT>
      return;
 80054f4:	e273      	b.n	80059de <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80de 	beq.w	80056bc <HAL_UART_IRQHandler+0x22c>
 8005500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800550c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005510:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80d1 	beq.w	80056bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <HAL_UART_IRQHandler+0xae>
 8005526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <HAL_UART_IRQHandler+0xd2>
 800554a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555a:	f043 0202 	orr.w	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_UART_IRQHandler+0xf6>
 800556e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d011      	beq.n	80055b6 <HAL_UART_IRQHandler+0x126>
 8005592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800559e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ae:	f043 0208 	orr.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 820a 	beq.w	80059d4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_UART_IRQHandler+0x14e>
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb92 	bl	8005d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <HAL_UART_IRQHandler+0x17a>
 8005602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d04f      	beq.n	80056aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa9d 	bl	8005b4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561a:	2b40      	cmp	r3, #64	@ 0x40
 800561c:	d141      	bne.n	80056a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800564a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1d9      	bne.n	800561e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d013      	beq.n	800569a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005676:	4a8a      	ldr	r2, [pc, #552]	@ (80058a0 <HAL_UART_IRQHandler+0x410>)
 8005678:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567e:	4618      	mov	r0, r3
 8005680:	f7fd fb0d 	bl	8002c9e <HAL_DMA_Abort_IT>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005694:	4610      	mov	r0, r2
 8005696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005698:	e00e      	b.n	80056b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9ac 	bl	80059f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	e00a      	b.n	80056b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f9a8 	bl	80059f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	e006      	b.n	80056b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9a4 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056b6:	e18d      	b.n	80059d4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	bf00      	nop
    return;
 80056ba:	e18b      	b.n	80059d4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	f040 8167 	bne.w	8005994 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8160 	beq.w	8005994 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8159 	beq.w	8005994 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005702:	2b40      	cmp	r3, #64	@ 0x40
 8005704:	f040 80ce 	bne.w	80058a4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a9 	beq.w	8005870 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005726:	429a      	cmp	r2, r3
 8005728:	f080 80a2 	bcs.w	8005870 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005732:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573e:	f000 8088 	beq.w	8005852 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005758:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800575c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005760:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800576e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800577a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1d9      	bne.n	8005742 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3314      	adds	r3, #20
 8005794:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800579e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e1      	bne.n	800578e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e3      	bne.n	80057ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005822:	f023 0310 	bic.w	r3, r3, #16
 8005826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005834:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005836:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800583a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e3      	bne.n	8005810 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd f9b6 	bl	8002bbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005860:	b29b      	uxth	r3, r3
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	b29b      	uxth	r3, r3
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8cf 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800586e:	e0b3      	b.n	80059d8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005874:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005878:	429a      	cmp	r2, r3
 800587a:	f040 80ad 	bne.w	80059d8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005888:	f040 80a6 	bne.w	80059d8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8b7 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
      return;
 800589e:	e09b      	b.n	80059d8 <HAL_UART_IRQHandler+0x548>
 80058a0:	08005c11 	.word	0x08005c11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 808e 	beq.w	80059dc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80058c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8089 	beq.w	80059dc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80058f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e3      	bne.n	80058ca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	623b      	str	r3, [r7, #32]
   return(result);
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f023 0301 	bic.w	r3, r3, #1
 8005918:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005926:	633a      	str	r2, [r7, #48]	@ 0x30
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800592c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e3      	bne.n	8005902 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	60fb      	str	r3, [r7, #12]
   return(result);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0310 	bic.w	r3, r3, #16
 800595e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800596c:	61fa      	str	r2, [r7, #28]
 800596e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	617b      	str	r3, [r7, #20]
   return(result);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e3      	bne.n	8005948 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f83d 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005992:	e023      	b.n	80059dc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d009      	beq.n	80059b4 <HAL_UART_IRQHandler+0x524>
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f940 	bl	8005c32 <UART_Transmit_IT>
    return;
 80059b2:	e014      	b.n	80059de <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <HAL_UART_IRQHandler+0x54e>
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f980 	bl	8005cd2 <UART_EndTransmit_IT>
    return;
 80059d2:	e004      	b.n	80059de <HAL_UART_IRQHandler+0x54e>
    return;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <HAL_UART_IRQHandler+0x54e>
      return;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_UART_IRQHandler+0x54e>
      return;
 80059dc:	bf00      	nop
  }
}
 80059de:	37e8      	adds	r7, #232	@ 0xe8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a34:	e03b      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d037      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fc fb8f 	bl	8002160 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e03a      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d023      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b80      	cmp	r3, #128	@ 0x80
 8005a6a:	d020      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b40      	cmp	r3, #64	@ 0x40
 8005a70:	d01d      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d116      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f857 	bl	8005b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2208      	movs	r2, #8
 8005aa0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e00f      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d0b4      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	88fa      	ldrh	r2, [r7, #6]
 8005aee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2222      	movs	r2, #34	@ 0x22
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695a      	ldr	r2, [r3, #20]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0220 	orr.w	r2, r2, #32
 8005b3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b095      	sub	sp, #84	@ 0x54
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b72:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3314      	adds	r3, #20
 8005b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3314      	adds	r3, #20
 8005ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d119      	bne.n	8005bf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f023 0310 	bic.w	r3, r3, #16
 8005bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be2:	61ba      	str	r2, [r7, #24]
 8005be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6979      	ldr	r1, [r7, #20]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c04:	bf00      	nop
 8005c06:	3754      	adds	r7, #84	@ 0x54
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fee7 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b21      	cmp	r3, #33	@ 0x21
 8005c44:	d13e      	bne.n	8005cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4e:	d114      	bne.n	8005c7a <UART_Transmit_IT+0x48>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d110      	bne.n	8005c7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]
 8005c78:	e008      	b.n	8005c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6211      	str	r1, [r2, #32]
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff fe76 	bl	80059e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b08c      	sub	sp, #48	@ 0x30
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b22      	cmp	r3, #34	@ 0x22
 8005d1c:	f040 80aa 	bne.w	8005e74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d115      	bne.n	8005d56 <UART_Receive_IT+0x54>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d111      	bne.n	8005d56 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	1c9a      	adds	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d54:	e024      	b.n	8005da0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d64:	d007      	beq.n	8005d76 <UART_Receive_IT+0x74>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <UART_Receive_IT+0x82>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e008      	b.n	8005d96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4619      	mov	r1, r3
 8005dae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d15d      	bne.n	8005e70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0220 	bic.w	r2, r2, #32
 8005dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d135      	bne.n	8005e66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e20:	623a      	str	r2, [r7, #32]
 8005e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	69f9      	ldr	r1, [r7, #28]
 8005e26:	6a3a      	ldr	r2, [r7, #32]
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d10a      	bne.n	8005e58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fdd4 	bl	8005a0c <HAL_UARTEx_RxEventCallback>
 8005e64:	e002      	b.n	8005e6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fc f860 	bl	8001f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e002      	b.n	8005e76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3730      	adds	r7, #48	@ 0x30
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e84:	b0c0      	sub	sp, #256	@ 0x100
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	68d9      	ldr	r1, [r3, #12]
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	ea40 0301 	orr.w	r3, r0, r1
 8005ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ed8:	f021 010c 	bic.w	r1, r1, #12
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efa:	6999      	ldr	r1, [r3, #24]
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	ea40 0301 	orr.w	r3, r0, r1
 8005f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800614c <UART_SetConfig+0x2cc>)
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d005      	beq.n	8005f20 <UART_SetConfig+0xa0>
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8006150 <UART_SetConfig+0x2d0>)
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d104      	bne.n	8005f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fd fd22 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8005f24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f28:	e003      	b.n	8005f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f2a:	f7fd fd09 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f3c:	f040 810c 	bne.w	8006158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f52:	4622      	mov	r2, r4
 8005f54:	462b      	mov	r3, r5
 8005f56:	1891      	adds	r1, r2, r2
 8005f58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f62:	4621      	mov	r1, r4
 8005f64:	eb12 0801 	adds.w	r8, r2, r1
 8005f68:	4629      	mov	r1, r5
 8005f6a:	eb43 0901 	adc.w	r9, r3, r1
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f82:	4690      	mov	r8, r2
 8005f84:	4699      	mov	r9, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	eb18 0303 	adds.w	r3, r8, r3
 8005f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f90:	462b      	mov	r3, r5
 8005f92:	eb49 0303 	adc.w	r3, r9, r3
 8005f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fae:	460b      	mov	r3, r1
 8005fb0:	18db      	adds	r3, r3, r3
 8005fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	eb42 0303 	adc.w	r3, r2, r3
 8005fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fc4:	f7fa f974 	bl	80002b0 <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4b61      	ldr	r3, [pc, #388]	@ (8006154 <UART_SetConfig+0x2d4>)
 8005fce:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	011c      	lsls	r4, r3, #4
 8005fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	1891      	adds	r1, r2, r2
 8005fee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ff0:	415b      	adcs	r3, r3
 8005ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8005ffe:	4649      	mov	r1, r9
 8006000:	eb43 0b01 	adc.w	fp, r3, r1
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006018:	4692      	mov	sl, r2
 800601a:	469b      	mov	fp, r3
 800601c:	4643      	mov	r3, r8
 800601e:	eb1a 0303 	adds.w	r3, sl, r3
 8006022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006026:	464b      	mov	r3, r9
 8006028:	eb4b 0303 	adc.w	r3, fp, r3
 800602c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800603c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006044:	460b      	mov	r3, r1
 8006046:	18db      	adds	r3, r3, r3
 8006048:	643b      	str	r3, [r7, #64]	@ 0x40
 800604a:	4613      	mov	r3, r2
 800604c:	eb42 0303 	adc.w	r3, r2, r3
 8006050:	647b      	str	r3, [r7, #68]	@ 0x44
 8006052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800605a:	f7fa f929 	bl	80002b0 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4611      	mov	r1, r2
 8006064:	4b3b      	ldr	r3, [pc, #236]	@ (8006154 <UART_SetConfig+0x2d4>)
 8006066:	fba3 2301 	umull	r2, r3, r3, r1
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	2264      	movs	r2, #100	@ 0x64
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	1acb      	subs	r3, r1, r3
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800607a:	4b36      	ldr	r3, [pc, #216]	@ (8006154 <UART_SetConfig+0x2d4>)
 800607c:	fba3 2302 	umull	r2, r3, r3, r2
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006088:	441c      	add	r4, r3
 800608a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006094:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800609c:	4642      	mov	r2, r8
 800609e:	464b      	mov	r3, r9
 80060a0:	1891      	adds	r1, r2, r2
 80060a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060a4:	415b      	adcs	r3, r3
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060ac:	4641      	mov	r1, r8
 80060ae:	1851      	adds	r1, r2, r1
 80060b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80060b2:	4649      	mov	r1, r9
 80060b4:	414b      	adcs	r3, r1
 80060b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060c4:	4659      	mov	r1, fp
 80060c6:	00cb      	lsls	r3, r1, #3
 80060c8:	4651      	mov	r1, sl
 80060ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ce:	4651      	mov	r1, sl
 80060d0:	00ca      	lsls	r2, r1, #3
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	4642      	mov	r2, r8
 80060da:	189b      	adds	r3, r3, r2
 80060dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060e0:	464b      	mov	r3, r9
 80060e2:	460a      	mov	r2, r1
 80060e4:	eb42 0303 	adc.w	r3, r2, r3
 80060e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006100:	460b      	mov	r3, r1
 8006102:	18db      	adds	r3, r3, r3
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006106:	4613      	mov	r3, r2
 8006108:	eb42 0303 	adc.w	r3, r2, r3
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006116:	f7fa f8cb 	bl	80002b0 <__aeabi_uldivmod>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <UART_SetConfig+0x2d4>)
 8006120:	fba3 1302 	umull	r1, r3, r3, r2
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	2164      	movs	r1, #100	@ 0x64
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	3332      	adds	r3, #50	@ 0x32
 8006132:	4a08      	ldr	r2, [pc, #32]	@ (8006154 <UART_SetConfig+0x2d4>)
 8006134:	fba2 2303 	umull	r2, r3, r2, r3
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	f003 0207 	and.w	r2, r3, #7
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4422      	add	r2, r4
 8006146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006148:	e106      	b.n	8006358 <UART_SetConfig+0x4d8>
 800614a:	bf00      	nop
 800614c:	40011000 	.word	0x40011000
 8006150:	40011400 	.word	0x40011400
 8006154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615c:	2200      	movs	r2, #0
 800615e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006162:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800616a:	4642      	mov	r2, r8
 800616c:	464b      	mov	r3, r9
 800616e:	1891      	adds	r1, r2, r2
 8006170:	6239      	str	r1, [r7, #32]
 8006172:	415b      	adcs	r3, r3
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
 8006176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800617a:	4641      	mov	r1, r8
 800617c:	1854      	adds	r4, r2, r1
 800617e:	4649      	mov	r1, r9
 8006180:	eb43 0501 	adc.w	r5, r3, r1
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	00eb      	lsls	r3, r5, #3
 800618e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006192:	00e2      	lsls	r2, r4, #3
 8006194:	4614      	mov	r4, r2
 8006196:	461d      	mov	r5, r3
 8006198:	4643      	mov	r3, r8
 800619a:	18e3      	adds	r3, r4, r3
 800619c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061a0:	464b      	mov	r3, r9
 80061a2:	eb45 0303 	adc.w	r3, r5, r3
 80061a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061c6:	4629      	mov	r1, r5
 80061c8:	008b      	lsls	r3, r1, #2
 80061ca:	4621      	mov	r1, r4
 80061cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d0:	4621      	mov	r1, r4
 80061d2:	008a      	lsls	r2, r1, #2
 80061d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061d8:	f7fa f86a 	bl	80002b0 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4b60      	ldr	r3, [pc, #384]	@ (8006364 <UART_SetConfig+0x4e4>)
 80061e2:	fba3 2302 	umull	r2, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	011c      	lsls	r4, r3, #4
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	1891      	adds	r1, r2, r2
 8006202:	61b9      	str	r1, [r7, #24]
 8006204:	415b      	adcs	r3, r3
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800620c:	4641      	mov	r1, r8
 800620e:	1851      	adds	r1, r2, r1
 8006210:	6139      	str	r1, [r7, #16]
 8006212:	4649      	mov	r1, r9
 8006214:	414b      	adcs	r3, r1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006224:	4659      	mov	r1, fp
 8006226:	00cb      	lsls	r3, r1, #3
 8006228:	4651      	mov	r1, sl
 800622a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622e:	4651      	mov	r1, sl
 8006230:	00ca      	lsls	r2, r1, #3
 8006232:	4610      	mov	r0, r2
 8006234:	4619      	mov	r1, r3
 8006236:	4603      	mov	r3, r0
 8006238:	4642      	mov	r2, r8
 800623a:	189b      	adds	r3, r3, r2
 800623c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006240:	464b      	mov	r3, r9
 8006242:	460a      	mov	r2, r1
 8006244:	eb42 0303 	adc.w	r3, r2, r3
 8006248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006256:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006264:	4649      	mov	r1, r9
 8006266:	008b      	lsls	r3, r1, #2
 8006268:	4641      	mov	r1, r8
 800626a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800626e:	4641      	mov	r1, r8
 8006270:	008a      	lsls	r2, r1, #2
 8006272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006276:	f7fa f81b 	bl	80002b0 <__aeabi_uldivmod>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4611      	mov	r1, r2
 8006280:	4b38      	ldr	r3, [pc, #224]	@ (8006364 <UART_SetConfig+0x4e4>)
 8006282:	fba3 2301 	umull	r2, r3, r3, r1
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	2264      	movs	r2, #100	@ 0x64
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	1acb      	subs	r3, r1, r3
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	3332      	adds	r3, #50	@ 0x32
 8006294:	4a33      	ldr	r2, [pc, #204]	@ (8006364 <UART_SetConfig+0x4e4>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062a0:	441c      	add	r4, r3
 80062a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062a6:	2200      	movs	r2, #0
 80062a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80062aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80062ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	415b      	adcs	r3, r3
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062c0:	4641      	mov	r1, r8
 80062c2:	1851      	adds	r1, r2, r1
 80062c4:	6039      	str	r1, [r7, #0]
 80062c6:	4649      	mov	r1, r9
 80062c8:	414b      	adcs	r3, r1
 80062ca:	607b      	str	r3, [r7, #4]
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062d8:	4659      	mov	r1, fp
 80062da:	00cb      	lsls	r3, r1, #3
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e2:	4651      	mov	r1, sl
 80062e4:	00ca      	lsls	r2, r1, #3
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	4642      	mov	r2, r8
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062f2:	464b      	mov	r3, r9
 80062f4:	460a      	mov	r2, r1
 80062f6:	eb42 0303 	adc.w	r3, r2, r3
 80062fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	663b      	str	r3, [r7, #96]	@ 0x60
 8006306:	667a      	str	r2, [r7, #100]	@ 0x64
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006314:	4649      	mov	r1, r9
 8006316:	008b      	lsls	r3, r1, #2
 8006318:	4641      	mov	r1, r8
 800631a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800631e:	4641      	mov	r1, r8
 8006320:	008a      	lsls	r2, r1, #2
 8006322:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006326:	f7f9 ffc3 	bl	80002b0 <__aeabi_uldivmod>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <UART_SetConfig+0x4e4>)
 8006330:	fba3 1302 	umull	r1, r3, r3, r2
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	2164      	movs	r1, #100	@ 0x64
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	3332      	adds	r3, #50	@ 0x32
 8006342:	4a08      	ldr	r2, [pc, #32]	@ (8006364 <UART_SetConfig+0x4e4>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4422      	add	r2, r4
 8006356:	609a      	str	r2, [r3, #8]
}
 8006358:	bf00      	nop
 800635a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800635e:	46bd      	mov	sp, r7
 8006360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006364:	51eb851f 	.word	0x51eb851f

08006368 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800636c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800636e:	4618      	mov	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <disk_status>:
#include "stm32f4xx_hal.h"

// Physical drive number for SD card
#define SD_CARD  0

DSTATUS disk_status(BYTE pdrv) {
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	71fb      	strb	r3, [r7, #7]
    if (pdrv == SD_CARD) {
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <disk_status+0x14>
        return 0; // Always OK for now
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <disk_status+0x16>
    }
    return STA_NOINIT;
 800638c:	2301      	movs	r3, #1
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	4603      	mov	r3, r0
 80063a2:	71fb      	strb	r3, [r7, #7]
    if (pdrv == SD_CARD) {
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d108      	bne.n	80063bc <disk_initialize+0x22>
        return (SD_Init() == 0) ? 0 : STA_NOINIT;
 80063aa:	f7fa fcd9 	bl	8000d60 <SD_Init>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf14      	ite	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	2300      	moveq	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e000      	b.n	80063be <disk_initialize+0x24>
    }
    return STA_NOINIT;
 80063bc:	2301      	movs	r3, #1
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]
    if (pdrv == SD_CARD) {
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10b      	bne.n	80063f4 <disk_read+0x2e>
        return (SD_ReadBlocks(buff, sector, count) == 0) ? RES_OK : RES_ERROR;
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	68b8      	ldr	r0, [r7, #8]
 80063e2:	f7fa fe5d 	bl	80010a0 <SD_ReadBlocks>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e000      	b.n	80063f6 <disk_read+0x30>
    }
    return RES_PARERR;
 80063f4:	2304      	movs	r3, #4
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <disk_write>:

#if _USE_WRITE == 1
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
    if (pdrv == SD_CARD) {
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <disk_write+0x2e>
        return (SD_WriteBlocks(buff, sector, count) == 0) ? RES_OK : RES_ERROR;
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f7fa febd 	bl	8001198 <SD_WriteBlocks>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	e000      	b.n	800642e <disk_write+0x30>
    }
    return RES_PARERR;
 800642c:	2304      	movs	r3, #4
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <disk_ioctl>:
#endif

#if _USE_IOCTL == 1
DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	603a      	str	r2, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
 8006444:	460b      	mov	r3, r1
 8006446:	71bb      	strb	r3, [r7, #6]
    if (pdrv == SD_CARD) {
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d123      	bne.n	8006496 <disk_ioctl+0x5e>
        switch (cmd) {
 800644e:	79bb      	ldrb	r3, [r7, #6]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d81e      	bhi.n	8006492 <disk_ioctl+0x5a>
 8006454:	a201      	add	r2, pc, #4	@ (adr r2, 800645c <disk_ioctl+0x24>)
 8006456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645a:	bf00      	nop
 800645c:	0800646d 	.word	0x0800646d
 8006460:	08006471 	.word	0x08006471
 8006464:	0800647d 	.word	0x0800647d
 8006468:	08006489 	.word	0x08006489
            case CTRL_SYNC:
                return RES_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	e013      	b.n	8006498 <disk_ioctl+0x60>

            case GET_SECTOR_COUNT:
                *(DWORD*)buff = 32768; // Example: 16MB card (change for your card)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006476:	601a      	str	r2, [r3, #0]
                return RES_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e00d      	b.n	8006498 <disk_ioctl+0x60>

            case GET_SECTOR_SIZE:
                *(WORD*)buff = 512;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006482:	801a      	strh	r2, [r3, #0]
                return RES_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e007      	b.n	8006498 <disk_ioctl+0x60>

            case GET_BLOCK_SIZE:
                *(DWORD*)buff = 1;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
                return RES_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e002      	b.n	8006498 <disk_ioctl+0x60>

            default:
                return RES_PARERR;
 8006492:	2304      	movs	r3, #4
 8006494:	e000      	b.n	8006498 <disk_ioctl+0x60>
        }
    }
    return RES_PARERR;
 8006496:	2304      	movs	r3, #4
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3301      	adds	r3, #1
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80064b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	b21a      	sxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b21b      	sxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80064c8:	89fb      	ldrh	r3, [r7, #14]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3303      	adds	r3, #3
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	3202      	adds	r2, #2
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	3201      	adds	r2, #1
 80064fc:	7812      	ldrb	r2, [r2, #0]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
	return rv;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	887a      	ldrh	r2, [r7, #2]
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	887b      	ldrh	r3, [r7, #2]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	887a      	ldrh	r2, [r7, #2]
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80065aa:	b480      	push	{r7}
 80065ac:	b087      	sub	sp, #28
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	1c53      	adds	r3, r2, #1
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	6179      	str	r1, [r7, #20]
 80065d0:	7812      	ldrb	r2, [r2, #0]
 80065d2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f1      	bne.n	80065c4 <mem_cpy+0x1a>
	}
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	617a      	str	r2, [r7, #20]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3b01      	subs	r3, #1
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f3      	bne.n	80065fc <mem_set+0x10>
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006622:	b480      	push	{r7}
 8006624:	b089      	sub	sp, #36	@ 0x24
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	61fa      	str	r2, [r7, #28]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	4619      	mov	r1, r3
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	61ba      	str	r2, [r7, #24]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	1acb      	subs	r3, r1, r3
 800664e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3b01      	subs	r3, #1
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <mem_cmp+0x40>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0eb      	beq.n	800663a <mem_cmp+0x18>

	return r;
 8006662:	697b      	ldr	r3, [r7, #20]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3724      	adds	r7, #36	@ 0x24
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800667a:	e002      	b.n	8006682 <chk_chr+0x12>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3301      	adds	r3, #1
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <chk_chr+0x26>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4293      	cmp	r3, r2
 8006694:	d1f2      	bne.n	800667c <chk_chr+0xc>
	return *str;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	781b      	ldrb	r3, [r3, #0]
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066b2:	2300      	movs	r3, #0
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e029      	b.n	8006710 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80066bc:	4a27      	ldr	r2, [pc, #156]	@ (800675c <chk_lock+0xb4>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	4413      	add	r3, r2
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d01d      	beq.n	8006706 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066ca:	4a24      	ldr	r2, [pc, #144]	@ (800675c <chk_lock+0xb4>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	4413      	add	r3, r2
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d116      	bne.n	800670a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80066dc:	4a1f      	ldr	r2, [pc, #124]	@ (800675c <chk_lock+0xb4>)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	4413      	add	r3, r2
 80066e4:	3304      	adds	r3, #4
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d10c      	bne.n	800670a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066f0:	4a1a      	ldr	r2, [pc, #104]	@ (800675c <chk_lock+0xb4>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	4413      	add	r3, r2
 80066f8:	3308      	adds	r3, #8
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006700:	429a      	cmp	r2, r3
 8006702:	d102      	bne.n	800670a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006704:	e007      	b.n	8006716 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006706:	2301      	movs	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3301      	adds	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d9d2      	bls.n	80066bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d109      	bne.n	8006730 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <chk_lock+0x80>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d101      	bne.n	800672c <chk_lock+0x84>
 8006728:	2300      	movs	r3, #0
 800672a:	e010      	b.n	800674e <chk_lock+0xa6>
 800672c:	2312      	movs	r3, #18
 800672e:	e00e      	b.n	800674e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d108      	bne.n	8006748 <chk_lock+0xa0>
 8006736:	4a09      	ldr	r2, [pc, #36]	@ (800675c <chk_lock+0xb4>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	4413      	add	r3, r2
 800673e:	330c      	adds	r3, #12
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006746:	d101      	bne.n	800674c <chk_lock+0xa4>
 8006748:	2310      	movs	r3, #16
 800674a:	e000      	b.n	800674e <chk_lock+0xa6>
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	200006d4 	.word	0x200006d4

08006760 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
 800676a:	e002      	b.n	8006772 <enq_lock+0x12>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3301      	adds	r3, #1
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d806      	bhi.n	8006786 <enq_lock+0x26>
 8006778:	4a09      	ldr	r2, [pc, #36]	@ (80067a0 <enq_lock+0x40>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	4413      	add	r3, r2
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f2      	bne.n	800676c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b02      	cmp	r3, #2
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200006d4 	.word	0x200006d4

080067a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	e01f      	b.n	80067f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80067b4:	4a41      	ldr	r2, [pc, #260]	@ (80068bc <inc_lock+0x118>)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	4413      	add	r3, r2
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d113      	bne.n	80067ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80067c6:	4a3d      	ldr	r2, [pc, #244]	@ (80068bc <inc_lock+0x118>)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	4413      	add	r3, r2
 80067ce:	3304      	adds	r3, #4
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d109      	bne.n	80067ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80067da:	4a38      	ldr	r2, [pc, #224]	@ (80068bc <inc_lock+0x118>)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	4413      	add	r3, r2
 80067e2:	3308      	adds	r3, #8
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d006      	beq.n	80067fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d9dc      	bls.n	80067b4 <inc_lock+0x10>
 80067fa:	e000      	b.n	80067fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80067fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d132      	bne.n	800686a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e002      	b.n	8006810 <inc_lock+0x6c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d806      	bhi.n	8006824 <inc_lock+0x80>
 8006816:	4a29      	ldr	r2, [pc, #164]	@ (80068bc <inc_lock+0x118>)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	4413      	add	r3, r2
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f2      	bne.n	800680a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d101      	bne.n	800682e <inc_lock+0x8a>
 800682a:	2300      	movs	r3, #0
 800682c:	e040      	b.n	80068b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4922      	ldr	r1, [pc, #136]	@ (80068bc <inc_lock+0x118>)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	440b      	add	r3, r1
 800683a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	491e      	ldr	r1, [pc, #120]	@ (80068bc <inc_lock+0x118>)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	440b      	add	r3, r1
 8006848:	3304      	adds	r3, #4
 800684a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	491a      	ldr	r1, [pc, #104]	@ (80068bc <inc_lock+0x118>)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	440b      	add	r3, r1
 8006858:	3308      	adds	r3, #8
 800685a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800685c:	4a17      	ldr	r2, [pc, #92]	@ (80068bc <inc_lock+0x118>)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	4413      	add	r3, r2
 8006864:	330c      	adds	r3, #12
 8006866:	2200      	movs	r2, #0
 8006868:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <inc_lock+0xe0>
 8006870:	4a12      	ldr	r2, [pc, #72]	@ (80068bc <inc_lock+0x118>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	4413      	add	r3, r2
 8006878:	330c      	adds	r3, #12
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <inc_lock+0xe0>
 8006880:	2300      	movs	r3, #0
 8006882:	e015      	b.n	80068b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d108      	bne.n	800689c <inc_lock+0xf8>
 800688a:	4a0c      	ldr	r2, [pc, #48]	@ (80068bc <inc_lock+0x118>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	4413      	add	r3, r2
 8006892:	330c      	adds	r3, #12
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	e001      	b.n	80068a0 <inc_lock+0xfc>
 800689c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068a0:	4906      	ldr	r1, [pc, #24]	@ (80068bc <inc_lock+0x118>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	440b      	add	r3, r1
 80068a8:	330c      	adds	r3, #12
 80068aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3301      	adds	r3, #1
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	200006d4 	.word	0x200006d4

080068c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	607b      	str	r3, [r7, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d825      	bhi.n	8006920 <dec_lock+0x60>
		n = Files[i].ctr;
 80068d4:	4a17      	ldr	r2, [pc, #92]	@ (8006934 <dec_lock+0x74>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	4413      	add	r3, r2
 80068dc:	330c      	adds	r3, #12
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068e8:	d101      	bne.n	80068ee <dec_lock+0x2e>
 80068ea:	2300      	movs	r3, #0
 80068ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80068ee:	89fb      	ldrh	r3, [r7, #14]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <dec_lock+0x3a>
 80068f4:	89fb      	ldrh	r3, [r7, #14]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80068fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <dec_lock+0x74>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	4413      	add	r3, r2
 8006902:	330c      	adds	r3, #12
 8006904:	89fa      	ldrh	r2, [r7, #14]
 8006906:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006908:	89fb      	ldrh	r3, [r7, #14]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <dec_lock+0x5a>
 800690e:	4a09      	ldr	r2, [pc, #36]	@ (8006934 <dec_lock+0x74>)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	4413      	add	r3, r2
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	737b      	strb	r3, [r7, #13]
 800691e:	e001      	b.n	8006924 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006920:	2302      	movs	r3, #2
 8006922:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006924:	7b7b      	ldrb	r3, [r7, #13]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200006d4 	.word	0x200006d4

08006938 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e010      	b.n	8006968 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006946:	4a0d      	ldr	r2, [pc, #52]	@ (800697c <clear_lock+0x44>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	4413      	add	r3, r2
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d105      	bne.n	8006962 <clear_lock+0x2a>
 8006956:	4a09      	ldr	r2, [pc, #36]	@ (800697c <clear_lock+0x44>)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	4413      	add	r3, r2
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d9eb      	bls.n	8006946 <clear_lock+0xe>
	}
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	200006d4 	.word	0x200006d4

08006980 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d034      	beq.n	80069fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006998:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7858      	ldrb	r0, [r3, #1]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80069a4:	2301      	movs	r3, #1
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	f7ff fd29 	bl	80063fe <disk_write>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
 80069b6:	e022      	b.n	80069fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	1ad2      	subs	r2, r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d217      	bcs.n	80069fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	789b      	ldrb	r3, [r3, #2]
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	e010      	b.n	80069f8 <sync_window+0x78>
					wsect += fs->fsize;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4413      	add	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7858      	ldrb	r0, [r3, #1]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80069ea:	2301      	movs	r3, #1
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	f7ff fd06 	bl	80063fe <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d8eb      	bhi.n	80069d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d01b      	beq.n	8006a58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff ffad 	bl	8006980 <sync_window>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d113      	bne.n	8006a58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7858      	ldrb	r0, [r3, #1]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	f7ff fcc2 	bl	80063c6 <disk_read>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ff87 	bl	8006980 <sync_window>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d158      	bne.n	8006b2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d148      	bne.n	8006b16 <sync_fs+0xb2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	791b      	ldrb	r3, [r3, #4]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d144      	bne.n	8006b16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3334      	adds	r3, #52	@ 0x34
 8006a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fda8 	bl	80065ec <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3334      	adds	r3, #52	@ 0x34
 8006aa0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006aa4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fd37 	bl	800651c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3334      	adds	r3, #52	@ 0x34
 8006ab2:	4921      	ldr	r1, [pc, #132]	@ (8006b38 <sync_fs+0xd4>)
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fd4c 	bl	8006552 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3334      	adds	r3, #52	@ 0x34
 8006abe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006ac2:	491e      	ldr	r1, [pc, #120]	@ (8006b3c <sync_fs+0xd8>)
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fd44 	bl	8006552 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3334      	adds	r3, #52	@ 0x34
 8006ace:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f7ff fd3a 	bl	8006552 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3334      	adds	r3, #52	@ 0x34
 8006ae2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f7ff fd30 	bl	8006552 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7858      	ldrb	r0, [r3, #1]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	f7ff fc77 	bl	80063fe <disk_write>
			fs->fsi_flag = 0;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff fc8a 	bl	8006438 <disk_ioctl>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <sync_fs+0xca>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	41615252 	.word	0x41615252
 8006b3c:	61417272 	.word	0x61417272

08006b40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	3b02      	subs	r3, #2
 8006b4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	3b02      	subs	r3, #2
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d301      	bcc.n	8006b60 <clust2sect+0x20>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e008      	b.n	8006b72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	895b      	ldrh	r3, [r3, #10]
 8006b64:	461a      	mov	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	fb03 f202 	mul.w	r2, r3, r2
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b70:	4413      	add	r3, r2
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d904      	bls.n	8006b9e <get_fat+0x20>
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d302      	bcc.n	8006ba4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e08e      	b.n	8006cc2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d061      	beq.n	8006c76 <get_fat+0xf8>
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	dc7b      	bgt.n	8006cae <get_fat+0x130>
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d002      	beq.n	8006bc0 <get_fat+0x42>
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d041      	beq.n	8006c42 <get_fat+0xc4>
 8006bbe:	e076      	b.n	8006cae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	0a5b      	lsrs	r3, r3, #9
 8006bd6:	4413      	add	r3, r2
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f7ff ff14 	bl	8006a08 <move_window>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d166      	bne.n	8006cb4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	60fa      	str	r2, [r7, #12]
 8006bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	0a5b      	lsrs	r3, r3, #9
 8006c02:	4413      	add	r3, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	6938      	ldr	r0, [r7, #16]
 8006c08:	f7ff fefe 	bl	8006a08 <move_window>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d152      	bne.n	8006cb8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <get_fat+0xba>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	e002      	b.n	8006c3e <get_fat+0xc0>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c3e:	617b      	str	r3, [r7, #20]
			break;
 8006c40:	e03f      	b.n	8006cc2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	0a1b      	lsrs	r3, r3, #8
 8006c4a:	4413      	add	r3, r2
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6938      	ldr	r0, [r7, #16]
 8006c50:	f7ff feda 	bl	8006a08 <move_window>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d130      	bne.n	8006cbc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006c68:	4413      	add	r3, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fc1a 	bl	80064a4 <ld_word>
 8006c70:	4603      	mov	r3, r0
 8006c72:	617b      	str	r3, [r7, #20]
			break;
 8006c74:	e025      	b.n	8006cc2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	09db      	lsrs	r3, r3, #7
 8006c7e:	4413      	add	r3, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	6938      	ldr	r0, [r7, #16]
 8006c84:	f7ff fec0 	bl	8006a08 <move_window>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d118      	bne.n	8006cc0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff fc19 	bl	80064d6 <ld_dword>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006caa:	617b      	str	r3, [r7, #20]
			break;
 8006cac:	e009      	b.n	8006cc2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006cae:	2301      	movs	r3, #1
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e006      	b.n	8006cc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cb4:	bf00      	nop
 8006cb6:	e004      	b.n	8006cc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cb8:	bf00      	nop
 8006cba:	e002      	b.n	8006cc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006cc0:	bf00      	nop
		}
	}

	return val;
 8006cc2:	697b      	ldr	r3, [r7, #20]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b089      	sub	sp, #36	@ 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	f240 80d9 	bls.w	8006e96 <put_fat+0x1ca>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	f080 80d3 	bcs.w	8006e96 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	f000 8096 	beq.w	8006e26 <put_fat+0x15a>
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	f300 80cb 	bgt.w	8006e96 <put_fat+0x1ca>
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d002      	beq.n	8006d0a <put_fat+0x3e>
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d06e      	beq.n	8006de6 <put_fat+0x11a>
 8006d08:	e0c5      	b.n	8006e96 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	4413      	add	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	0a5b      	lsrs	r3, r3, #9
 8006d20:	4413      	add	r3, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fe6f 	bl	8006a08 <move_window>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d2e:	7ffb      	ldrb	r3, [r7, #31]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f040 80a9 	bne.w	8006e88 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	1c59      	adds	r1, r3, #1
 8006d40:	61b9      	str	r1, [r7, #24]
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	4413      	add	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <put_fat+0xa4>
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	b25a      	sxtb	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	b25b      	sxtb	r3, r3
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e001      	b.n	8006d74 <put_fat+0xa8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	4413      	add	r3, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fe3c 	bl	8006a08 <move_window>
 8006d90:	4603      	mov	r3, r0
 8006d92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d94:	7ffb      	ldrb	r3, [r7, #31]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d178      	bne.n	8006e8c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da6:	4413      	add	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <put_fat+0xf0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	e00e      	b.n	8006dda <put_fat+0x10e>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	f023 030f 	bic.w	r3, r3, #15
 8006dc6:	b25a      	sxtb	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	b25b      	sxtb	r3, r3
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	b25b      	sxtb	r3, r3
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	70da      	strb	r2, [r3, #3]
			break;
 8006de4:	e057      	b.n	8006e96 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	4413      	add	r3, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff fe08 	bl	8006a08 <move_window>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dfc:	7ffb      	ldrb	r3, [r7, #31]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d146      	bne.n	8006e90 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006e10:	4413      	add	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	b292      	uxth	r2, r2
 8006e16:	4611      	mov	r1, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fb7f 	bl	800651c <st_word>
			fs->wflag = 1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	70da      	strb	r2, [r3, #3]
			break;
 8006e24:	e037      	b.n	8006e96 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	09db      	lsrs	r3, r3, #7
 8006e2e:	4413      	add	r3, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff fde8 	bl	8006a08 <move_window>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e3c:	7ffb      	ldrb	r3, [r7, #31]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d128      	bne.n	8006e94 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006e56:	4413      	add	r3, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fb3c 	bl	80064d6 <ld_dword>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006e64:	4323      	orrs	r3, r4
 8006e66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006e76:	4413      	add	r3, r2
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fb69 	bl	8006552 <st_dword>
			fs->wflag = 1;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2201      	movs	r2, #1
 8006e84:	70da      	strb	r2, [r3, #3]
			break;
 8006e86:	e006      	b.n	8006e96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e88:	bf00      	nop
 8006e8a:	e004      	b.n	8006e96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e94:	bf00      	nop
		}
	}
	return res;
 8006e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3724      	adds	r7, #36	@ 0x24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd90      	pop	{r4, r7, pc}

08006ea0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d904      	bls.n	8006ec6 <remove_chain+0x26>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d301      	bcc.n	8006eca <remove_chain+0x2a>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e04b      	b.n	8006f62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	69b8      	ldr	r0, [r7, #24]
 8006ed8:	f7ff fef8 	bl	8006ccc <put_fat>
 8006edc:	4603      	mov	r3, r0
 8006ede:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ee0:	7ffb      	ldrb	r3, [r7, #31]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <remove_chain+0x4a>
 8006ee6:	7ffb      	ldrb	r3, [r7, #31]
 8006ee8:	e03b      	b.n	8006f62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff fe46 	bl	8006b7e <get_fat>
 8006ef2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d031      	beq.n	8006f5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <remove_chain+0x64>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e02e      	b.n	8006f62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d101      	bne.n	8006f10 <remove_chain+0x70>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e028      	b.n	8006f62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f10:	2200      	movs	r2, #0
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	69b8      	ldr	r0, [r7, #24]
 8006f16:	f7ff fed9 	bl	8006ccc <put_fat>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f1e:	7ffb      	ldrb	r3, [r7, #31]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <remove_chain+0x88>
 8006f24:	7ffb      	ldrb	r3, [r7, #31]
 8006f26:	e01c      	b.n	8006f62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	3b02      	subs	r3, #2
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d20b      	bcs.n	8006f4e <remove_chain+0xae>
			fs->free_clst++;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	f043 0301 	orr.w	r3, r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d3c6      	bcc.n	8006eea <remove_chain+0x4a>
 8006f5c:	e000      	b.n	8006f60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b088      	sub	sp, #32
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10d      	bne.n	8006f9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <create_chain+0x2c>
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d31b      	bcc.n	8006fce <create_chain+0x64>
 8006f96:	2301      	movs	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e018      	b.n	8006fce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fded 	bl	8006b7e <get_fat>
 8006fa4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d801      	bhi.n	8006fb0 <create_chain+0x46>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e070      	b.n	8007092 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d101      	bne.n	8006fbc <create_chain+0x52>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	e06a      	b.n	8007092 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d201      	bcs.n	8006fca <create_chain+0x60>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	e063      	b.n	8007092 <create_chain+0x128>
		scl = clst;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d307      	bcc.n	8006ff2 <create_chain+0x88>
				ncl = 2;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d901      	bls.n	8006ff2 <create_chain+0x88>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e04f      	b.n	8007092 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ff2:	69f9      	ldr	r1, [r7, #28]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fdc2 	bl	8006b7e <get_fat>
 8006ffa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d003      	beq.n	8007010 <create_chain+0xa6>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d101      	bne.n	8007014 <create_chain+0xaa>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	e03e      	b.n	8007092 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	429a      	cmp	r2, r3
 800701a:	d1da      	bne.n	8006fd2 <create_chain+0x68>
 800701c:	2300      	movs	r3, #0
 800701e:	e038      	b.n	8007092 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007020:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007022:	f04f 32ff 	mov.w	r2, #4294967295
 8007026:	69f9      	ldr	r1, [r7, #28]
 8007028:	6938      	ldr	r0, [r7, #16]
 800702a:	f7ff fe4f 	bl	8006ccc <put_fat>
 800702e:	4603      	mov	r3, r0
 8007030:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <create_chain+0xe2>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d006      	beq.n	800704c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6938      	ldr	r0, [r7, #16]
 8007044:	f7ff fe42 	bl	8006ccc <put_fat>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d116      	bne.n	8007080 <create_chain+0x116>
		fs->last_clst = ncl;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	3b02      	subs	r3, #2
 8007062:	429a      	cmp	r2, r3
 8007064:	d804      	bhi.n	8007070 <create_chain+0x106>
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	791b      	ldrb	r3, [r3, #4]
 8007074:	f043 0301 	orr.w	r3, r3, #1
 8007078:	b2da      	uxtb	r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	711a      	strb	r2, [r3, #4]
 800707e:	e007      	b.n	8007090 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d102      	bne.n	800708c <create_chain+0x122>
 8007086:	f04f 33ff 	mov.w	r3, #4294967295
 800708a:	e000      	b.n	800708e <create_chain+0x124>
 800708c:	2301      	movs	r3, #1
 800708e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007090:	69fb      	ldr	r3, [r7, #28]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800709a:	b480      	push	{r7}
 800709c:	b087      	sub	sp, #28
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ae:	3304      	adds	r3, #4
 80070b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	0a5b      	lsrs	r3, r3, #9
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	8952      	ldrh	r2, [r2, #10]
 80070ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80070be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1d1a      	adds	r2, r3, #4
 80070c4:	613a      	str	r2, [r7, #16]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <clmt_clust+0x3a>
 80070d0:	2300      	movs	r3, #0
 80070d2:	e010      	b.n	80070f6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d307      	bcc.n	80070ec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	3304      	adds	r3, #4
 80070e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070ea:	e7e9      	b.n	80070c0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80070ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	4413      	add	r3, r2
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b086      	sub	sp, #24
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007118:	d204      	bcs.n	8007124 <dir_sdi+0x22>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007124:	2302      	movs	r3, #2
 8007126:	e063      	b.n	80071f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <dir_sdi+0x46>
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d902      	bls.n	8007148 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007146:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10c      	bne.n	8007168 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	8912      	ldrh	r2, [r2, #8]
 8007156:	4293      	cmp	r3, r2
 8007158:	d301      	bcc.n	800715e <dir_sdi+0x5c>
 800715a:	2302      	movs	r3, #2
 800715c:	e048      	b.n	80071f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	61da      	str	r2, [r3, #28]
 8007166:	e029      	b.n	80071bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	895b      	ldrh	r3, [r3, #10]
 800716c:	025b      	lsls	r3, r3, #9
 800716e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007170:	e019      	b.n	80071a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6979      	ldr	r1, [r7, #20]
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff fd01 	bl	8006b7e <get_fat>
 800717c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d101      	bne.n	800718a <dir_sdi+0x88>
 8007186:	2301      	movs	r3, #1
 8007188:	e032      	b.n	80071f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d904      	bls.n	800719a <dir_sdi+0x98>
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	429a      	cmp	r2, r3
 8007198:	d301      	bcc.n	800719e <dir_sdi+0x9c>
 800719a:	2302      	movs	r3, #2
 800719c:	e028      	b.n	80071f0 <dir_sdi+0xee>
			ofs -= csz;
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d2e1      	bcs.n	8007172 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80071ae:	6979      	ldr	r1, [r7, #20]
 80071b0:	6938      	ldr	r0, [r7, #16]
 80071b2:	f7ff fcc5 	bl	8006b40 <clust2sect>
 80071b6:	4602      	mov	r2, r0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <dir_sdi+0xcc>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e010      	b.n	80071f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69da      	ldr	r2, [r3, #28]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	0a5b      	lsrs	r3, r3, #9
 80071d6:	441a      	add	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	441a      	add	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	3320      	adds	r3, #32
 800720e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <dir_next+0x28>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800721e:	d301      	bcc.n	8007224 <dir_next+0x2c>
 8007220:	2304      	movs	r3, #4
 8007222:	e0aa      	b.n	800737a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	2b00      	cmp	r3, #0
 800722c:	f040 8098 	bne.w	8007360 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10b      	bne.n	800725a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	8912      	ldrh	r2, [r2, #8]
 800724a:	4293      	cmp	r3, r2
 800724c:	f0c0 8088 	bcc.w	8007360 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	61da      	str	r2, [r3, #28]
 8007256:	2304      	movs	r3, #4
 8007258:	e08f      	b.n	800737a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	0a5b      	lsrs	r3, r3, #9
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	8952      	ldrh	r2, [r2, #10]
 8007262:	3a01      	subs	r2, #1
 8007264:	4013      	ands	r3, r2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d17a      	bne.n	8007360 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7ff fc83 	bl	8006b7e <get_fat>
 8007278:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d801      	bhi.n	8007284 <dir_next+0x8c>
 8007280:	2302      	movs	r3, #2
 8007282:	e07a      	b.n	800737a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d101      	bne.n	8007290 <dir_next+0x98>
 800728c:	2301      	movs	r3, #1
 800728e:	e074      	b.n	800737a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	429a      	cmp	r2, r3
 8007298:	d358      	bcc.n	800734c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	61da      	str	r2, [r3, #28]
 80072a6:	2304      	movs	r3, #4
 80072a8:	e067      	b.n	800737a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7ff fe59 	bl	8006f6a <create_chain>
 80072b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <dir_next+0xcc>
 80072c0:	2307      	movs	r3, #7
 80072c2:	e05a      	b.n	800737a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <dir_next+0xd6>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e055      	b.n	800737a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d101      	bne.n	80072da <dir_next+0xe2>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e04f      	b.n	800737a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7ff fb50 	bl	8006980 <sync_window>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <dir_next+0xf2>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e047      	b.n	800737a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3334      	adds	r3, #52	@ 0x34
 80072ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff f979 	bl	80065ec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	6979      	ldr	r1, [r7, #20]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f7ff fc1d 	bl	8006b40 <clust2sect>
 8007306:	4602      	mov	r2, r0
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	631a      	str	r2, [r3, #48]	@ 0x30
 800730c:	e012      	b.n	8007334 <dir_next+0x13c>
						fs->wflag = 1;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff fb33 	bl	8006980 <sync_window>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <dir_next+0x12c>
 8007320:	2301      	movs	r3, #1
 8007322:	e02a      	b.n	800737a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3301      	adds	r3, #1
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	631a      	str	r2, [r3, #48]	@ 0x30
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	895b      	ldrh	r3, [r3, #10]
 8007338:	461a      	mov	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4293      	cmp	r3, r2
 800733e:	d3e6      	bcc.n	800730e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad2      	subs	r2, r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fbf3 	bl	8006b40 <clust2sect>
 800735a:	4602      	mov	r2, r0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	441a      	add	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b086      	sub	sp, #24
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007392:	2100      	movs	r1, #0
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff feb4 	bl	8007102 <dir_sdi>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d12b      	bne.n	80073fc <dir_alloc+0x7a>
		n = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	4619      	mov	r1, r3
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fb2a 	bl	8006a08 <move_window>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11d      	bne.n	80073fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2be5      	cmp	r3, #229	@ 0xe5
 80073c6:	d004      	beq.n	80073d2 <dir_alloc+0x50>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	3301      	adds	r3, #1
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d102      	bne.n	80073e6 <dir_alloc+0x64>
 80073e0:	e00c      	b.n	80073fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80073e2:	2300      	movs	r3, #0
 80073e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80073e6:	2101      	movs	r1, #1
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff ff05 	bl	80071f8 <dir_next>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0d7      	beq.n	80073a8 <dir_alloc+0x26>
 80073f8:	e000      	b.n	80073fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80073fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d101      	bne.n	8007406 <dir_alloc+0x84>
 8007402:	2307      	movs	r3, #7
 8007404:	75fb      	strb	r3, [r7, #23]
	return res;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	331a      	adds	r3, #26
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff f840 	bl	80064a4 <ld_word>
 8007424:	4603      	mov	r3, r0
 8007426:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d109      	bne.n	8007444 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	3314      	adds	r3, #20
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff f835 	bl	80064a4 <ld_word>
 800743a:	4603      	mov	r3, r0
 800743c:	041b      	lsls	r3, r3, #16
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007444:	68fb      	ldr	r3, [r7, #12]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	331a      	adds	r3, #26
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	b292      	uxth	r2, r2
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff f859 	bl	800651c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d109      	bne.n	8007486 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f103 0214 	add.w	r2, r3, #20
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	b29b      	uxth	r3, r3
 800747e:	4619      	mov	r1, r3
 8007480:	4610      	mov	r0, r2
 8007482:	f7ff f84b 	bl	800651c <st_word>
	}
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b086      	sub	sp, #24
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007498:	2304      	movs	r3, #4
 800749a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80074a2:	e03c      	b.n	800751e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	4619      	mov	r1, r3
 80074aa:	6938      	ldr	r0, [r7, #16]
 80074ac:	f7ff faac 	bl	8006a08 <move_window>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d136      	bne.n	8007528 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80074c8:	2304      	movs	r3, #4
 80074ca:	75fb      	strb	r3, [r7, #23]
 80074cc:	e031      	b.n	8007532 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	330b      	adds	r3, #11
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074da:	73bb      	strb	r3, [r7, #14]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7bba      	ldrb	r2, [r7, #14]
 80074e0:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2be5      	cmp	r3, #229	@ 0xe5
 80074e6:	d011      	beq.n	800750c <dir_read+0x7e>
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ec:	d00e      	beq.n	800750c <dir_read+0x7e>
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	2b0f      	cmp	r3, #15
 80074f2:	d00b      	beq.n	800750c <dir_read+0x7e>
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	f023 0320 	bic.w	r3, r3, #32
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	bf0c      	ite	eq
 80074fe:	2301      	moveq	r3, #1
 8007500:	2300      	movne	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	4293      	cmp	r3, r2
 800750a:	d00f      	beq.n	800752c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fe72 	bl	80071f8 <dir_next>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d108      	bne.n	8007530 <dir_read+0xa2>
	while (dp->sect) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1be      	bne.n	80074a4 <dir_read+0x16>
 8007526:	e004      	b.n	8007532 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007528:	bf00      	nop
 800752a:	e002      	b.n	8007532 <dir_read+0xa4>
				break;
 800752c:	bf00      	nop
 800752e:	e000      	b.n	8007532 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007530:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <dir_read+0xb0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	61da      	str	r2, [r3, #28]
	return res;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007556:	2100      	movs	r1, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff fdd2 	bl	8007102 <dir_sdi>
 800755e:	4603      	mov	r3, r0
 8007560:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007562:	7dfb      	ldrb	r3, [r7, #23]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <dir_find+0x24>
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	e03e      	b.n	80075ea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	4619      	mov	r1, r3
 8007572:	6938      	ldr	r0, [r7, #16]
 8007574:	f7ff fa48 	bl	8006a08 <move_window>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d12f      	bne.n	80075e2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <dir_find+0x4e>
 8007590:	2304      	movs	r3, #4
 8007592:	75fb      	strb	r3, [r7, #23]
 8007594:	e028      	b.n	80075e8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	330b      	adds	r3, #11
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	330b      	adds	r3, #11
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f003 0308 	and.w	r3, r3, #8
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <dir_find+0x86>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a18      	ldr	r0, [r3, #32]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3324      	adds	r3, #36	@ 0x24
 80075c0:	220b      	movs	r2, #11
 80075c2:	4619      	mov	r1, r3
 80075c4:	f7ff f82d 	bl	8006622 <mem_cmp>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80075ce:	2100      	movs	r1, #0
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff fe11 	bl	80071f8 <dir_next>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0c5      	beq.n	800756c <dir_find+0x24>
 80075e0:	e002      	b.n	80075e8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80075e2:	bf00      	nop
 80075e4:	e000      	b.n	80075e8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075e6:	bf00      	nop

	return res;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007600:	2101      	movs	r1, #1
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff febd 	bl	8007382 <dir_alloc>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d11c      	bne.n	800764c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	4619      	mov	r1, r3
 8007618:	68b8      	ldr	r0, [r7, #8]
 800761a:	f7ff f9f5 	bl	8006a08 <move_window>
 800761e:	4603      	mov	r3, r0
 8007620:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d111      	bne.n	800764c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	2220      	movs	r2, #32
 800762e:	2100      	movs	r1, #0
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe ffdb 	bl	80065ec <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a18      	ldr	r0, [r3, #32]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3324      	adds	r3, #36	@ 0x24
 800763e:	220b      	movs	r2, #11
 8007640:	4619      	mov	r1, r3
 8007642:	f7fe ffb2 	bl	80065aa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2201      	movs	r2, #1
 800764a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	4619      	mov	r1, r3
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff f9cc 	bl	8006a08 <move_window>
 8007670:	4603      	mov	r3, r0
 8007672:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	22e5      	movs	r2, #229	@ 0xe5
 8007680:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8007688:	7afb      	ldrb	r3, [r7, #11]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2200      	movs	r2, #0
 80076a0:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d04f      	beq.n	800774a <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80076b2:	e022      	b.n	80076fa <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1a      	ldr	r2, [r3, #32]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	1c59      	adds	r1, r3, #1
 80076bc:	6179      	str	r1, [r7, #20]
 80076be:	4413      	add	r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d016      	beq.n	80076f8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	2b05      	cmp	r3, #5
 80076ce:	d101      	bne.n	80076d4 <get_fileinfo+0x42>
 80076d0:	23e5      	movs	r3, #229	@ 0xe5
 80076d2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d106      	bne.n	80076e8 <get_fileinfo+0x56>
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	613a      	str	r2, [r7, #16]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	4413      	add	r3, r2
 80076e4:	222e      	movs	r2, #46	@ 0x2e
 80076e6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	613a      	str	r2, [r7, #16]
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4413      	add	r3, r2
 80076f2:	7bfa      	ldrb	r2, [r7, #15]
 80076f4:	725a      	strb	r2, [r3, #9]
 80076f6:	e000      	b.n	80076fa <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80076f8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b0a      	cmp	r3, #10
 80076fe:	d9d9      	bls.n	80076b4 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	4413      	add	r3, r2
 8007706:	3309      	adds	r3, #9
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	7ada      	ldrb	r2, [r3, #11]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	331c      	adds	r3, #28
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe feda 	bl	80064d6 <ld_dword>
 8007722:	4602      	mov	r2, r0
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	3316      	adds	r3, #22
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fed1 	bl	80064d6 <ld_dword>
 8007734:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	b29a      	uxth	r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	80da      	strh	r2, [r3, #6]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0c1b      	lsrs	r3, r3, #16
 8007742:	b29a      	uxth	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	809a      	strh	r2, [r3, #4]
 8007748:	e000      	b.n	800774c <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800774a:	bf00      	nop
}
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3324      	adds	r3, #36	@ 0x24
 8007768:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800776a:	220b      	movs	r2, #11
 800776c:	2120      	movs	r1, #32
 800776e:	68b8      	ldr	r0, [r7, #8]
 8007770:	f7fe ff3c 	bl	80065ec <mem_set>
	si = i = 0; ni = 8;
 8007774:	2300      	movs	r3, #0
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	2308      	movs	r3, #8
 800777e:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b2e      	cmp	r3, #46	@ 0x2e
 800778a:	d12f      	bne.n	80077ec <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	61fa      	str	r2, [r7, #28]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 800779a:	7efb      	ldrb	r3, [r7, #27]
 800779c:	2b2e      	cmp	r3, #46	@ 0x2e
 800779e:	d10a      	bne.n	80077b6 <create_name+0x62>
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d807      	bhi.n	80077b6 <create_name+0x62>
			sfn[i++] = c;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	613a      	str	r2, [r7, #16]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	4413      	add	r3, r2
 80077b0:	7efa      	ldrb	r2, [r7, #27]
 80077b2:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80077b4:	e7ea      	b.n	800778c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80077b6:	7efb      	ldrb	r3, [r7, #27]
 80077b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80077ba:	d007      	beq.n	80077cc <create_name+0x78>
 80077bc:	7efb      	ldrb	r3, [r7, #27]
 80077be:	2b5c      	cmp	r3, #92	@ 0x5c
 80077c0:	d004      	beq.n	80077cc <create_name+0x78>
 80077c2:	7efb      	ldrb	r3, [r7, #27]
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d901      	bls.n	80077cc <create_name+0x78>
 80077c8:	2306      	movs	r3, #6
 80077ca:	e084      	b.n	80078d6 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	441a      	add	r2, r3
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80077d6:	7efb      	ldrb	r3, [r7, #27]
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d801      	bhi.n	80077e0 <create_name+0x8c>
 80077dc:	2224      	movs	r2, #36	@ 0x24
 80077de:	e000      	b.n	80077e2 <create_name+0x8e>
 80077e0:	2220      	movs	r2, #32
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	330b      	adds	r3, #11
 80077e6:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e074      	b.n	80078d6 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	61fa      	str	r2, [r7, #28]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80077fa:	7efb      	ldrb	r3, [r7, #27]
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d94e      	bls.n	800789e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007800:	7efb      	ldrb	r3, [r7, #27]
 8007802:	2b2f      	cmp	r3, #47	@ 0x2f
 8007804:	d006      	beq.n	8007814 <create_name+0xc0>
 8007806:	7efb      	ldrb	r3, [r7, #27]
 8007808:	2b5c      	cmp	r3, #92	@ 0x5c
 800780a:	d110      	bne.n	800782e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800780c:	e002      	b.n	8007814 <create_name+0xc0>
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	3301      	adds	r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b2f      	cmp	r3, #47	@ 0x2f
 800781e:	d0f6      	beq.n	800780e <create_name+0xba>
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	4413      	add	r3, r2
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b5c      	cmp	r3, #92	@ 0x5c
 800782a:	d0f0      	beq.n	800780e <create_name+0xba>
			break;
 800782c:	e038      	b.n	80078a0 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800782e:	7efb      	ldrb	r3, [r7, #27]
 8007830:	2b2e      	cmp	r3, #46	@ 0x2e
 8007832:	d003      	beq.n	800783c <create_name+0xe8>
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	429a      	cmp	r2, r3
 800783a:	d30c      	bcc.n	8007856 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b0b      	cmp	r3, #11
 8007840:	d002      	beq.n	8007848 <create_name+0xf4>
 8007842:	7efb      	ldrb	r3, [r7, #27]
 8007844:	2b2e      	cmp	r3, #46	@ 0x2e
 8007846:	d001      	beq.n	800784c <create_name+0xf8>
 8007848:	2306      	movs	r3, #6
 800784a:	e044      	b.n	80078d6 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800784c:	2308      	movs	r3, #8
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	230b      	movs	r3, #11
 8007852:	617b      	str	r3, [r7, #20]
			continue;
 8007854:	e022      	b.n	800789c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007856:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800785a:	2b00      	cmp	r3, #0
 800785c:	da04      	bge.n	8007868 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800785e:	7efb      	ldrb	r3, [r7, #27]
 8007860:	3b80      	subs	r3, #128	@ 0x80
 8007862:	4a1f      	ldr	r2, [pc, #124]	@ (80078e0 <create_name+0x18c>)
 8007864:	5cd3      	ldrb	r3, [r2, r3]
 8007866:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007868:	7efb      	ldrb	r3, [r7, #27]
 800786a:	4619      	mov	r1, r3
 800786c:	481d      	ldr	r0, [pc, #116]	@ (80078e4 <create_name+0x190>)
 800786e:	f7fe feff 	bl	8006670 <chk_chr>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <create_name+0x128>
 8007878:	2306      	movs	r3, #6
 800787a:	e02c      	b.n	80078d6 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800787c:	7efb      	ldrb	r3, [r7, #27]
 800787e:	2b60      	cmp	r3, #96	@ 0x60
 8007880:	d905      	bls.n	800788e <create_name+0x13a>
 8007882:	7efb      	ldrb	r3, [r7, #27]
 8007884:	2b7a      	cmp	r3, #122	@ 0x7a
 8007886:	d802      	bhi.n	800788e <create_name+0x13a>
 8007888:	7efb      	ldrb	r3, [r7, #27]
 800788a:	3b20      	subs	r3, #32
 800788c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	613a      	str	r2, [r7, #16]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	4413      	add	r3, r2
 8007898:	7efa      	ldrb	r2, [r7, #27]
 800789a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800789c:	e7a6      	b.n	80077ec <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800789e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	441a      	add	r2, r3
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <create_name+0x160>
 80078b0:	2306      	movs	r3, #6
 80078b2:	e010      	b.n	80078d6 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2be5      	cmp	r3, #229	@ 0xe5
 80078ba:	d102      	bne.n	80078c2 <create_name+0x16e>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2205      	movs	r2, #5
 80078c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80078c2:	7efb      	ldrb	r3, [r7, #27]
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d801      	bhi.n	80078cc <create_name+0x178>
 80078c8:	2204      	movs	r2, #4
 80078ca:	e000      	b.n	80078ce <create_name+0x17a>
 80078cc:	2200      	movs	r2, #0
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	330b      	adds	r3, #11
 80078d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80078d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	0800a3b8 	.word	0x0800a3b8
 80078e4:	0800a35c 	.word	0x0800a35c

080078e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b2f      	cmp	r3, #47	@ 0x2f
 8007902:	d00b      	beq.n	800791c <follow_path+0x34>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b5c      	cmp	r3, #92	@ 0x5c
 800790a:	d007      	beq.n	800791c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	e00d      	b.n	8007932 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b2f      	cmp	r3, #47	@ 0x2f
 8007922:	d0f8      	beq.n	8007916 <follow_path+0x2e>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b5c      	cmp	r3, #92	@ 0x5c
 800792a:	d0f4      	beq.n	8007916 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2200      	movs	r2, #0
 8007930:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b1f      	cmp	r3, #31
 8007938:	d80a      	bhi.n	8007950 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2280      	movs	r2, #128	@ 0x80
 800793e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007942:	2100      	movs	r1, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fbdc 	bl	8007102 <dir_sdi>
 800794a:	4603      	mov	r3, r0
 800794c:	75fb      	strb	r3, [r7, #23]
 800794e:	e056      	b.n	80079fe <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007950:	463b      	mov	r3, r7
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fefd 	bl	8007754 <create_name>
 800795a:	4603      	mov	r3, r0
 800795c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d147      	bne.n	80079f4 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff fdef 	bl	8007548 <dir_find>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007974:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01b      	beq.n	80079b4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d13a      	bne.n	80079f8 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d02c      	beq.n	80079f0 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2280      	movs	r2, #128	@ 0x80
 800799a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80079a2:	e029      	b.n	80079f8 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d124      	bne.n	80079f8 <follow_path+0x110>
 80079ae:	2305      	movs	r3, #5
 80079b0:	75fb      	strb	r3, [r7, #23]
				break;
 80079b2:	e021      	b.n	80079f8 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	f003 0304 	and.w	r3, r3, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d11e      	bne.n	80079fc <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	799b      	ldrb	r3, [r3, #6]
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80079ca:	2305      	movs	r3, #5
 80079cc:	75fb      	strb	r3, [r7, #23]
 80079ce:	e016      	b.n	80079fe <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	4413      	add	r3, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff fd14 	bl	8007410 <ld_clust>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	e7af      	b.n	8007950 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80079f0:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079f2:	e7ad      	b.n	8007950 <follow_path+0x68>
			if (res != FR_OK) break;
 80079f4:	bf00      	nop
 80079f6:	e002      	b.n	80079fe <follow_path+0x116>
				break;
 80079f8:	bf00      	nop
 80079fa:	e000      	b.n	80079fe <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80079fc:	bf00      	nop
			}
		}
	}

	return res;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295
 8007a14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d031      	beq.n	8007a82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e002      	b.n	8007a2c <get_ldnumber+0x24>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d903      	bls.n	8007a3c <get_ldnumber+0x34>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a3a:	d1f4      	bne.n	8007a26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a42:	d11c      	bne.n	8007a7e <get_ldnumber+0x76>
			tp = *path;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	60fa      	str	r2, [r7, #12]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	3b30      	subs	r3, #48	@ 0x30
 8007a54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d80e      	bhi.n	8007a7a <get_ldnumber+0x72>
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d10a      	bne.n	8007a7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d107      	bne.n	8007a7a <get_ldnumber+0x72>
					vol = (int)i;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	3301      	adds	r3, #1
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	e002      	b.n	8007a84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007a82:	693b      	ldr	r3, [r7, #16]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	70da      	strb	r2, [r3, #3]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fe ffac 	bl	8006a08 <move_window>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <check_fs+0x2a>
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	e038      	b.n	8007b2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3334      	adds	r3, #52	@ 0x34
 8007abe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fcee 	bl	80064a4 <ld_word>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	461a      	mov	r2, r3
 8007acc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d001      	beq.n	8007ad8 <check_fs+0x48>
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e029      	b.n	8007b2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ade:	2be9      	cmp	r3, #233	@ 0xe9
 8007ae0:	d009      	beq.n	8007af6 <check_fs+0x66>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ae8:	2beb      	cmp	r3, #235	@ 0xeb
 8007aea:	d11e      	bne.n	8007b2a <check_fs+0x9a>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007af2:	2b90      	cmp	r3, #144	@ 0x90
 8007af4:	d119      	bne.n	8007b2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3334      	adds	r3, #52	@ 0x34
 8007afa:	3336      	adds	r3, #54	@ 0x36
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe fcea 	bl	80064d6 <ld_dword>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007b08:	4a0a      	ldr	r2, [pc, #40]	@ (8007b34 <check_fs+0xa4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d101      	bne.n	8007b12 <check_fs+0x82>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e00c      	b.n	8007b2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3334      	adds	r3, #52	@ 0x34
 8007b16:	3352      	adds	r3, #82	@ 0x52
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fcdc 	bl	80064d6 <ld_dword>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4a05      	ldr	r2, [pc, #20]	@ (8007b38 <check_fs+0xa8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d101      	bne.n	8007b2a <check_fs+0x9a>
 8007b26:	2300      	movs	r3, #0
 8007b28:	e000      	b.n	8007b2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007b2a:	2302      	movs	r3, #2
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	00544146 	.word	0x00544146
 8007b38:	33544146 	.word	0x33544146

08007b3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b096      	sub	sp, #88	@ 0x58
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff ff59 	bl	8007a08 <get_ldnumber>
 8007b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	da01      	bge.n	8007b62 <find_volume+0x26>
 8007b5e:	230b      	movs	r3, #11
 8007b60:	e230      	b.n	8007fc4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007b62:	4aa1      	ldr	r2, [pc, #644]	@ (8007de8 <find_volume+0x2ac>)
 8007b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <find_volume+0x3a>
 8007b72:	230c      	movs	r3, #12
 8007b74:	e226      	b.n	8007fc4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	f023 0301 	bic.w	r3, r3, #1
 8007b82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01a      	beq.n	8007bc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe fbf1 	bl	8006378 <disk_status>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10c      	bne.n	8007bc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <find_volume+0x82>
 8007bae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007bba:	230a      	movs	r3, #10
 8007bbc:	e202      	b.n	8007fc4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e200      	b.n	8007fc4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd2:	785b      	ldrb	r3, [r3, #1]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fbe0 	bl	800639a <disk_initialize>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007be0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007bec:	2303      	movs	r3, #3
 8007bee:	e1e9      	b.n	8007fc4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <find_volume+0xca>
 8007bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007c02:	230a      	movs	r3, #10
 8007c04:	e1de      	b.n	8007fc4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007c0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c0e:	f7ff ff3f 	bl	8007a90 <check_fs>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007c18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d149      	bne.n	8007cb4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c20:	2300      	movs	r3, #0
 8007c22:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c24:	e01e      	b.n	8007c64 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c28:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007c34:	4413      	add	r3, r2
 8007c36:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d006      	beq.n	8007c50 <find_volume+0x114>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	3308      	adds	r3, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fc45 	bl	80064d6 <ld_dword>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	e000      	b.n	8007c52 <find_volume+0x116>
 8007c50:	2200      	movs	r2, #0
 8007c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	3358      	adds	r3, #88	@ 0x58
 8007c58:	443b      	add	r3, r7
 8007c5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c60:	3301      	adds	r3, #1
 8007c62:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d9dd      	bls.n	8007c26 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <find_volume+0x13e>
 8007c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c76:	3b01      	subs	r3, #1
 8007c78:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	3358      	adds	r3, #88	@ 0x58
 8007c80:	443b      	add	r3, r7
 8007c82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007c86:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <find_volume+0x15e>
 8007c8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c92:	f7ff fefd 	bl	8007a90 <check_fs>
 8007c96:	4603      	mov	r3, r0
 8007c98:	e000      	b.n	8007c9c <find_volume+0x160>
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ca0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d905      	bls.n	8007cb4 <find_volume+0x178>
 8007ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007caa:	3301      	adds	r3, #1
 8007cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d9e2      	bls.n	8007c7a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d101      	bne.n	8007cc0 <find_volume+0x184>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e181      	b.n	8007fc4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d901      	bls.n	8007ccc <find_volume+0x190>
 8007cc8:	230d      	movs	r3, #13
 8007cca:	e17b      	b.n	8007fc4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cce:	3334      	adds	r3, #52	@ 0x34
 8007cd0:	330b      	adds	r3, #11
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fbe6 	bl	80064a4 <ld_word>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cde:	d001      	beq.n	8007ce4 <find_volume+0x1a8>
 8007ce0:	230d      	movs	r3, #13
 8007ce2:	e16f      	b.n	8007fc4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	3334      	adds	r3, #52	@ 0x34
 8007ce8:	3316      	adds	r3, #22
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fbda 	bl	80064a4 <ld_word>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <find_volume+0x1cc>
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	3334      	adds	r3, #52	@ 0x34
 8007cfe:	3324      	adds	r3, #36	@ 0x24
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fbe8 	bl	80064d6 <ld_dword>
 8007d06:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d0c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	789b      	ldrb	r3, [r3, #2]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d005      	beq.n	8007d2c <find_volume+0x1f0>
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	789b      	ldrb	r3, [r3, #2]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d001      	beq.n	8007d2c <find_volume+0x1f0>
 8007d28:	230d      	movs	r3, #13
 8007d2a:	e14b      	b.n	8007fc4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	789b      	ldrb	r3, [r3, #2]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d34:	fb02 f303 	mul.w	r3, r2, r3
 8007d38:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d40:	461a      	mov	r2, r3
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d48:	895b      	ldrh	r3, [r3, #10]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <find_volume+0x224>
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d50:	895b      	ldrh	r3, [r3, #10]
 8007d52:	461a      	mov	r2, r3
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	895b      	ldrh	r3, [r3, #10]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <find_volume+0x228>
 8007d60:	230d      	movs	r3, #13
 8007d62:	e12f      	b.n	8007fc4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	3334      	adds	r3, #52	@ 0x34
 8007d68:	3311      	adds	r3, #17
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fb9a 	bl	80064a4 <ld_word>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	891b      	ldrh	r3, [r3, #8]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <find_volume+0x24e>
 8007d86:	230d      	movs	r3, #13
 8007d88:	e11c      	b.n	8007fc4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	3334      	adds	r3, #52	@ 0x34
 8007d8e:	3313      	adds	r3, #19
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe fb87 	bl	80064a4 <ld_word>
 8007d96:	4603      	mov	r3, r0
 8007d98:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d106      	bne.n	8007dae <find_volume+0x272>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da2:	3334      	adds	r3, #52	@ 0x34
 8007da4:	3320      	adds	r3, #32
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fb95 	bl	80064d6 <ld_dword>
 8007dac:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db0:	3334      	adds	r3, #52	@ 0x34
 8007db2:	330e      	adds	r3, #14
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fb75 	bl	80064a4 <ld_word>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007dbe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <find_volume+0x28c>
 8007dc4:	230d      	movs	r3, #13
 8007dc6:	e0fd      	b.n	8007fc4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007dc8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dcc:	4413      	add	r3, r2
 8007dce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dd0:	8912      	ldrh	r2, [r2, #8]
 8007dd2:	0912      	lsrs	r2, r2, #4
 8007dd4:	b292      	uxth	r2, r2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d204      	bcs.n	8007dec <find_volume+0x2b0>
 8007de2:	230d      	movs	r3, #13
 8007de4:	e0ee      	b.n	8007fc4 <find_volume+0x488>
 8007de6:	bf00      	nop
 8007de8:	200006cc 	.word	0x200006cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007dec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007df4:	8952      	ldrh	r2, [r2, #10]
 8007df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dfa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <find_volume+0x2ca>
 8007e02:	230d      	movs	r3, #13
 8007e04:	e0de      	b.n	8007fc4 <find_volume+0x488>
		fmt = FS_FAT32;
 8007e06:	2303      	movs	r3, #3
 8007e08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d802      	bhi.n	8007e1c <find_volume+0x2e0>
 8007e16:	2302      	movs	r3, #2
 8007e18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d802      	bhi.n	8007e2c <find_volume+0x2f0>
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	1c9a      	adds	r2, r3, #2
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e38:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007e3a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e3e:	441a      	add	r2, r3
 8007e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e42:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007e44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	441a      	add	r2, r3
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8007e4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d11e      	bne.n	8007e94 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	3334      	adds	r3, #52	@ 0x34
 8007e5a:	332a      	adds	r3, #42	@ 0x2a
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe fb21 	bl	80064a4 <ld_word>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <find_volume+0x330>
 8007e68:	230d      	movs	r3, #13
 8007e6a:	e0ab      	b.n	8007fc4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	891b      	ldrh	r3, [r3, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <find_volume+0x33c>
 8007e74:	230d      	movs	r3, #13
 8007e76:	e0a5      	b.n	8007fc4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7a:	3334      	adds	r3, #52	@ 0x34
 8007e7c:	332c      	adds	r3, #44	@ 0x2c
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fb29 	bl	80064d6 <ld_dword>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e92:	e01f      	b.n	8007ed4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	891b      	ldrh	r3, [r3, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <find_volume+0x364>
 8007e9c:	230d      	movs	r3, #13
 8007e9e:	e091      	b.n	8007fc4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea6:	441a      	add	r2, r3
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007eac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d103      	bne.n	8007ebc <find_volume+0x380>
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	e00a      	b.n	8007ed2 <find_volume+0x396>
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebe:	699a      	ldr	r2, [r3, #24]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	4413      	add	r3, r2
 8007ec6:	085a      	lsrs	r2, r3, #1
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007ed2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eda:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007ede:	0a5b      	lsrs	r3, r3, #9
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d201      	bcs.n	8007ee8 <find_volume+0x3ac>
 8007ee4:	230d      	movs	r3, #13
 8007ee6:	e06d      	b.n	8007fc4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	611a      	str	r2, [r3, #16]
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	2280      	movs	r2, #128	@ 0x80
 8007efc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007efe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d149      	bne.n	8007f9a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	3334      	adds	r3, #52	@ 0x34
 8007f0a:	3330      	adds	r3, #48	@ 0x30
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fac9 	bl	80064a4 <ld_word>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d140      	bne.n	8007f9a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f20:	f7fe fd72 	bl	8006a08 <move_window>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d137      	bne.n	8007f9a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f32:	3334      	adds	r3, #52	@ 0x34
 8007f34:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe fab3 	bl	80064a4 <ld_word>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	461a      	mov	r2, r3
 8007f42:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d127      	bne.n	8007f9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	3334      	adds	r3, #52	@ 0x34
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fac1 	bl	80064d6 <ld_dword>
 8007f54:	4603      	mov	r3, r0
 8007f56:	4a1d      	ldr	r2, [pc, #116]	@ (8007fcc <find_volume+0x490>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d11e      	bne.n	8007f9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	3334      	adds	r3, #52	@ 0x34
 8007f60:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe fab6 	bl	80064d6 <ld_dword>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4a18      	ldr	r2, [pc, #96]	@ (8007fd0 <find_volume+0x494>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d113      	bne.n	8007f9a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	3334      	adds	r3, #52	@ 0x34
 8007f76:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe faab 	bl	80064d6 <ld_dword>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f84:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	3334      	adds	r3, #52	@ 0x34
 8007f8a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe faa1 	bl	80064d6 <ld_dword>
 8007f94:	4602      	mov	r2, r0
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007fa0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <find_volume+0x498>)
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <find_volume+0x498>)
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <find_volume+0x498>)
 8007fb0:	881a      	ldrh	r2, [r3, #0]
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb8:	2200      	movs	r2, #0
 8007fba:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007fbc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fbe:	f7fe fcbb 	bl	8006938 <clear_lock>
#endif
	return FR_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3758      	adds	r7, #88	@ 0x58
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	41615252 	.word	0x41615252
 8007fd0:	61417272 	.word	0x61417272
 8007fd4:	200006d0 	.word	0x200006d0

08007fd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007fe2:	2309      	movs	r3, #9
 8007fe4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01c      	beq.n	8008026 <validate+0x4e>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d018      	beq.n	8008026 <validate+0x4e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d013      	beq.n	8008026 <validate+0x4e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	889a      	ldrh	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	88db      	ldrh	r3, [r3, #6]
 8008008:	429a      	cmp	r2, r3
 800800a:	d10c      	bne.n	8008026 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	785b      	ldrb	r3, [r3, #1]
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe f9b0 	bl	8006378 <disk_status>
 8008018:	4603      	mov	r3, r0
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <validate+0x4e>
			res = FR_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <validate+0x5a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	e000      	b.n	8008034 <validate+0x5c>
 8008032:	2300      	movs	r3, #0
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	6013      	str	r3, [r2, #0]
	return res;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	4613      	mov	r3, r2
 8008050:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008056:	f107 0310 	add.w	r3, r7, #16
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fcd4 	bl	8007a08 <get_ldnumber>
 8008060:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	2b00      	cmp	r3, #0
 8008066:	da01      	bge.n	800806c <f_mount+0x28>
 8008068:	230b      	movs	r3, #11
 800806a:	e02b      	b.n	80080c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800806c:	4a17      	ldr	r2, [pc, #92]	@ (80080cc <f_mount+0x88>)
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008074:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800807c:	69b8      	ldr	r0, [r7, #24]
 800807e:	f7fe fc5b 	bl	8006938 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	490d      	ldr	r1, [pc, #52]	@ (80080cc <f_mount+0x88>)
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <f_mount+0x66>
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d001      	beq.n	80080ae <f_mount+0x6a>
 80080aa:	2300      	movs	r3, #0
 80080ac:	e00a      	b.n	80080c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80080ae:	f107 010c 	add.w	r1, r7, #12
 80080b2:	f107 0308 	add.w	r3, r7, #8
 80080b6:	2200      	movs	r2, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff fd3f 	bl	8007b3c <find_volume>
 80080be:	4603      	mov	r3, r0
 80080c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	200006cc 	.word	0x200006cc

080080d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b098      	sub	sp, #96	@ 0x60
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <f_open+0x18>
 80080e4:	2309      	movs	r3, #9
 80080e6:	e1a9      	b.n	800843c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80080f0:	79fa      	ldrb	r2, [r7, #7]
 80080f2:	f107 0110 	add.w	r1, r7, #16
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff fd1e 	bl	8007b3c <find_volume>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008106:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 818d 	bne.w	800842a <f_open+0x35a>
		dj.obj.fs = fs;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	f107 0314 	add.w	r3, r7, #20
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff fbe3 	bl	80078e8 <follow_path>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008128:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800812c:	2b00      	cmp	r3, #0
 800812e:	d118      	bne.n	8008162 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008130:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008134:	b25b      	sxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	da03      	bge.n	8008142 <f_open+0x72>
				res = FR_INVALID_NAME;
 800813a:	2306      	movs	r3, #6
 800813c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008140:	e00f      	b.n	8008162 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	2b01      	cmp	r3, #1
 8008146:	bf8c      	ite	hi
 8008148:	2301      	movhi	r3, #1
 800814a:	2300      	movls	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	f107 0314 	add.w	r3, r7, #20
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe faa6 	bl	80066a8 <chk_lock>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	f003 031c 	and.w	r3, r3, #28
 8008168:	2b00      	cmp	r3, #0
 800816a:	d07f      	beq.n	800826c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800816c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008170:	2b00      	cmp	r3, #0
 8008172:	d017      	beq.n	80081a4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008174:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008178:	2b04      	cmp	r3, #4
 800817a:	d10e      	bne.n	800819a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800817c:	f7fe faf0 	bl	8006760 <enq_lock>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d006      	beq.n	8008194 <f_open+0xc4>
 8008186:	f107 0314 	add.w	r3, r7, #20
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fa31 	bl	80075f2 <dir_register>
 8008190:	4603      	mov	r3, r0
 8008192:	e000      	b.n	8008196 <f_open+0xc6>
 8008194:	2312      	movs	r3, #18
 8008196:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	f043 0308 	orr.w	r3, r3, #8
 80081a0:	71fb      	strb	r3, [r7, #7]
 80081a2:	e010      	b.n	80081c6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80081a4:	7ebb      	ldrb	r3, [r7, #26]
 80081a6:	f003 0311 	and.w	r3, r3, #17
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <f_open+0xe6>
					res = FR_DENIED;
 80081ae:	2307      	movs	r3, #7
 80081b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80081b4:	e007      	b.n	80081c6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <f_open+0xf6>
 80081c0:	2308      	movs	r3, #8
 80081c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80081c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d168      	bne.n	80082a0 <f_open+0x1d0>
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	f003 0308 	and.w	r3, r3, #8
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d063      	beq.n	80082a0 <f_open+0x1d0>
				dw = GET_FATTIME();
 80081d8:	f7fe f8c6 	bl	8006368 <get_fattime>
 80081dc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80081de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e0:	330e      	adds	r3, #14
 80081e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe f9b4 	bl	8006552 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80081ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ec:	3316      	adds	r3, #22
 80081ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe f9ae 	bl	8006552 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80081f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f8:	330b      	adds	r3, #11
 80081fa:	2220      	movs	r2, #32
 80081fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff f903 	bl	8007410 <ld_clust>
 800820a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008210:	2200      	movs	r2, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff f91b 	bl	800744e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821a:	331c      	adds	r3, #28
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe f997 	bl	8006552 <st_dword>
					fs->wflag = 1;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2201      	movs	r2, #1
 8008228:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800822a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d037      	beq.n	80082a0 <f_open+0x1d0>
						dw = fs->winsect;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008234:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008236:	f107 0314 	add.w	r3, r7, #20
 800823a:	2200      	movs	r2, #0
 800823c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fe2e 	bl	8006ea0 <remove_chain>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800824a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800824e:	2b00      	cmp	r3, #0
 8008250:	d126      	bne.n	80082a0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fbd6 	bl	8006a08 <move_window>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008266:	3a01      	subs	r2, #1
 8008268:	60da      	str	r2, [r3, #12]
 800826a:	e019      	b.n	80082a0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800826c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008270:	2b00      	cmp	r3, #0
 8008272:	d115      	bne.n	80082a0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008274:	7ebb      	ldrb	r3, [r7, #26]
 8008276:	f003 0310 	and.w	r3, r3, #16
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <f_open+0x1b6>
					res = FR_NO_FILE;
 800827e:	2304      	movs	r3, #4
 8008280:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008284:	e00c      	b.n	80082a0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <f_open+0x1d0>
 8008290:	7ebb      	ldrb	r3, [r7, #26]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <f_open+0x1d0>
						res = FR_DENIED;
 800829a:	2307      	movs	r3, #7
 800829c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80082a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d126      	bne.n	80082f6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80082c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	bf8c      	ite	hi
 80082ce:	2301      	movhi	r3, #1
 80082d0:	2300      	movls	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	f107 0314 	add.w	r3, r7, #20
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fa61 	bl	80067a4 <inc_lock>
 80082e2:	4602      	mov	r2, r0
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <f_open+0x226>
 80082f0:	2302      	movs	r3, #2
 80082f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80082f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f040 8095 	bne.w	800842a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff f882 	bl	8007410 <ld_clust>
 800830c:	4602      	mov	r2, r0
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	331c      	adds	r3, #28
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe f8dd 	bl	80064d6 <ld_dword>
 800831c:	4602      	mov	r2, r0
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	88da      	ldrh	r2, [r3, #6]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	79fa      	ldrb	r2, [r7, #7]
 800833a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3330      	adds	r3, #48	@ 0x30
 8008352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008356:	2100      	movs	r1, #0
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe f947 	bl	80065ec <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d060      	beq.n	800842a <f_open+0x35a>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d05c      	beq.n	800842a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	895b      	ldrh	r3, [r3, #10]
 800837c:	025b      	lsls	r3, r3, #9
 800837e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	657b      	str	r3, [r7, #84]	@ 0x54
 800838c:	e016      	b.n	80083bc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fbf3 	bl	8006b7e <get_fat>
 8008398:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800839a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800839c:	2b01      	cmp	r3, #1
 800839e:	d802      	bhi.n	80083a6 <f_open+0x2d6>
 80083a0:	2302      	movs	r3, #2
 80083a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80083a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d102      	bne.n	80083b4 <f_open+0x2e4>
 80083ae:	2301      	movs	r3, #1
 80083b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80083b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80083bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <f_open+0x2fc>
 80083c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d8e0      	bhi.n	800838e <f_open+0x2be>
				}
				fp->clust = clst;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80083d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d127      	bne.n	800842a <f_open+0x35a>
 80083da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d022      	beq.n	800842a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fba9 	bl	8006b40 <clust2sect>
 80083ee:	6478      	str	r0, [r7, #68]	@ 0x44
 80083f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <f_open+0x32e>
						res = FR_INT_ERR;
 80083f6:	2302      	movs	r3, #2
 80083f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80083fc:	e015      	b.n	800842a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80083fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008400:	0a5a      	lsrs	r2, r3, #9
 8008402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	7858      	ldrb	r0, [r3, #1]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1a      	ldr	r2, [r3, #32]
 8008418:	2301      	movs	r3, #1
 800841a:	f7fd ffd4 	bl	80063c6 <disk_read>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <f_open+0x35a>
 8008424:	2301      	movs	r3, #1
 8008426:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800842a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <f_open+0x368>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008438:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800843c:	4618      	mov	r0, r3
 800843e:	3760      	adds	r7, #96	@ 0x60
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	@ 0x38
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f107 0214 	add.w	r2, r7, #20
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fdb7 	bl	8007fd8 <validate>
 800846a:	4603      	mov	r3, r0
 800846c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008470:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008474:	2b00      	cmp	r3, #0
 8008476:	d107      	bne.n	8008488 <f_read+0x44>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	7d5b      	ldrb	r3, [r3, #21]
 800847c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008480:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <f_read+0x4a>
 8008488:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800848c:	e115      	b.n	80086ba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	7d1b      	ldrb	r3, [r3, #20]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <f_read+0x5a>
 800849a:	2307      	movs	r3, #7
 800849c:	e10d      	b.n	80086ba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	f240 80fe 	bls.w	80086b0 <f_read+0x26c>
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80084b8:	e0fa      	b.n	80086b0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f040 80c6 	bne.w	8008654 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	0a5b      	lsrs	r3, r3, #9
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	8952      	ldrh	r2, [r2, #10]
 80084d2:	3a01      	subs	r2, #1
 80084d4:	4013      	ands	r3, r2
 80084d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d12f      	bne.n	800853e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d103      	bne.n	80084ee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80084ec:	e013      	b.n	8008516 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d007      	beq.n	8008506 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	4619      	mov	r1, r3
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7fe fdcc 	bl	800709a <clmt_clust>
 8008502:	6338      	str	r0, [r7, #48]	@ 0x30
 8008504:	e007      	b.n	8008516 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f7fe fb35 	bl	8006b7e <get_fat>
 8008514:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	2b01      	cmp	r3, #1
 800851a:	d804      	bhi.n	8008526 <f_read+0xe2>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2202      	movs	r2, #2
 8008520:	755a      	strb	r2, [r3, #21]
 8008522:	2302      	movs	r3, #2
 8008524:	e0c9      	b.n	80086ba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852c:	d104      	bne.n	8008538 <f_read+0xf4>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	755a      	strb	r2, [r3, #21]
 8008534:	2301      	movs	r3, #1
 8008536:	e0c0      	b.n	80086ba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800853c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fe fafa 	bl	8006b40 <clust2sect>
 800854c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <f_read+0x11a>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2202      	movs	r2, #2
 8008558:	755a      	strb	r2, [r3, #21]
 800855a:	2302      	movs	r3, #2
 800855c:	e0ad      	b.n	80086ba <f_read+0x276>
			sect += csect;
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	0a5b      	lsrs	r3, r3, #9
 800856a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	2b00      	cmp	r3, #0
 8008570:	d039      	beq.n	80085e6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008576:	4413      	add	r3, r2
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	8952      	ldrh	r2, [r2, #10]
 800857c:	4293      	cmp	r3, r2
 800857e:	d905      	bls.n	800858c <f_read+0x148>
					cc = fs->csize - csect;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	895b      	ldrh	r3, [r3, #10]
 8008584:	461a      	mov	r2, r3
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	7858      	ldrb	r0, [r3, #1]
 8008590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008596:	f7fd ff16 	bl	80063c6 <disk_read>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <f_read+0x166>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	755a      	strb	r2, [r3, #21]
 80085a6:	2301      	movs	r3, #1
 80085a8:	e087      	b.n	80086ba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	7d1b      	ldrb	r3, [r3, #20]
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da14      	bge.n	80085de <f_read+0x19a>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1a      	ldr	r2, [r3, #32]
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085be:	429a      	cmp	r2, r3
 80085c0:	d90d      	bls.n	80085de <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a1a      	ldr	r2, [r3, #32]
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	025b      	lsls	r3, r3, #9
 80085cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ce:	18d0      	adds	r0, r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3330      	adds	r3, #48	@ 0x30
 80085d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085d8:	4619      	mov	r1, r3
 80085da:	f7fd ffe6 	bl	80065aa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80085de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e0:	025b      	lsls	r3, r3, #9
 80085e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80085e4:	e050      	b.n	8008688 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d02e      	beq.n	800864e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	7d1b      	ldrb	r3, [r3, #20]
 80085f4:	b25b      	sxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da18      	bge.n	800862c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	7858      	ldrb	r0, [r3, #1]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a1a      	ldr	r2, [r3, #32]
 8008608:	2301      	movs	r3, #1
 800860a:	f7fd fef8 	bl	80063fe <disk_write>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <f_read+0x1da>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	755a      	strb	r2, [r3, #21]
 800861a:	2301      	movs	r3, #1
 800861c:	e04d      	b.n	80086ba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	7d1b      	ldrb	r3, [r3, #20]
 8008622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	7858      	ldrb	r0, [r3, #1]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008636:	2301      	movs	r3, #1
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	f7fd fec4 	bl	80063c6 <disk_read>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <f_read+0x20a>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	755a      	strb	r2, [r3, #21]
 800864a:	2301      	movs	r3, #1
 800864c:	e035      	b.n	80086ba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008660:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	429a      	cmp	r2, r3
 8008668:	d901      	bls.n	800866e <f_read+0x22a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867c:	4413      	add	r3, r2
 800867e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008680:	4619      	mov	r1, r3
 8008682:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008684:	f7fd ff91 	bl	80065aa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800868a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868c:	4413      	add	r3, r2
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008696:	441a      	add	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	619a      	str	r2, [r3, #24]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	441a      	add	r2, r3
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f47f af01 	bne.w	80084ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3738      	adds	r7, #56	@ 0x38
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b08c      	sub	sp, #48	@ 0x30
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	607a      	str	r2, [r7, #4]
 80086ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f107 0210 	add.w	r2, r7, #16
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fc78 	bl	8007fd8 <validate>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80086ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <f_write+0x44>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	7d5b      	ldrb	r3, [r3, #21]
 80086fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80086fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <f_write+0x4a>
 8008706:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800870a:	e14b      	b.n	80089a4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	7d1b      	ldrb	r3, [r3, #20]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <f_write+0x5a>
 8008718:	2307      	movs	r3, #7
 800871a:	e143      	b.n	80089a4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	441a      	add	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	429a      	cmp	r2, r3
 800872a:	f080 812d 	bcs.w	8008988 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	43db      	mvns	r3, r3
 8008734:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008736:	e127      	b.n	8008988 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 80e3 	bne.w	800890c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	0a5b      	lsrs	r3, r3, #9
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	8952      	ldrh	r2, [r2, #10]
 8008750:	3a01      	subs	r2, #1
 8008752:	4013      	ands	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d143      	bne.n	80087e4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10c      	bne.n	800877e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	2b00      	cmp	r3, #0
 800876e:	d11a      	bne.n	80087a6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fbf8 	bl	8006f6a <create_chain>
 800877a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800877c:	e013      	b.n	80087a6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008782:	2b00      	cmp	r3, #0
 8008784:	d007      	beq.n	8008796 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	4619      	mov	r1, r3
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7fe fc84 	bl	800709a <clmt_clust>
 8008792:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008794:	e007      	b.n	80087a6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7fe fbe3 	bl	8006f6a <create_chain>
 80087a4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 80f2 	beq.w	8008992 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80087ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d104      	bne.n	80087be <f_write+0xfc>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2202      	movs	r2, #2
 80087b8:	755a      	strb	r2, [r3, #21]
 80087ba:	2302      	movs	r3, #2
 80087bc:	e0f2      	b.n	80089a4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c4:	d104      	bne.n	80087d0 <f_write+0x10e>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	755a      	strb	r2, [r3, #21]
 80087cc:	2301      	movs	r3, #1
 80087ce:	e0e9      	b.n	80089a4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <f_write+0x122>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	7d1b      	ldrb	r3, [r3, #20]
 80087e8:	b25b      	sxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da18      	bge.n	8008820 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	7858      	ldrb	r0, [r3, #1]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a1a      	ldr	r2, [r3, #32]
 80087fc:	2301      	movs	r3, #1
 80087fe:	f7fd fdfe 	bl	80063fe <disk_write>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <f_write+0x150>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2201      	movs	r2, #1
 800880c:	755a      	strb	r2, [r3, #21]
 800880e:	2301      	movs	r3, #1
 8008810:	e0c8      	b.n	80089a4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	7d1b      	ldrb	r3, [r3, #20]
 8008816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800881a:	b2da      	uxtb	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f7fe f989 	bl	8006b40 <clust2sect>
 800882e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d104      	bne.n	8008840 <f_write+0x17e>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2202      	movs	r2, #2
 800883a:	755a      	strb	r2, [r3, #21]
 800883c:	2302      	movs	r3, #2
 800883e:	e0b1      	b.n	80089a4 <f_write+0x2e2>
			sect += csect;
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	4413      	add	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	0a5b      	lsrs	r3, r3, #9
 800884c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d03c      	beq.n	80088ce <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	4413      	add	r3, r2
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	8952      	ldrh	r2, [r2, #10]
 800885e:	4293      	cmp	r3, r2
 8008860:	d905      	bls.n	800886e <f_write+0x1ac>
					cc = fs->csize - csect;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	895b      	ldrh	r3, [r3, #10]
 8008866:	461a      	mov	r2, r3
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	7858      	ldrb	r0, [r3, #1]
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	69f9      	ldr	r1, [r7, #28]
 8008878:	f7fd fdc1 	bl	80063fe <disk_write>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d004      	beq.n	800888c <f_write+0x1ca>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	755a      	strb	r2, [r3, #21]
 8008888:	2301      	movs	r3, #1
 800888a:	e08b      	b.n	80089a4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a1a      	ldr	r2, [r3, #32]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	6a3a      	ldr	r2, [r7, #32]
 8008896:	429a      	cmp	r2, r3
 8008898:	d915      	bls.n	80088c6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a1a      	ldr	r2, [r3, #32]
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	025b      	lsls	r3, r3, #9
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	4413      	add	r3, r2
 80088ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088b2:	4619      	mov	r1, r3
 80088b4:	f7fd fe79 	bl	80065aa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	7d1b      	ldrb	r3, [r3, #20]
 80088bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	025b      	lsls	r3, r3, #9
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80088cc:	e03f      	b.n	800894e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d016      	beq.n	8008906 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d210      	bcs.n	8008906 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	7858      	ldrb	r0, [r3, #1]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088ee:	2301      	movs	r3, #1
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	f7fd fd68 	bl	80063c6 <disk_read>
 80088f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	755a      	strb	r2, [r3, #21]
 8008902:	2301      	movs	r3, #1
 8008904:	e04e      	b.n	80089a4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008914:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008918:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800891a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	429a      	cmp	r2, r3
 8008920:	d901      	bls.n	8008926 <f_write+0x264>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008934:	4413      	add	r3, r2
 8008936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008938:	69f9      	ldr	r1, [r7, #28]
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd fe35 	bl	80065aa <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	7d1b      	ldrb	r3, [r3, #20]
 8008944:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008948:	b2da      	uxtb	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	4413      	add	r3, r2
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	619a      	str	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	429a      	cmp	r2, r3
 800896c:	bf38      	it	cc
 800896e:	461a      	movcc	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	60da      	str	r2, [r3, #12]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	441a      	add	r2, r3
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	f47f aed4 	bne.w	8008738 <f_write+0x76>
 8008990:	e000      	b.n	8008994 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008992:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	7d1b      	ldrb	r3, [r3, #20]
 8008998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899c:	b2da      	uxtb	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3730      	adds	r7, #48	@ 0x30
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f107 0208 	add.w	r2, r7, #8
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff fb0b 	bl	8007fd8 <validate>
 80089c2:	4603      	mov	r3, r0
 80089c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d168      	bne.n	8008a9e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	7d1b      	ldrb	r3, [r3, #20]
 80089d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d062      	beq.n	8008a9e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	7d1b      	ldrb	r3, [r3, #20]
 80089dc:	b25b      	sxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	da15      	bge.n	8008a0e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	7858      	ldrb	r0, [r3, #1]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1a      	ldr	r2, [r3, #32]
 80089f0:	2301      	movs	r3, #1
 80089f2:	f7fd fd04 	bl	80063fe <disk_write>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <f_sync+0x54>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e04f      	b.n	8008aa0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7d1b      	ldrb	r3, [r3, #20]
 8008a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008a0e:	f7fd fcab 	bl	8006368 <get_fattime>
 8008a12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	f7fd fff3 	bl	8006a08 <move_window>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d138      	bne.n	8008a9e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	330b      	adds	r3, #11
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	330b      	adds	r3, #11
 8008a3c:	f042 0220 	orr.w	r2, r2, #32
 8008a40:	b2d2      	uxtb	r2, r2
 8008a42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68f9      	ldr	r1, [r7, #12]
 8008a50:	f7fe fcfd 	bl	800744e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f103 021c 	add.w	r2, r3, #28
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7fd fd76 	bl	8006552 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3316      	adds	r3, #22
 8008a6a:	6939      	ldr	r1, [r7, #16]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fd fd70 	bl	8006552 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3312      	adds	r3, #18
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fd fd4f 	bl	800651c <st_word>
					fs->wflag = 1;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2201      	movs	r2, #1
 8008a82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fd ffec 	bl	8006a64 <sync_fs>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7d1b      	ldrb	r3, [r3, #20]
 8008a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff ff7b 	bl	80089ac <f_sync>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d118      	bne.n	8008af2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f107 0208 	add.w	r2, r7, #8
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff fa85 	bl	8007fd8 <validate>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10c      	bne.n	8008af2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fd feef 	bl	80068c0 <dec_lock>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008afc:	b590      	push	{r4, r7, lr}
 8008afe:	b091      	sub	sp, #68	@ 0x44
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008b04:	f107 0108 	add.w	r1, r7, #8
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff f815 	bl	8007b3c <find_volume>
 8008b12:	4603      	mov	r3, r0
 8008b14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8008b18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d131      	bne.n	8008b84 <f_chdir+0x88>
		dj.obj.fs = fs;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	f107 030c 	add.w	r3, r7, #12
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fedb 	bl	80078e8 <follow_path>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8008b38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11a      	bne.n	8008b76 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008b40:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da03      	bge.n	8008b52 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	615a      	str	r2, [r3, #20]
 8008b50:	e011      	b.n	8008b76 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8008b52:	7cbb      	ldrb	r3, [r7, #18]
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b60:	68bc      	ldr	r4, [r7, #8]
 8008b62:	4611      	mov	r1, r2
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fc53 	bl	8007410 <ld_clust>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6163      	str	r3, [r4, #20]
 8008b6e:	e002      	b.n	8008b76 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8008b70:	2305      	movs	r3, #5
 8008b72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008b76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d102      	bne.n	8008b84 <f_chdir+0x88>
 8008b7e:	2305      	movs	r3, #5
 8008b80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	LEAVE_FF(fs, res);
 8008b84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3744      	adds	r7, #68	@ 0x44
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd90      	pop	{r4, r7, pc}

08008b90 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <f_opendir+0x14>
 8008ba0:	2309      	movs	r3, #9
 8008ba2:	e064      	b.n	8008c6e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008ba8:	f107 010c 	add.w	r1, r7, #12
 8008bac:	463b      	mov	r3, r7
 8008bae:	2200      	movs	r2, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe ffc3 	bl	8007b3c <find_volume>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d14f      	bne.n	8008c60 <f_opendir+0xd0>
		obj->fs = fs;
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fe fe8c 	bl	80078e8 <follow_path>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d13d      	bne.n	8008c56 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008be0:	b25b      	sxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	db12      	blt.n	8008c0c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	799b      	ldrb	r3, [r3, #6]
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00a      	beq.n	8008c08 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fe fc08 	bl	8007410 <ld_clust>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	609a      	str	r2, [r3, #8]
 8008c06:	e001      	b.n	8008c0c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008c08:	2305      	movs	r3, #5
 8008c0a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d121      	bne.n	8008c56 <f_opendir+0xc6>
				obj->id = fs->id;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	88da      	ldrh	r2, [r3, #6]
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fe fa70 	bl	8007102 <dir_sdi>
 8008c22:	4603      	mov	r3, r0
 8008c24:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d114      	bne.n	8008c56 <f_opendir+0xc6>
					if (obj->sclust) {
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00d      	beq.n	8008c50 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008c34:	2100      	movs	r1, #0
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fd fdb4 	bl	80067a4 <inc_lock>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <f_opendir+0xc6>
 8008c4a:	2312      	movs	r3, #18
 8008c4c:	75fb      	strb	r3, [r7, #23]
 8008c4e:	e002      	b.n	8008c56 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2200      	movs	r2, #0
 8008c54:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d101      	bne.n	8008c60 <f_opendir+0xd0>
 8008c5c:	2305      	movs	r3, #5
 8008c5e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <f_opendir+0xdc>
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f107 0208 	add.w	r2, r7, #8
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff f9a6 	bl	8007fd8 <validate>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d110      	bne.n	8008cb8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d006      	beq.n	8008cac <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fe0c 	bl	80068c0 <dec_lock>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f107 0208 	add.w	r2, r7, #8
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff f97f 	bl	8007fd8 <validate>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d126      	bne.n	8008d32 <f_readdir+0x70>
		if (!fno) {
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008cea:	2100      	movs	r1, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7fe fa08 	bl	8007102 <dir_sdi>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	e01c      	b.n	8008d32 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7fe fbc7 	bl	800748e <dir_read>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d101      	bne.n	8008d0e <f_readdir+0x4c>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10e      	bne.n	8008d32 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fe fcbb 	bl	8007692 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fe fa6a 	bl	80071f8 <dir_next>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d101      	bne.n	8008d32 <f_readdir+0x70>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b092      	sub	sp, #72	@ 0x48
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008d48:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008d4c:	f107 030c 	add.w	r3, r7, #12
 8008d50:	2200      	movs	r2, #0
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fef2 	bl	8007b3c <find_volume>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f040 8099 	bne.w	8008e9a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	3b02      	subs	r3, #2
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d804      	bhi.n	8008d86 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	e089      	b.n	8008e9a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d128      	bne.n	8008de4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d92:	2302      	movs	r3, #2
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d98:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d9a:	f107 0314 	add.w	r3, r7, #20
 8008d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fd feec 	bl	8006b7e <get_fat>
 8008da6:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dae:	d103      	bne.n	8008db8 <f_getfree+0x7c>
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008db6:	e063      	b.n	8008e80 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d103      	bne.n	8008dc6 <f_getfree+0x8a>
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008dc4:	e05c      	b.n	8008e80 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <f_getfree+0x96>
 8008dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dce:	3301      	adds	r3, #1
 8008dd0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d3db      	bcc.n	8008d9a <f_getfree+0x5e>
 8008de2:	e04d      	b.n	8008e80 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dee:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df4:	2300      	movs	r3, #0
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d113      	bne.n	8008e26 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008e06:	4619      	mov	r1, r3
 8008e08:	f7fd fdfe 	bl	8006a08 <move_window>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008e12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d131      	bne.n	8008e7e <f_getfree+0x142>
							p = fs->win;
 8008e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1c:	3334      	adds	r3, #52	@ 0x34
 8008e1e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e24:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d10f      	bne.n	8008e4e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e30:	f7fd fb38 	bl	80064a4 <ld_word>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <f_getfree+0x104>
 8008e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e42:	3302      	adds	r3, #2
 8008e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e48:	3b02      	subs	r3, #2
 8008e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4c:	e010      	b.n	8008e70 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008e4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e50:	f7fd fb41 	bl	80064d6 <ld_dword>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <f_getfree+0x128>
 8008e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e60:	3301      	adds	r3, #1
 8008e62:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e66:	3304      	adds	r3, #4
 8008e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e72:	3b01      	subs	r3, #1
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1bd      	bne.n	8008df8 <f_getfree+0xbc>
 8008e7c:	e000      	b.n	8008e80 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e7e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e84:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e8a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8e:	791a      	ldrb	r2, [r3, #4]
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e9a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3748      	adds	r7, #72	@ 0x48
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b09e      	sub	sp, #120	@ 0x78
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008eb2:	f107 010c 	add.w	r1, r7, #12
 8008eb6:	1d3b      	adds	r3, r7, #4
 8008eb8:	2202      	movs	r2, #2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fe3e 	bl	8007b3c <find_volume>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008eca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 80a4 	bne.w	800901c <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fd03 	bl	80078e8 <follow_path>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8008ee8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d108      	bne.n	8008f02 <f_unlink+0x5c>
 8008ef0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008ef4:	f003 0320 	and.w	r3, r3, #32
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8008efc:	2306      	movs	r3, #6
 8008efe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008f02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d108      	bne.n	8008f1c <f_unlink+0x76>
 8008f0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008f0e:	2102      	movs	r1, #2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fd fbc9 	bl	80066a8 <chk_lock>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008f1c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d17b      	bne.n	800901c <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008f24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008f28:	b25b      	sxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da03      	bge.n	8008f36 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008f2e:	2306      	movs	r3, #6
 8008f30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008f34:	e008      	b.n	8008f48 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008f36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008f42:	2307      	movs	r3, #7
 8008f44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8008f48:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d13d      	bne.n	8008fcc <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fa5a 	bl	8007410 <ld_clust>
 8008f5c:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008f5e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f62:	f003 0310 	and.w	r3, r3, #16
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d030      	beq.n	8008fcc <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d103      	bne.n	8008f7c <f_unlink+0xd6>
						res = FR_DENIED;
 8008f74:	2307      	movs	r3, #7
 8008f76:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008f7a:	e027      	b.n	8008fcc <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8008f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f82:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe f8b9 	bl	8007102 <dir_sdi>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8008f96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d116      	bne.n	8008fcc <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008f9e:	f107 0310 	add.w	r3, r7, #16
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fa72 	bl	800748e <dir_read>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008fb0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d102      	bne.n	8008fbe <f_unlink+0x118>
 8008fb8:	2307      	movs	r3, #7
 8008fba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008fbe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d102      	bne.n	8008fcc <f_unlink+0x126>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8008fcc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d123      	bne.n	800901c <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008fd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fb3c 	bl	8007656 <dir_remove>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008fe4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10c      	bne.n	8009006 <f_unlink+0x160>
 8008fec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008ff2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fd ff50 	bl	8006ea0 <remove_chain>
 8009000:	4603      	mov	r3, r0
 8009002:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009006:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <f_unlink+0x176>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4618      	mov	r0, r3
 8009012:	f7fd fd27 	bl	8006a64 <sync_fs>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800901c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8009020:	4618      	mov	r0, r3
 8009022:	3778      	adds	r7, #120	@ 0x78
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b096      	sub	sp, #88	@ 0x58
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	1d3b      	adds	r3, r7, #4
 8009036:	2202      	movs	r2, #2
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe fd7f 	bl	8007b3c <find_volume>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8009048:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 80f9 	bne.w	8009244 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	f107 030c 	add.w	r3, r7, #12
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fc44 	bl	80078e8 <follow_path>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009066:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <f_mkdir+0x4c>
 800906e:	2308      	movs	r3, #8
 8009070:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8009074:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009078:	2b04      	cmp	r3, #4
 800907a:	d108      	bne.n	800908e <f_mkdir+0x66>
 800907c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8009088:	2306      	movs	r3, #6
 800908a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800908e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009092:	2b04      	cmp	r3, #4
 8009094:	f040 80d6 	bne.w	8009244 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8009098:	f107 030c 	add.w	r3, r7, #12
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd ff63 	bl	8006f6a <create_chain>
 80090a4:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	895b      	ldrh	r3, [r3, #10]
 80090aa:	025b      	lsls	r3, r3, #9
 80090ac:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80090b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d102      	bne.n	80090c0 <f_mkdir+0x98>
 80090ba:	2307      	movs	r3, #7
 80090bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80090c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d102      	bne.n	80090cc <f_mkdir+0xa4>
 80090c6:	2302      	movs	r3, #2
 80090c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80090cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d2:	d102      	bne.n	80090da <f_mkdir+0xb2>
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80090da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <f_mkdir+0xc8>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fd fc4b 	bl	8006980 <sync_window>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 80090f0:	f7fd f93a 	bl	8006368 <get_fattime>
 80090f4:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80090f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d16a      	bne.n	80091d4 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009102:	4618      	mov	r0, r3
 8009104:	f7fd fd1c 	bl	8006b40 <clust2sect>
 8009108:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	3334      	adds	r3, #52	@ 0x34
 800910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8009110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009114:	2100      	movs	r1, #0
 8009116:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009118:	f7fd fa68 	bl	80065ec <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800911c:	220b      	movs	r2, #11
 800911e:	2120      	movs	r1, #32
 8009120:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009122:	f7fd fa63 	bl	80065ec <mem_set>
					dir[DIR_Name] = '.';
 8009126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009128:	222e      	movs	r2, #46	@ 0x2e
 800912a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800912c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912e:	330b      	adds	r3, #11
 8009130:	2210      	movs	r2, #16
 8009132:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009136:	3316      	adds	r3, #22
 8009138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800913a:	4618      	mov	r0, r3
 800913c:	f7fd fa09 	bl	8006552 <st_dword>
					st_clust(fs, dir, dcl);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009144:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe f981 	bl	800744e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800914c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914e:	3320      	adds	r3, #32
 8009150:	2220      	movs	r2, #32
 8009152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd fa28 	bl	80065aa <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800915a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800915c:	3321      	adds	r3, #33	@ 0x21
 800915e:	222e      	movs	r2, #46	@ 0x2e
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b03      	cmp	r3, #3
 800916c:	d106      	bne.n	800917c <f_mkdir+0x154>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009174:	429a      	cmp	r2, r3
 8009176:	d101      	bne.n	800917c <f_mkdir+0x154>
 8009178:	2300      	movs	r3, #0
 800917a:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800917c:	68b8      	ldr	r0, [r7, #8]
 800917e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009180:	3320      	adds	r3, #32
 8009182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009184:	4619      	mov	r1, r3
 8009186:	f7fe f962 	bl	800744e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	895b      	ldrh	r3, [r3, #10]
 800918e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009190:	e01b      	b.n	80091ca <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 8009192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2201      	movs	r2, #1
 80091a0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fd fbeb 	bl	8006980 <sync_window>
 80091aa:	4603      	mov	r3, r0
 80091ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 80091b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10c      	bne.n	80091d2 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 80091b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091bc:	2100      	movs	r1, #0
 80091be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80091c0:	f7fd fa14 	bl	80065ec <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80091c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c6:	3b01      	subs	r3, #1
 80091c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80091ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e0      	bne.n	8009192 <f_mkdir+0x16a>
 80091d0:	e000      	b.n	80091d4 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 80091d2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80091d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d107      	bne.n	80091ec <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80091dc:	f107 030c 	add.w	r3, r7, #12
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fa06 	bl	80075f2 <dir_register>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 80091ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d120      	bne.n	8009236 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80091f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80091f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091fa:	3316      	adds	r3, #22
 80091fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fd f9a7 	bl	8006552 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009208:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe f91f 	bl	800744e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009212:	330b      	adds	r3, #11
 8009214:	2210      	movs	r2, #16
 8009216:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2201      	movs	r2, #1
 800921c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800921e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10e      	bne.n	8009244 <f_mkdir+0x21c>
					res = sync_fs(fs);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f7fd fc1b 	bl	8006a64 <sync_fs>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8009234:	e006      	b.n	8009244 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	2200      	movs	r2, #0
 800923c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800923e:	4618      	mov	r0, r3
 8009240:	f7fd fe2e 	bl	8006ea0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009244:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8009248:	4618      	mov	r0, r3
 800924a:	3758      	adds	r7, #88	@ 0x58
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009264:	e01c      	b.n	80092a0 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009266:	f107 0310 	add.w	r3, r7, #16
 800926a:	f107 0114 	add.w	r1, r7, #20
 800926e:	2201      	movs	r2, #1
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff f8e7 	bl	8008444 <f_read>
		if (rc != 1) break;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d117      	bne.n	80092ac <f_gets+0x5c>
		c = s[0];
 800927c:	7d3b      	ldrb	r3, [r7, #20]
 800927e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	2b0d      	cmp	r3, #13
 8009284:	d00b      	beq.n	800929e <f_gets+0x4e>
		*p++ = c;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	61ba      	str	r2, [r7, #24]
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	701a      	strb	r2, [r3, #0]
		n++;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	3301      	adds	r3, #1
 8009294:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	2b0a      	cmp	r3, #10
 800929a:	d009      	beq.n	80092b0 <f_gets+0x60>
 800929c:	e000      	b.n	80092a0 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800929e:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	dbdd      	blt.n	8009266 <f_gets+0x16>
 80092aa:	e002      	b.n	80092b2 <f_gets+0x62>
		if (rc != 1) break;
 80092ac:	bf00      	nop
 80092ae:	e000      	b.n	80092b2 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80092b0:	bf00      	nop
	}
	*p = 0;
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <f_gets+0x72>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	e000      	b.n	80092c4 <f_gets+0x74>
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3720      	adds	r7, #32
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <siprintf>:
 80092cc:	b40e      	push	{r1, r2, r3}
 80092ce:	b510      	push	{r4, lr}
 80092d0:	b09d      	sub	sp, #116	@ 0x74
 80092d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80092d4:	9002      	str	r0, [sp, #8]
 80092d6:	9006      	str	r0, [sp, #24]
 80092d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80092dc:	480a      	ldr	r0, [pc, #40]	@ (8009308 <siprintf+0x3c>)
 80092de:	9107      	str	r1, [sp, #28]
 80092e0:	9104      	str	r1, [sp, #16]
 80092e2:	490a      	ldr	r1, [pc, #40]	@ (800930c <siprintf+0x40>)
 80092e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	2400      	movs	r4, #0
 80092ec:	a902      	add	r1, sp, #8
 80092ee:	6800      	ldr	r0, [r0, #0]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80092f4:	f000 f9de 	bl	80096b4 <_svfiprintf_r>
 80092f8:	9b02      	ldr	r3, [sp, #8]
 80092fa:	701c      	strb	r4, [r3, #0]
 80092fc:	b01d      	add	sp, #116	@ 0x74
 80092fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009302:	b003      	add	sp, #12
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	2000000c 	.word	0x2000000c
 800930c:	ffff0208 	.word	0xffff0208

08009310 <_vsniprintf_r>:
 8009310:	b530      	push	{r4, r5, lr}
 8009312:	4614      	mov	r4, r2
 8009314:	2c00      	cmp	r4, #0
 8009316:	b09b      	sub	sp, #108	@ 0x6c
 8009318:	4605      	mov	r5, r0
 800931a:	461a      	mov	r2, r3
 800931c:	da05      	bge.n	800932a <_vsniprintf_r+0x1a>
 800931e:	238b      	movs	r3, #139	@ 0x8b
 8009320:	6003      	str	r3, [r0, #0]
 8009322:	f04f 30ff 	mov.w	r0, #4294967295
 8009326:	b01b      	add	sp, #108	@ 0x6c
 8009328:	bd30      	pop	{r4, r5, pc}
 800932a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800932e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009332:	f04f 0300 	mov.w	r3, #0
 8009336:	9319      	str	r3, [sp, #100]	@ 0x64
 8009338:	bf14      	ite	ne
 800933a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800933e:	4623      	moveq	r3, r4
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	9305      	str	r3, [sp, #20]
 8009344:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009348:	9100      	str	r1, [sp, #0]
 800934a:	9104      	str	r1, [sp, #16]
 800934c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009350:	4669      	mov	r1, sp
 8009352:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009354:	f000 f9ae 	bl	80096b4 <_svfiprintf_r>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	bfbc      	itt	lt
 800935c:	238b      	movlt	r3, #139	@ 0x8b
 800935e:	602b      	strlt	r3, [r5, #0]
 8009360:	2c00      	cmp	r4, #0
 8009362:	d0e0      	beq.n	8009326 <_vsniprintf_r+0x16>
 8009364:	9b00      	ldr	r3, [sp, #0]
 8009366:	2200      	movs	r2, #0
 8009368:	701a      	strb	r2, [r3, #0]
 800936a:	e7dc      	b.n	8009326 <_vsniprintf_r+0x16>

0800936c <vsniprintf>:
 800936c:	b507      	push	{r0, r1, r2, lr}
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	4613      	mov	r3, r2
 8009372:	460a      	mov	r2, r1
 8009374:	4601      	mov	r1, r0
 8009376:	4803      	ldr	r0, [pc, #12]	@ (8009384 <vsniprintf+0x18>)
 8009378:	6800      	ldr	r0, [r0, #0]
 800937a:	f7ff ffc9 	bl	8009310 <_vsniprintf_r>
 800937e:	b003      	add	sp, #12
 8009380:	f85d fb04 	ldr.w	pc, [sp], #4
 8009384:	2000000c 	.word	0x2000000c

08009388 <memset>:
 8009388:	4402      	add	r2, r0
 800938a:	4603      	mov	r3, r0
 800938c:	4293      	cmp	r3, r2
 800938e:	d100      	bne.n	8009392 <memset+0xa>
 8009390:	4770      	bx	lr
 8009392:	f803 1b01 	strb.w	r1, [r3], #1
 8009396:	e7f9      	b.n	800938c <memset+0x4>

08009398 <strchr>:
 8009398:	b2c9      	uxtb	r1, r1
 800939a:	4603      	mov	r3, r0
 800939c:	4618      	mov	r0, r3
 800939e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a2:	b112      	cbz	r2, 80093aa <strchr+0x12>
 80093a4:	428a      	cmp	r2, r1
 80093a6:	d1f9      	bne.n	800939c <strchr+0x4>
 80093a8:	4770      	bx	lr
 80093aa:	2900      	cmp	r1, #0
 80093ac:	bf18      	it	ne
 80093ae:	2000      	movne	r0, #0
 80093b0:	4770      	bx	lr
	...

080093b4 <__errno>:
 80093b4:	4b01      	ldr	r3, [pc, #4]	@ (80093bc <__errno+0x8>)
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	2000000c 	.word	0x2000000c

080093c0 <__libc_init_array>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	4d0d      	ldr	r5, [pc, #52]	@ (80093f8 <__libc_init_array+0x38>)
 80093c4:	4c0d      	ldr	r4, [pc, #52]	@ (80093fc <__libc_init_array+0x3c>)
 80093c6:	1b64      	subs	r4, r4, r5
 80093c8:	10a4      	asrs	r4, r4, #2
 80093ca:	2600      	movs	r6, #0
 80093cc:	42a6      	cmp	r6, r4
 80093ce:	d109      	bne.n	80093e4 <__libc_init_array+0x24>
 80093d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009400 <__libc_init_array+0x40>)
 80093d2:	4c0c      	ldr	r4, [pc, #48]	@ (8009404 <__libc_init_array+0x44>)
 80093d4:	f000 fc64 	bl	8009ca0 <_init>
 80093d8:	1b64      	subs	r4, r4, r5
 80093da:	10a4      	asrs	r4, r4, #2
 80093dc:	2600      	movs	r6, #0
 80093de:	42a6      	cmp	r6, r4
 80093e0:	d105      	bne.n	80093ee <__libc_init_array+0x2e>
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e8:	4798      	blx	r3
 80093ea:	3601      	adds	r6, #1
 80093ec:	e7ee      	b.n	80093cc <__libc_init_array+0xc>
 80093ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f2:	4798      	blx	r3
 80093f4:	3601      	adds	r6, #1
 80093f6:	e7f2      	b.n	80093de <__libc_init_array+0x1e>
 80093f8:	0800a474 	.word	0x0800a474
 80093fc:	0800a474 	.word	0x0800a474
 8009400:	0800a474 	.word	0x0800a474
 8009404:	0800a478 	.word	0x0800a478

08009408 <__retarget_lock_acquire_recursive>:
 8009408:	4770      	bx	lr

0800940a <__retarget_lock_release_recursive>:
 800940a:	4770      	bx	lr

0800940c <_free_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4605      	mov	r5, r0
 8009410:	2900      	cmp	r1, #0
 8009412:	d041      	beq.n	8009498 <_free_r+0x8c>
 8009414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009418:	1f0c      	subs	r4, r1, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfb8      	it	lt
 800941e:	18e4      	addlt	r4, r4, r3
 8009420:	f000 f8e0 	bl	80095e4 <__malloc_lock>
 8009424:	4a1d      	ldr	r2, [pc, #116]	@ (800949c <_free_r+0x90>)
 8009426:	6813      	ldr	r3, [r2, #0]
 8009428:	b933      	cbnz	r3, 8009438 <_free_r+0x2c>
 800942a:	6063      	str	r3, [r4, #4]
 800942c:	6014      	str	r4, [r2, #0]
 800942e:	4628      	mov	r0, r5
 8009430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009434:	f000 b8dc 	b.w	80095f0 <__malloc_unlock>
 8009438:	42a3      	cmp	r3, r4
 800943a:	d908      	bls.n	800944e <_free_r+0x42>
 800943c:	6820      	ldr	r0, [r4, #0]
 800943e:	1821      	adds	r1, r4, r0
 8009440:	428b      	cmp	r3, r1
 8009442:	bf01      	itttt	eq
 8009444:	6819      	ldreq	r1, [r3, #0]
 8009446:	685b      	ldreq	r3, [r3, #4]
 8009448:	1809      	addeq	r1, r1, r0
 800944a:	6021      	streq	r1, [r4, #0]
 800944c:	e7ed      	b.n	800942a <_free_r+0x1e>
 800944e:	461a      	mov	r2, r3
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	b10b      	cbz	r3, 8009458 <_free_r+0x4c>
 8009454:	42a3      	cmp	r3, r4
 8009456:	d9fa      	bls.n	800944e <_free_r+0x42>
 8009458:	6811      	ldr	r1, [r2, #0]
 800945a:	1850      	adds	r0, r2, r1
 800945c:	42a0      	cmp	r0, r4
 800945e:	d10b      	bne.n	8009478 <_free_r+0x6c>
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	4401      	add	r1, r0
 8009464:	1850      	adds	r0, r2, r1
 8009466:	4283      	cmp	r3, r0
 8009468:	6011      	str	r1, [r2, #0]
 800946a:	d1e0      	bne.n	800942e <_free_r+0x22>
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	6053      	str	r3, [r2, #4]
 8009472:	4408      	add	r0, r1
 8009474:	6010      	str	r0, [r2, #0]
 8009476:	e7da      	b.n	800942e <_free_r+0x22>
 8009478:	d902      	bls.n	8009480 <_free_r+0x74>
 800947a:	230c      	movs	r3, #12
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	e7d6      	b.n	800942e <_free_r+0x22>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	1821      	adds	r1, r4, r0
 8009484:	428b      	cmp	r3, r1
 8009486:	bf04      	itt	eq
 8009488:	6819      	ldreq	r1, [r3, #0]
 800948a:	685b      	ldreq	r3, [r3, #4]
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	bf04      	itt	eq
 8009490:	1809      	addeq	r1, r1, r0
 8009492:	6021      	streq	r1, [r4, #0]
 8009494:	6054      	str	r4, [r2, #4]
 8009496:	e7ca      	b.n	800942e <_free_r+0x22>
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	20000838 	.word	0x20000838

080094a0 <sbrk_aligned>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	4e0f      	ldr	r6, [pc, #60]	@ (80094e0 <sbrk_aligned+0x40>)
 80094a4:	460c      	mov	r4, r1
 80094a6:	6831      	ldr	r1, [r6, #0]
 80094a8:	4605      	mov	r5, r0
 80094aa:	b911      	cbnz	r1, 80094b2 <sbrk_aligned+0x12>
 80094ac:	f000 fba4 	bl	8009bf8 <_sbrk_r>
 80094b0:	6030      	str	r0, [r6, #0]
 80094b2:	4621      	mov	r1, r4
 80094b4:	4628      	mov	r0, r5
 80094b6:	f000 fb9f 	bl	8009bf8 <_sbrk_r>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d103      	bne.n	80094c6 <sbrk_aligned+0x26>
 80094be:	f04f 34ff 	mov.w	r4, #4294967295
 80094c2:	4620      	mov	r0, r4
 80094c4:	bd70      	pop	{r4, r5, r6, pc}
 80094c6:	1cc4      	adds	r4, r0, #3
 80094c8:	f024 0403 	bic.w	r4, r4, #3
 80094cc:	42a0      	cmp	r0, r4
 80094ce:	d0f8      	beq.n	80094c2 <sbrk_aligned+0x22>
 80094d0:	1a21      	subs	r1, r4, r0
 80094d2:	4628      	mov	r0, r5
 80094d4:	f000 fb90 	bl	8009bf8 <_sbrk_r>
 80094d8:	3001      	adds	r0, #1
 80094da:	d1f2      	bne.n	80094c2 <sbrk_aligned+0x22>
 80094dc:	e7ef      	b.n	80094be <sbrk_aligned+0x1e>
 80094de:	bf00      	nop
 80094e0:	20000834 	.word	0x20000834

080094e4 <_malloc_r>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	1ccd      	adds	r5, r1, #3
 80094ea:	f025 0503 	bic.w	r5, r5, #3
 80094ee:	3508      	adds	r5, #8
 80094f0:	2d0c      	cmp	r5, #12
 80094f2:	bf38      	it	cc
 80094f4:	250c      	movcc	r5, #12
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	4606      	mov	r6, r0
 80094fa:	db01      	blt.n	8009500 <_malloc_r+0x1c>
 80094fc:	42a9      	cmp	r1, r5
 80094fe:	d904      	bls.n	800950a <_malloc_r+0x26>
 8009500:	230c      	movs	r3, #12
 8009502:	6033      	str	r3, [r6, #0]
 8009504:	2000      	movs	r0, #0
 8009506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095e0 <_malloc_r+0xfc>
 800950e:	f000 f869 	bl	80095e4 <__malloc_lock>
 8009512:	f8d8 3000 	ldr.w	r3, [r8]
 8009516:	461c      	mov	r4, r3
 8009518:	bb44      	cbnz	r4, 800956c <_malloc_r+0x88>
 800951a:	4629      	mov	r1, r5
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff ffbf 	bl	80094a0 <sbrk_aligned>
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	4604      	mov	r4, r0
 8009526:	d158      	bne.n	80095da <_malloc_r+0xf6>
 8009528:	f8d8 4000 	ldr.w	r4, [r8]
 800952c:	4627      	mov	r7, r4
 800952e:	2f00      	cmp	r7, #0
 8009530:	d143      	bne.n	80095ba <_malloc_r+0xd6>
 8009532:	2c00      	cmp	r4, #0
 8009534:	d04b      	beq.n	80095ce <_malloc_r+0xea>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	4639      	mov	r1, r7
 800953a:	4630      	mov	r0, r6
 800953c:	eb04 0903 	add.w	r9, r4, r3
 8009540:	f000 fb5a 	bl	8009bf8 <_sbrk_r>
 8009544:	4581      	cmp	r9, r0
 8009546:	d142      	bne.n	80095ce <_malloc_r+0xea>
 8009548:	6821      	ldr	r1, [r4, #0]
 800954a:	1a6d      	subs	r5, r5, r1
 800954c:	4629      	mov	r1, r5
 800954e:	4630      	mov	r0, r6
 8009550:	f7ff ffa6 	bl	80094a0 <sbrk_aligned>
 8009554:	3001      	adds	r0, #1
 8009556:	d03a      	beq.n	80095ce <_malloc_r+0xea>
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	442b      	add	r3, r5
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	f8d8 3000 	ldr.w	r3, [r8]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	bb62      	cbnz	r2, 80095c0 <_malloc_r+0xdc>
 8009566:	f8c8 7000 	str.w	r7, [r8]
 800956a:	e00f      	b.n	800958c <_malloc_r+0xa8>
 800956c:	6822      	ldr	r2, [r4, #0]
 800956e:	1b52      	subs	r2, r2, r5
 8009570:	d420      	bmi.n	80095b4 <_malloc_r+0xd0>
 8009572:	2a0b      	cmp	r2, #11
 8009574:	d917      	bls.n	80095a6 <_malloc_r+0xc2>
 8009576:	1961      	adds	r1, r4, r5
 8009578:	42a3      	cmp	r3, r4
 800957a:	6025      	str	r5, [r4, #0]
 800957c:	bf18      	it	ne
 800957e:	6059      	strne	r1, [r3, #4]
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	bf08      	it	eq
 8009584:	f8c8 1000 	streq.w	r1, [r8]
 8009588:	5162      	str	r2, [r4, r5]
 800958a:	604b      	str	r3, [r1, #4]
 800958c:	4630      	mov	r0, r6
 800958e:	f000 f82f 	bl	80095f0 <__malloc_unlock>
 8009592:	f104 000b 	add.w	r0, r4, #11
 8009596:	1d23      	adds	r3, r4, #4
 8009598:	f020 0007 	bic.w	r0, r0, #7
 800959c:	1ac2      	subs	r2, r0, r3
 800959e:	bf1c      	itt	ne
 80095a0:	1a1b      	subne	r3, r3, r0
 80095a2:	50a3      	strne	r3, [r4, r2]
 80095a4:	e7af      	b.n	8009506 <_malloc_r+0x22>
 80095a6:	6862      	ldr	r2, [r4, #4]
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	bf0c      	ite	eq
 80095ac:	f8c8 2000 	streq.w	r2, [r8]
 80095b0:	605a      	strne	r2, [r3, #4]
 80095b2:	e7eb      	b.n	800958c <_malloc_r+0xa8>
 80095b4:	4623      	mov	r3, r4
 80095b6:	6864      	ldr	r4, [r4, #4]
 80095b8:	e7ae      	b.n	8009518 <_malloc_r+0x34>
 80095ba:	463c      	mov	r4, r7
 80095bc:	687f      	ldr	r7, [r7, #4]
 80095be:	e7b6      	b.n	800952e <_malloc_r+0x4a>
 80095c0:	461a      	mov	r2, r3
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	42a3      	cmp	r3, r4
 80095c6:	d1fb      	bne.n	80095c0 <_malloc_r+0xdc>
 80095c8:	2300      	movs	r3, #0
 80095ca:	6053      	str	r3, [r2, #4]
 80095cc:	e7de      	b.n	800958c <_malloc_r+0xa8>
 80095ce:	230c      	movs	r3, #12
 80095d0:	6033      	str	r3, [r6, #0]
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f80c 	bl	80095f0 <__malloc_unlock>
 80095d8:	e794      	b.n	8009504 <_malloc_r+0x20>
 80095da:	6005      	str	r5, [r0, #0]
 80095dc:	e7d6      	b.n	800958c <_malloc_r+0xa8>
 80095de:	bf00      	nop
 80095e0:	20000838 	.word	0x20000838

080095e4 <__malloc_lock>:
 80095e4:	4801      	ldr	r0, [pc, #4]	@ (80095ec <__malloc_lock+0x8>)
 80095e6:	f7ff bf0f 	b.w	8009408 <__retarget_lock_acquire_recursive>
 80095ea:	bf00      	nop
 80095ec:	20000830 	.word	0x20000830

080095f0 <__malloc_unlock>:
 80095f0:	4801      	ldr	r0, [pc, #4]	@ (80095f8 <__malloc_unlock+0x8>)
 80095f2:	f7ff bf0a 	b.w	800940a <__retarget_lock_release_recursive>
 80095f6:	bf00      	nop
 80095f8:	20000830 	.word	0x20000830

080095fc <__ssputs_r>:
 80095fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	688e      	ldr	r6, [r1, #8]
 8009602:	461f      	mov	r7, r3
 8009604:	42be      	cmp	r6, r7
 8009606:	680b      	ldr	r3, [r1, #0]
 8009608:	4682      	mov	sl, r0
 800960a:	460c      	mov	r4, r1
 800960c:	4690      	mov	r8, r2
 800960e:	d82d      	bhi.n	800966c <__ssputs_r+0x70>
 8009610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009618:	d026      	beq.n	8009668 <__ssputs_r+0x6c>
 800961a:	6965      	ldr	r5, [r4, #20]
 800961c:	6909      	ldr	r1, [r1, #16]
 800961e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009622:	eba3 0901 	sub.w	r9, r3, r1
 8009626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800962a:	1c7b      	adds	r3, r7, #1
 800962c:	444b      	add	r3, r9
 800962e:	106d      	asrs	r5, r5, #1
 8009630:	429d      	cmp	r5, r3
 8009632:	bf38      	it	cc
 8009634:	461d      	movcc	r5, r3
 8009636:	0553      	lsls	r3, r2, #21
 8009638:	d527      	bpl.n	800968a <__ssputs_r+0x8e>
 800963a:	4629      	mov	r1, r5
 800963c:	f7ff ff52 	bl	80094e4 <_malloc_r>
 8009640:	4606      	mov	r6, r0
 8009642:	b360      	cbz	r0, 800969e <__ssputs_r+0xa2>
 8009644:	6921      	ldr	r1, [r4, #16]
 8009646:	464a      	mov	r2, r9
 8009648:	f000 fae6 	bl	8009c18 <memcpy>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009656:	81a3      	strh	r3, [r4, #12]
 8009658:	6126      	str	r6, [r4, #16]
 800965a:	6165      	str	r5, [r4, #20]
 800965c:	444e      	add	r6, r9
 800965e:	eba5 0509 	sub.w	r5, r5, r9
 8009662:	6026      	str	r6, [r4, #0]
 8009664:	60a5      	str	r5, [r4, #8]
 8009666:	463e      	mov	r6, r7
 8009668:	42be      	cmp	r6, r7
 800966a:	d900      	bls.n	800966e <__ssputs_r+0x72>
 800966c:	463e      	mov	r6, r7
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	4632      	mov	r2, r6
 8009672:	4641      	mov	r1, r8
 8009674:	f000 faa6 	bl	8009bc4 <memmove>
 8009678:	68a3      	ldr	r3, [r4, #8]
 800967a:	1b9b      	subs	r3, r3, r6
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	4433      	add	r3, r6
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	2000      	movs	r0, #0
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	462a      	mov	r2, r5
 800968c:	f000 fad2 	bl	8009c34 <_realloc_r>
 8009690:	4606      	mov	r6, r0
 8009692:	2800      	cmp	r0, #0
 8009694:	d1e0      	bne.n	8009658 <__ssputs_r+0x5c>
 8009696:	6921      	ldr	r1, [r4, #16]
 8009698:	4650      	mov	r0, sl
 800969a:	f7ff feb7 	bl	800940c <_free_r>
 800969e:	230c      	movs	r3, #12
 80096a0:	f8ca 3000 	str.w	r3, [sl]
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	e7e9      	b.n	8009686 <__ssputs_r+0x8a>
	...

080096b4 <_svfiprintf_r>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	4698      	mov	r8, r3
 80096ba:	898b      	ldrh	r3, [r1, #12]
 80096bc:	061b      	lsls	r3, r3, #24
 80096be:	b09d      	sub	sp, #116	@ 0x74
 80096c0:	4607      	mov	r7, r0
 80096c2:	460d      	mov	r5, r1
 80096c4:	4614      	mov	r4, r2
 80096c6:	d510      	bpl.n	80096ea <_svfiprintf_r+0x36>
 80096c8:	690b      	ldr	r3, [r1, #16]
 80096ca:	b973      	cbnz	r3, 80096ea <_svfiprintf_r+0x36>
 80096cc:	2140      	movs	r1, #64	@ 0x40
 80096ce:	f7ff ff09 	bl	80094e4 <_malloc_r>
 80096d2:	6028      	str	r0, [r5, #0]
 80096d4:	6128      	str	r0, [r5, #16]
 80096d6:	b930      	cbnz	r0, 80096e6 <_svfiprintf_r+0x32>
 80096d8:	230c      	movs	r3, #12
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	b01d      	add	sp, #116	@ 0x74
 80096e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e6:	2340      	movs	r3, #64	@ 0x40
 80096e8:	616b      	str	r3, [r5, #20]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ee:	2320      	movs	r3, #32
 80096f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f8:	2330      	movs	r3, #48	@ 0x30
 80096fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009898 <_svfiprintf_r+0x1e4>
 80096fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009702:	f04f 0901 	mov.w	r9, #1
 8009706:	4623      	mov	r3, r4
 8009708:	469a      	mov	sl, r3
 800970a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800970e:	b10a      	cbz	r2, 8009714 <_svfiprintf_r+0x60>
 8009710:	2a25      	cmp	r2, #37	@ 0x25
 8009712:	d1f9      	bne.n	8009708 <_svfiprintf_r+0x54>
 8009714:	ebba 0b04 	subs.w	fp, sl, r4
 8009718:	d00b      	beq.n	8009732 <_svfiprintf_r+0x7e>
 800971a:	465b      	mov	r3, fp
 800971c:	4622      	mov	r2, r4
 800971e:	4629      	mov	r1, r5
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff ff6b 	bl	80095fc <__ssputs_r>
 8009726:	3001      	adds	r0, #1
 8009728:	f000 80a7 	beq.w	800987a <_svfiprintf_r+0x1c6>
 800972c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800972e:	445a      	add	r2, fp
 8009730:	9209      	str	r2, [sp, #36]	@ 0x24
 8009732:	f89a 3000 	ldrb.w	r3, [sl]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 809f 	beq.w	800987a <_svfiprintf_r+0x1c6>
 800973c:	2300      	movs	r3, #0
 800973e:	f04f 32ff 	mov.w	r2, #4294967295
 8009742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009746:	f10a 0a01 	add.w	sl, sl, #1
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009752:	931a      	str	r3, [sp, #104]	@ 0x68
 8009754:	4654      	mov	r4, sl
 8009756:	2205      	movs	r2, #5
 8009758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975c:	484e      	ldr	r0, [pc, #312]	@ (8009898 <_svfiprintf_r+0x1e4>)
 800975e:	f7f6 fd57 	bl	8000210 <memchr>
 8009762:	9a04      	ldr	r2, [sp, #16]
 8009764:	b9d8      	cbnz	r0, 800979e <_svfiprintf_r+0xea>
 8009766:	06d0      	lsls	r0, r2, #27
 8009768:	bf44      	itt	mi
 800976a:	2320      	movmi	r3, #32
 800976c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009770:	0711      	lsls	r1, r2, #28
 8009772:	bf44      	itt	mi
 8009774:	232b      	movmi	r3, #43	@ 0x2b
 8009776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800977a:	f89a 3000 	ldrb.w	r3, [sl]
 800977e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009780:	d015      	beq.n	80097ae <_svfiprintf_r+0xfa>
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	4654      	mov	r4, sl
 8009786:	2000      	movs	r0, #0
 8009788:	f04f 0c0a 	mov.w	ip, #10
 800978c:	4621      	mov	r1, r4
 800978e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009792:	3b30      	subs	r3, #48	@ 0x30
 8009794:	2b09      	cmp	r3, #9
 8009796:	d94b      	bls.n	8009830 <_svfiprintf_r+0x17c>
 8009798:	b1b0      	cbz	r0, 80097c8 <_svfiprintf_r+0x114>
 800979a:	9207      	str	r2, [sp, #28]
 800979c:	e014      	b.n	80097c8 <_svfiprintf_r+0x114>
 800979e:	eba0 0308 	sub.w	r3, r0, r8
 80097a2:	fa09 f303 	lsl.w	r3, r9, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	46a2      	mov	sl, r4
 80097ac:	e7d2      	b.n	8009754 <_svfiprintf_r+0xa0>
 80097ae:	9b03      	ldr	r3, [sp, #12]
 80097b0:	1d19      	adds	r1, r3, #4
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	9103      	str	r1, [sp, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bfbb      	ittet	lt
 80097ba:	425b      	neglt	r3, r3
 80097bc:	f042 0202 	orrlt.w	r2, r2, #2
 80097c0:	9307      	strge	r3, [sp, #28]
 80097c2:	9307      	strlt	r3, [sp, #28]
 80097c4:	bfb8      	it	lt
 80097c6:	9204      	strlt	r2, [sp, #16]
 80097c8:	7823      	ldrb	r3, [r4, #0]
 80097ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80097cc:	d10a      	bne.n	80097e4 <_svfiprintf_r+0x130>
 80097ce:	7863      	ldrb	r3, [r4, #1]
 80097d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097d2:	d132      	bne.n	800983a <_svfiprintf_r+0x186>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	1d1a      	adds	r2, r3, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	9203      	str	r2, [sp, #12]
 80097dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097e0:	3402      	adds	r4, #2
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098a8 <_svfiprintf_r+0x1f4>
 80097e8:	7821      	ldrb	r1, [r4, #0]
 80097ea:	2203      	movs	r2, #3
 80097ec:	4650      	mov	r0, sl
 80097ee:	f7f6 fd0f 	bl	8000210 <memchr>
 80097f2:	b138      	cbz	r0, 8009804 <_svfiprintf_r+0x150>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	eba0 000a 	sub.w	r0, r0, sl
 80097fa:	2240      	movs	r2, #64	@ 0x40
 80097fc:	4082      	lsls	r2, r0
 80097fe:	4313      	orrs	r3, r2
 8009800:	3401      	adds	r4, #1
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009808:	4824      	ldr	r0, [pc, #144]	@ (800989c <_svfiprintf_r+0x1e8>)
 800980a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800980e:	2206      	movs	r2, #6
 8009810:	f7f6 fcfe 	bl	8000210 <memchr>
 8009814:	2800      	cmp	r0, #0
 8009816:	d036      	beq.n	8009886 <_svfiprintf_r+0x1d2>
 8009818:	4b21      	ldr	r3, [pc, #132]	@ (80098a0 <_svfiprintf_r+0x1ec>)
 800981a:	bb1b      	cbnz	r3, 8009864 <_svfiprintf_r+0x1b0>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	3307      	adds	r3, #7
 8009820:	f023 0307 	bic.w	r3, r3, #7
 8009824:	3308      	adds	r3, #8
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982a:	4433      	add	r3, r6
 800982c:	9309      	str	r3, [sp, #36]	@ 0x24
 800982e:	e76a      	b.n	8009706 <_svfiprintf_r+0x52>
 8009830:	fb0c 3202 	mla	r2, ip, r2, r3
 8009834:	460c      	mov	r4, r1
 8009836:	2001      	movs	r0, #1
 8009838:	e7a8      	b.n	800978c <_svfiprintf_r+0xd8>
 800983a:	2300      	movs	r3, #0
 800983c:	3401      	adds	r4, #1
 800983e:	9305      	str	r3, [sp, #20]
 8009840:	4619      	mov	r1, r3
 8009842:	f04f 0c0a 	mov.w	ip, #10
 8009846:	4620      	mov	r0, r4
 8009848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800984c:	3a30      	subs	r2, #48	@ 0x30
 800984e:	2a09      	cmp	r2, #9
 8009850:	d903      	bls.n	800985a <_svfiprintf_r+0x1a6>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0c6      	beq.n	80097e4 <_svfiprintf_r+0x130>
 8009856:	9105      	str	r1, [sp, #20]
 8009858:	e7c4      	b.n	80097e4 <_svfiprintf_r+0x130>
 800985a:	fb0c 2101 	mla	r1, ip, r1, r2
 800985e:	4604      	mov	r4, r0
 8009860:	2301      	movs	r3, #1
 8009862:	e7f0      	b.n	8009846 <_svfiprintf_r+0x192>
 8009864:	ab03      	add	r3, sp, #12
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	462a      	mov	r2, r5
 800986a:	4b0e      	ldr	r3, [pc, #56]	@ (80098a4 <_svfiprintf_r+0x1f0>)
 800986c:	a904      	add	r1, sp, #16
 800986e:	4638      	mov	r0, r7
 8009870:	f3af 8000 	nop.w
 8009874:	1c42      	adds	r2, r0, #1
 8009876:	4606      	mov	r6, r0
 8009878:	d1d6      	bne.n	8009828 <_svfiprintf_r+0x174>
 800987a:	89ab      	ldrh	r3, [r5, #12]
 800987c:	065b      	lsls	r3, r3, #25
 800987e:	f53f af2d 	bmi.w	80096dc <_svfiprintf_r+0x28>
 8009882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009884:	e72c      	b.n	80096e0 <_svfiprintf_r+0x2c>
 8009886:	ab03      	add	r3, sp, #12
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	462a      	mov	r2, r5
 800988c:	4b05      	ldr	r3, [pc, #20]	@ (80098a4 <_svfiprintf_r+0x1f0>)
 800988e:	a904      	add	r1, sp, #16
 8009890:	4638      	mov	r0, r7
 8009892:	f000 f879 	bl	8009988 <_printf_i>
 8009896:	e7ed      	b.n	8009874 <_svfiprintf_r+0x1c0>
 8009898:	0800a438 	.word	0x0800a438
 800989c:	0800a442 	.word	0x0800a442
 80098a0:	00000000 	.word	0x00000000
 80098a4:	080095fd 	.word	0x080095fd
 80098a8:	0800a43e 	.word	0x0800a43e

080098ac <_printf_common>:
 80098ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b0:	4616      	mov	r6, r2
 80098b2:	4698      	mov	r8, r3
 80098b4:	688a      	ldr	r2, [r1, #8]
 80098b6:	690b      	ldr	r3, [r1, #16]
 80098b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098bc:	4293      	cmp	r3, r2
 80098be:	bfb8      	it	lt
 80098c0:	4613      	movlt	r3, r2
 80098c2:	6033      	str	r3, [r6, #0]
 80098c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098c8:	4607      	mov	r7, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	b10a      	cbz	r2, 80098d2 <_printf_common+0x26>
 80098ce:	3301      	adds	r3, #1
 80098d0:	6033      	str	r3, [r6, #0]
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	0699      	lsls	r1, r3, #26
 80098d6:	bf42      	ittt	mi
 80098d8:	6833      	ldrmi	r3, [r6, #0]
 80098da:	3302      	addmi	r3, #2
 80098dc:	6033      	strmi	r3, [r6, #0]
 80098de:	6825      	ldr	r5, [r4, #0]
 80098e0:	f015 0506 	ands.w	r5, r5, #6
 80098e4:	d106      	bne.n	80098f4 <_printf_common+0x48>
 80098e6:	f104 0a19 	add.w	sl, r4, #25
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	6832      	ldr	r2, [r6, #0]
 80098ee:	1a9b      	subs	r3, r3, r2
 80098f0:	42ab      	cmp	r3, r5
 80098f2:	dc26      	bgt.n	8009942 <_printf_common+0x96>
 80098f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098f8:	6822      	ldr	r2, [r4, #0]
 80098fa:	3b00      	subs	r3, #0
 80098fc:	bf18      	it	ne
 80098fe:	2301      	movne	r3, #1
 8009900:	0692      	lsls	r2, r2, #26
 8009902:	d42b      	bmi.n	800995c <_printf_common+0xb0>
 8009904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009908:	4641      	mov	r1, r8
 800990a:	4638      	mov	r0, r7
 800990c:	47c8      	blx	r9
 800990e:	3001      	adds	r0, #1
 8009910:	d01e      	beq.n	8009950 <_printf_common+0xa4>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	6922      	ldr	r2, [r4, #16]
 8009916:	f003 0306 	and.w	r3, r3, #6
 800991a:	2b04      	cmp	r3, #4
 800991c:	bf02      	ittt	eq
 800991e:	68e5      	ldreq	r5, [r4, #12]
 8009920:	6833      	ldreq	r3, [r6, #0]
 8009922:	1aed      	subeq	r5, r5, r3
 8009924:	68a3      	ldr	r3, [r4, #8]
 8009926:	bf0c      	ite	eq
 8009928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800992c:	2500      	movne	r5, #0
 800992e:	4293      	cmp	r3, r2
 8009930:	bfc4      	itt	gt
 8009932:	1a9b      	subgt	r3, r3, r2
 8009934:	18ed      	addgt	r5, r5, r3
 8009936:	2600      	movs	r6, #0
 8009938:	341a      	adds	r4, #26
 800993a:	42b5      	cmp	r5, r6
 800993c:	d11a      	bne.n	8009974 <_printf_common+0xc8>
 800993e:	2000      	movs	r0, #0
 8009940:	e008      	b.n	8009954 <_printf_common+0xa8>
 8009942:	2301      	movs	r3, #1
 8009944:	4652      	mov	r2, sl
 8009946:	4641      	mov	r1, r8
 8009948:	4638      	mov	r0, r7
 800994a:	47c8      	blx	r9
 800994c:	3001      	adds	r0, #1
 800994e:	d103      	bne.n	8009958 <_printf_common+0xac>
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009958:	3501      	adds	r5, #1
 800995a:	e7c6      	b.n	80098ea <_printf_common+0x3e>
 800995c:	18e1      	adds	r1, r4, r3
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	2030      	movs	r0, #48	@ 0x30
 8009962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009966:	4422      	add	r2, r4
 8009968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800996c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009970:	3302      	adds	r3, #2
 8009972:	e7c7      	b.n	8009904 <_printf_common+0x58>
 8009974:	2301      	movs	r3, #1
 8009976:	4622      	mov	r2, r4
 8009978:	4641      	mov	r1, r8
 800997a:	4638      	mov	r0, r7
 800997c:	47c8      	blx	r9
 800997e:	3001      	adds	r0, #1
 8009980:	d0e6      	beq.n	8009950 <_printf_common+0xa4>
 8009982:	3601      	adds	r6, #1
 8009984:	e7d9      	b.n	800993a <_printf_common+0x8e>
	...

08009988 <_printf_i>:
 8009988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	7e0f      	ldrb	r7, [r1, #24]
 800998e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009990:	2f78      	cmp	r7, #120	@ 0x78
 8009992:	4691      	mov	r9, r2
 8009994:	4680      	mov	r8, r0
 8009996:	460c      	mov	r4, r1
 8009998:	469a      	mov	sl, r3
 800999a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800999e:	d807      	bhi.n	80099b0 <_printf_i+0x28>
 80099a0:	2f62      	cmp	r7, #98	@ 0x62
 80099a2:	d80a      	bhi.n	80099ba <_printf_i+0x32>
 80099a4:	2f00      	cmp	r7, #0
 80099a6:	f000 80d1 	beq.w	8009b4c <_printf_i+0x1c4>
 80099aa:	2f58      	cmp	r7, #88	@ 0x58
 80099ac:	f000 80b8 	beq.w	8009b20 <_printf_i+0x198>
 80099b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099b8:	e03a      	b.n	8009a30 <_printf_i+0xa8>
 80099ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099be:	2b15      	cmp	r3, #21
 80099c0:	d8f6      	bhi.n	80099b0 <_printf_i+0x28>
 80099c2:	a101      	add	r1, pc, #4	@ (adr r1, 80099c8 <_printf_i+0x40>)
 80099c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c8:	08009a21 	.word	0x08009a21
 80099cc:	08009a35 	.word	0x08009a35
 80099d0:	080099b1 	.word	0x080099b1
 80099d4:	080099b1 	.word	0x080099b1
 80099d8:	080099b1 	.word	0x080099b1
 80099dc:	080099b1 	.word	0x080099b1
 80099e0:	08009a35 	.word	0x08009a35
 80099e4:	080099b1 	.word	0x080099b1
 80099e8:	080099b1 	.word	0x080099b1
 80099ec:	080099b1 	.word	0x080099b1
 80099f0:	080099b1 	.word	0x080099b1
 80099f4:	08009b33 	.word	0x08009b33
 80099f8:	08009a5f 	.word	0x08009a5f
 80099fc:	08009aed 	.word	0x08009aed
 8009a00:	080099b1 	.word	0x080099b1
 8009a04:	080099b1 	.word	0x080099b1
 8009a08:	08009b55 	.word	0x08009b55
 8009a0c:	080099b1 	.word	0x080099b1
 8009a10:	08009a5f 	.word	0x08009a5f
 8009a14:	080099b1 	.word	0x080099b1
 8009a18:	080099b1 	.word	0x080099b1
 8009a1c:	08009af5 	.word	0x08009af5
 8009a20:	6833      	ldr	r3, [r6, #0]
 8009a22:	1d1a      	adds	r2, r3, #4
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6032      	str	r2, [r6, #0]
 8009a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a30:	2301      	movs	r3, #1
 8009a32:	e09c      	b.n	8009b6e <_printf_i+0x1e6>
 8009a34:	6833      	ldr	r3, [r6, #0]
 8009a36:	6820      	ldr	r0, [r4, #0]
 8009a38:	1d19      	adds	r1, r3, #4
 8009a3a:	6031      	str	r1, [r6, #0]
 8009a3c:	0606      	lsls	r6, r0, #24
 8009a3e:	d501      	bpl.n	8009a44 <_printf_i+0xbc>
 8009a40:	681d      	ldr	r5, [r3, #0]
 8009a42:	e003      	b.n	8009a4c <_printf_i+0xc4>
 8009a44:	0645      	lsls	r5, r0, #25
 8009a46:	d5fb      	bpl.n	8009a40 <_printf_i+0xb8>
 8009a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a4c:	2d00      	cmp	r5, #0
 8009a4e:	da03      	bge.n	8009a58 <_printf_i+0xd0>
 8009a50:	232d      	movs	r3, #45	@ 0x2d
 8009a52:	426d      	negs	r5, r5
 8009a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a58:	4858      	ldr	r0, [pc, #352]	@ (8009bbc <_printf_i+0x234>)
 8009a5a:	230a      	movs	r3, #10
 8009a5c:	e011      	b.n	8009a82 <_printf_i+0xfa>
 8009a5e:	6821      	ldr	r1, [r4, #0]
 8009a60:	6833      	ldr	r3, [r6, #0]
 8009a62:	0608      	lsls	r0, r1, #24
 8009a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a68:	d402      	bmi.n	8009a70 <_printf_i+0xe8>
 8009a6a:	0649      	lsls	r1, r1, #25
 8009a6c:	bf48      	it	mi
 8009a6e:	b2ad      	uxthmi	r5, r5
 8009a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a72:	4852      	ldr	r0, [pc, #328]	@ (8009bbc <_printf_i+0x234>)
 8009a74:	6033      	str	r3, [r6, #0]
 8009a76:	bf14      	ite	ne
 8009a78:	230a      	movne	r3, #10
 8009a7a:	2308      	moveq	r3, #8
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a82:	6866      	ldr	r6, [r4, #4]
 8009a84:	60a6      	str	r6, [r4, #8]
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	db05      	blt.n	8009a96 <_printf_i+0x10e>
 8009a8a:	6821      	ldr	r1, [r4, #0]
 8009a8c:	432e      	orrs	r6, r5
 8009a8e:	f021 0104 	bic.w	r1, r1, #4
 8009a92:	6021      	str	r1, [r4, #0]
 8009a94:	d04b      	beq.n	8009b2e <_printf_i+0x1a6>
 8009a96:	4616      	mov	r6, r2
 8009a98:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a9c:	fb03 5711 	mls	r7, r3, r1, r5
 8009aa0:	5dc7      	ldrb	r7, [r0, r7]
 8009aa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aa6:	462f      	mov	r7, r5
 8009aa8:	42bb      	cmp	r3, r7
 8009aaa:	460d      	mov	r5, r1
 8009aac:	d9f4      	bls.n	8009a98 <_printf_i+0x110>
 8009aae:	2b08      	cmp	r3, #8
 8009ab0:	d10b      	bne.n	8009aca <_printf_i+0x142>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	07df      	lsls	r7, r3, #31
 8009ab6:	d508      	bpl.n	8009aca <_printf_i+0x142>
 8009ab8:	6923      	ldr	r3, [r4, #16]
 8009aba:	6861      	ldr	r1, [r4, #4]
 8009abc:	4299      	cmp	r1, r3
 8009abe:	bfde      	ittt	le
 8009ac0:	2330      	movle	r3, #48	@ 0x30
 8009ac2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ac6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009aca:	1b92      	subs	r2, r2, r6
 8009acc:	6122      	str	r2, [r4, #16]
 8009ace:	f8cd a000 	str.w	sl, [sp]
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	aa03      	add	r2, sp, #12
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4640      	mov	r0, r8
 8009ada:	f7ff fee7 	bl	80098ac <_printf_common>
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d14a      	bne.n	8009b78 <_printf_i+0x1f0>
 8009ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae6:	b004      	add	sp, #16
 8009ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	f043 0320 	orr.w	r3, r3, #32
 8009af2:	6023      	str	r3, [r4, #0]
 8009af4:	4832      	ldr	r0, [pc, #200]	@ (8009bc0 <_printf_i+0x238>)
 8009af6:	2778      	movs	r7, #120	@ 0x78
 8009af8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	6831      	ldr	r1, [r6, #0]
 8009b00:	061f      	lsls	r7, r3, #24
 8009b02:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b06:	d402      	bmi.n	8009b0e <_printf_i+0x186>
 8009b08:	065f      	lsls	r7, r3, #25
 8009b0a:	bf48      	it	mi
 8009b0c:	b2ad      	uxthmi	r5, r5
 8009b0e:	6031      	str	r1, [r6, #0]
 8009b10:	07d9      	lsls	r1, r3, #31
 8009b12:	bf44      	itt	mi
 8009b14:	f043 0320 	orrmi.w	r3, r3, #32
 8009b18:	6023      	strmi	r3, [r4, #0]
 8009b1a:	b11d      	cbz	r5, 8009b24 <_printf_i+0x19c>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	e7ad      	b.n	8009a7c <_printf_i+0xf4>
 8009b20:	4826      	ldr	r0, [pc, #152]	@ (8009bbc <_printf_i+0x234>)
 8009b22:	e7e9      	b.n	8009af8 <_printf_i+0x170>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	f023 0320 	bic.w	r3, r3, #32
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	e7f6      	b.n	8009b1c <_printf_i+0x194>
 8009b2e:	4616      	mov	r6, r2
 8009b30:	e7bd      	b.n	8009aae <_printf_i+0x126>
 8009b32:	6833      	ldr	r3, [r6, #0]
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	6961      	ldr	r1, [r4, #20]
 8009b38:	1d18      	adds	r0, r3, #4
 8009b3a:	6030      	str	r0, [r6, #0]
 8009b3c:	062e      	lsls	r6, r5, #24
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	d501      	bpl.n	8009b46 <_printf_i+0x1be>
 8009b42:	6019      	str	r1, [r3, #0]
 8009b44:	e002      	b.n	8009b4c <_printf_i+0x1c4>
 8009b46:	0668      	lsls	r0, r5, #25
 8009b48:	d5fb      	bpl.n	8009b42 <_printf_i+0x1ba>
 8009b4a:	8019      	strh	r1, [r3, #0]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	4616      	mov	r6, r2
 8009b52:	e7bc      	b.n	8009ace <_printf_i+0x146>
 8009b54:	6833      	ldr	r3, [r6, #0]
 8009b56:	1d1a      	adds	r2, r3, #4
 8009b58:	6032      	str	r2, [r6, #0]
 8009b5a:	681e      	ldr	r6, [r3, #0]
 8009b5c:	6862      	ldr	r2, [r4, #4]
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7f6 fb55 	bl	8000210 <memchr>
 8009b66:	b108      	cbz	r0, 8009b6c <_printf_i+0x1e4>
 8009b68:	1b80      	subs	r0, r0, r6
 8009b6a:	6060      	str	r0, [r4, #4]
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	6123      	str	r3, [r4, #16]
 8009b70:	2300      	movs	r3, #0
 8009b72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b76:	e7aa      	b.n	8009ace <_printf_i+0x146>
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4640      	mov	r0, r8
 8009b80:	47d0      	blx	sl
 8009b82:	3001      	adds	r0, #1
 8009b84:	d0ad      	beq.n	8009ae2 <_printf_i+0x15a>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	079b      	lsls	r3, r3, #30
 8009b8a:	d413      	bmi.n	8009bb4 <_printf_i+0x22c>
 8009b8c:	68e0      	ldr	r0, [r4, #12]
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	4298      	cmp	r0, r3
 8009b92:	bfb8      	it	lt
 8009b94:	4618      	movlt	r0, r3
 8009b96:	e7a6      	b.n	8009ae6 <_printf_i+0x15e>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	4632      	mov	r2, r6
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	47d0      	blx	sl
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d09d      	beq.n	8009ae2 <_printf_i+0x15a>
 8009ba6:	3501      	adds	r5, #1
 8009ba8:	68e3      	ldr	r3, [r4, #12]
 8009baa:	9903      	ldr	r1, [sp, #12]
 8009bac:	1a5b      	subs	r3, r3, r1
 8009bae:	42ab      	cmp	r3, r5
 8009bb0:	dcf2      	bgt.n	8009b98 <_printf_i+0x210>
 8009bb2:	e7eb      	b.n	8009b8c <_printf_i+0x204>
 8009bb4:	2500      	movs	r5, #0
 8009bb6:	f104 0619 	add.w	r6, r4, #25
 8009bba:	e7f5      	b.n	8009ba8 <_printf_i+0x220>
 8009bbc:	0800a449 	.word	0x0800a449
 8009bc0:	0800a45a 	.word	0x0800a45a

08009bc4 <memmove>:
 8009bc4:	4288      	cmp	r0, r1
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	eb01 0402 	add.w	r4, r1, r2
 8009bcc:	d902      	bls.n	8009bd4 <memmove+0x10>
 8009bce:	4284      	cmp	r4, r0
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	d807      	bhi.n	8009be4 <memmove+0x20>
 8009bd4:	1e43      	subs	r3, r0, #1
 8009bd6:	42a1      	cmp	r1, r4
 8009bd8:	d008      	beq.n	8009bec <memmove+0x28>
 8009bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009be2:	e7f8      	b.n	8009bd6 <memmove+0x12>
 8009be4:	4402      	add	r2, r0
 8009be6:	4601      	mov	r1, r0
 8009be8:	428a      	cmp	r2, r1
 8009bea:	d100      	bne.n	8009bee <memmove+0x2a>
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf6:	e7f7      	b.n	8009be8 <memmove+0x24>

08009bf8 <_sbrk_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d06      	ldr	r5, [pc, #24]	@ (8009c14 <_sbrk_r+0x1c>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	f7f7 fd08 	bl	8001618 <_sbrk>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_sbrk_r+0x1a>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_sbrk_r+0x1a>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	2000082c 	.word	0x2000082c

08009c18 <memcpy>:
 8009c18:	440a      	add	r2, r1
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c20:	d100      	bne.n	8009c24 <memcpy+0xc>
 8009c22:	4770      	bx	lr
 8009c24:	b510      	push	{r4, lr}
 8009c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2e:	4291      	cmp	r1, r2
 8009c30:	d1f9      	bne.n	8009c26 <memcpy+0xe>
 8009c32:	bd10      	pop	{r4, pc}

08009c34 <_realloc_r>:
 8009c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c38:	4607      	mov	r7, r0
 8009c3a:	4614      	mov	r4, r2
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	b921      	cbnz	r1, 8009c4a <_realloc_r+0x16>
 8009c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	4611      	mov	r1, r2
 8009c46:	f7ff bc4d 	b.w	80094e4 <_malloc_r>
 8009c4a:	b92a      	cbnz	r2, 8009c58 <_realloc_r+0x24>
 8009c4c:	f7ff fbde 	bl	800940c <_free_r>
 8009c50:	4625      	mov	r5, r4
 8009c52:	4628      	mov	r0, r5
 8009c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c58:	f000 f81a 	bl	8009c90 <_malloc_usable_size_r>
 8009c5c:	4284      	cmp	r4, r0
 8009c5e:	4606      	mov	r6, r0
 8009c60:	d802      	bhi.n	8009c68 <_realloc_r+0x34>
 8009c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c66:	d8f4      	bhi.n	8009c52 <_realloc_r+0x1e>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f7ff fc3a 	bl	80094e4 <_malloc_r>
 8009c70:	4680      	mov	r8, r0
 8009c72:	b908      	cbnz	r0, 8009c78 <_realloc_r+0x44>
 8009c74:	4645      	mov	r5, r8
 8009c76:	e7ec      	b.n	8009c52 <_realloc_r+0x1e>
 8009c78:	42b4      	cmp	r4, r6
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	bf28      	it	cs
 8009c80:	4632      	movcs	r2, r6
 8009c82:	f7ff ffc9 	bl	8009c18 <memcpy>
 8009c86:	4629      	mov	r1, r5
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff fbbf 	bl	800940c <_free_r>
 8009c8e:	e7f1      	b.n	8009c74 <_realloc_r+0x40>

08009c90 <_malloc_usable_size_r>:
 8009c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c94:	1f18      	subs	r0, r3, #4
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bfbc      	itt	lt
 8009c9a:	580b      	ldrlt	r3, [r1, r0]
 8009c9c:	18c0      	addlt	r0, r0, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_init>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	bf00      	nop
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr

08009cac <_fini>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	bf00      	nop
 8009cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cb2:	bc08      	pop	{r3}
 8009cb4:	469e      	mov	lr, r3
 8009cb6:	4770      	bx	lr
